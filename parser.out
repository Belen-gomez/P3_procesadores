Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> empty
Rule 3     statement -> content SEMICOLON
Rule 4     statement -> content SEMICOLON statement
Rule 5     statement -> noSM statement
Rule 6     statement -> noSM
Rule 7     content -> declaration
Rule 8     content -> assignment
Rule 9     content -> definicion_ajson
Rule 10    noSM -> function
Rule 11    noSM -> condition
Rule 12    noSM -> loop
Rule 13    num -> ENTERO
Rule 14    num -> DECIMAL
Rule 15    bool -> TR
Rule 16    bool -> FL
Rule 17    declaration -> LET id
Rule 18    id -> var
Rule 19    id -> var COMA id
Rule 20    id -> var IGUAL expr
Rule 21    id -> var IGUAL expr COMA id
Rule 22    var -> CSINCOMILLAS
Rule 23    var -> CSINCOMILLAS PUNTOS tipo
Rule 24    tipo -> INT
Rule 25    tipo -> FLOAT
Rule 26    tipo -> CHARACTER
Rule 27    tipo -> BOOLEAN
Rule 28    tipo -> CSINCOMILLAS
Rule 29    assignment -> var IGUAL expr
Rule 30    expr -> operacion
Rule 31    expr -> num
Rule 32    expr -> bool
Rule 33    expr -> NULL
Rule 34    expr -> CSINCOMILLAS
Rule 35    expr -> RESTA expr
Rule 36    expr -> SUMA expr
Rule 37    expr -> CARACTER
Rule 38    expr -> ajson
Rule 39    expr -> LPARENT expr RPARENT
Rule 40    expr -> punto
Rule 41    expr -> corchete
Rule 42    expr -> functioncall
Rule 43    operacion -> aritmetica
Rule 44    operacion -> binaria
Rule 45    operacion -> comparation
Rule 46    aritmetica -> expr SUMA expr
Rule 47    aritmetica -> expr RESTA expr
Rule 48    aritmetica -> expr MUL expr
Rule 49    aritmetica -> expr DIV expr
Rule 50    binaria -> expr AND expr
Rule 51    binaria -> expr OR expr
Rule 52    binaria -> NOT expr
Rule 53    comparation -> expr LE expr
Rule 54    comparation -> expr LT expr
Rule 55    comparation -> expr GE expr
Rule 56    comparation -> expr GT expr
Rule 57    comparation -> expr EQ expr
Rule 58    definicion_ajson -> TYPE CSINCOMILLAS IGUAL ajson_t
Rule 59    ajson_t -> LBRACKET object_t RBRACKET
Rule 60    object_t -> pair_t COMA object_t
Rule 61    object_t -> pair_t COMA
Rule 62    object_t -> pair_t
Rule 63    pair_t -> clave PUNTOS tipo
Rule 64    pair_t -> clave PUNTOS ajson_t
Rule 65    clave -> CCOMILLAS
Rule 66    clave -> CSINCOMILLAS
Rule 67    ajson -> LBRACKET object RBRACKET
Rule 68    object -> pair COMA object
Rule 69    object -> pair COMA
Rule 70    object -> pair
Rule 71    pair -> clave PUNTOS expr
Rule 72    punto -> CSINCOMILLAS PUNTO CSINCOMILLAS
Rule 73    punto -> CSINCOMILLAS PUNTO punto
Rule 74    punto -> CSINCOMILLAS PUNTO corchete
Rule 75    corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
Rule 76    recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete
Rule 77    recur_corchete -> empty
Rule 78    recur_corchete -> PUNTO CSINCOMILLAS
Rule 79    recur_corchete -> PUNTO punto
Rule 80    condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET
Rule 81    condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
Rule 82    loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
Rule 83    function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
Rule 84    function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
Rule 85    function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
Rule 86    function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
Rule 87    arg_list -> CSINCOMILLAS PUNTOS tipo
Rule 88    arg_list -> CSINCOMILLAS PUNTOS tipo COMA arg_list
Rule 89    functioncall -> CSINCOMILLAS LPARENT RPARENT
Rule 90    functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT
Rule 91    argumentos -> expr
Rule 92    argumentos -> expr COMA argumentos
Rule 93    empty -> <empty>

Terminals, with rules where they appear

AND                  : 50
BOOLEAN              : 27
CARACTER             : 37
CCOMILLAS            : 65 75 76
CHARACTER            : 26
COMA                 : 19 21 60 61 68 69 88 92
CSINCOMILLAS         : 22 23 28 34 58 66 72 72 73 74 75 78 83 84 85 86 87 88 89 90
DECIMAL              : 14
DIV                  : 49
ELSE                 : 81
ENTERO               : 13
EQ                   : 57
FL                   : 16
FLOAT                : 25
FUNCTION             : 83 84 85 86
GE                   : 55
GT                   : 56
IF                   : 80 81
IGUAL                : 20 21 29 58
INT                  : 24
LBRACKET             : 59 67 80 81 81 82 83 84 85 86
LCORCHETE            : 75 76
LE                   : 53
LET                  : 17
LPARENT              : 39 80 81 82 83 84 85 86 89 90
LT                   : 54
MUL                  : 48
NOT                  : 52
NULL                 : 33
OR                   : 51
PUNTO                : 72 73 74 78 79
PUNTOS               : 23 63 64 71 83 84 85 86 87 88
RBRACKET             : 59 67 80 81 81 82 83 84 85 86
RCORCHETE            : 75 76
RESTA                : 35 47
RETURN               : 83 84 85 86
RPARENT              : 39 80 81 82 83 84 85 86 89 90
SEMICOLON            : 3 4 83 84 85 86
SUMA                 : 36 46
TR                   : 15
TYPE                 : 58
WHILE                : 82
error                : 

Nonterminals, with rules where they appear

ajson                : 38
ajson_t              : 58 64
arg_list             : 85 86 88
argumentos           : 90 92
aritmetica           : 43
assignment           : 8
binaria              : 44
bool                 : 32
clave                : 63 64 71
comparation          : 45
condition            : 11
content              : 3 4
corchete             : 41 74
declaration          : 7
definicion_ajson     : 9
empty                : 2 77
expr                 : 20 21 29 35 36 39 46 46 47 47 48 48 49 49 50 50 51 51 52 53 53 54 54 55 55 56 56 57 57 71 80 81 82 83 84 85 86 91 92
function             : 10
functioncall         : 42
id                   : 17 19 21
loop                 : 12
noSM                 : 5 6
num                  : 31
object               : 67 68
object_t             : 59 60
operacion            : 30
pair                 : 68 69 70
pair_t               : 60 61 62
program              : 0
punto                : 40 73 79
recur_corchete       : 75 76
statement            : 1 4 5 80 81 81 82 83 85
tipo                 : 23 63 83 84 85 86 87 88
var                  : 18 19 20 21 29

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . empty
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (93) empty -> .
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (17) declaration -> . LET id
    (29) assignment -> . var IGUAL expr
    (58) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (83) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (84) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (86) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (80) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (81) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (82) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (22) var -> . CSINCOMILLAS
    (23) var -> . CSINCOMILLAS PUNTOS tipo

    $end            reduce using rule 93 (empty -> .)
    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    program                        shift and go to state 1
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .

    $end            reduce using rule 1 (program -> statement .)


state 3

    (2) program -> empty .

    $end            reduce using rule 2 (program -> empty .)


state 4

    (3) statement -> content . SEMICOLON
    (4) statement -> content . SEMICOLON statement

    SEMICOLON       shift and go to state 19


state 5

    (5) statement -> noSM . statement
    (6) statement -> noSM .
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (17) declaration -> . LET id
    (29) assignment -> . var IGUAL expr
    (58) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (83) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (84) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (86) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (80) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (81) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (82) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (22) var -> . CSINCOMILLAS
    (23) var -> . CSINCOMILLAS PUNTOS tipo

    $end            reduce using rule 6 (statement -> noSM .)
    RBRACKET        reduce using rule 6 (statement -> noSM .)
    RETURN          reduce using rule 6 (statement -> noSM .)
    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    noSM                           shift and go to state 5
    statement                      shift and go to state 20
    content                        shift and go to state 4
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 6

    (7) content -> declaration .

    SEMICOLON       reduce using rule 7 (content -> declaration .)


state 7

    (8) content -> assignment .

    SEMICOLON       reduce using rule 8 (content -> assignment .)


state 8

    (9) content -> definicion_ajson .

    SEMICOLON       reduce using rule 9 (content -> definicion_ajson .)


state 9

    (10) noSM -> function .

    LET             reduce using rule 10 (noSM -> function .)
    TYPE            reduce using rule 10 (noSM -> function .)
    FUNCTION        reduce using rule 10 (noSM -> function .)
    IF              reduce using rule 10 (noSM -> function .)
    WHILE           reduce using rule 10 (noSM -> function .)
    CSINCOMILLAS    reduce using rule 10 (noSM -> function .)
    $end            reduce using rule 10 (noSM -> function .)
    RBRACKET        reduce using rule 10 (noSM -> function .)
    RETURN          reduce using rule 10 (noSM -> function .)


state 10

    (11) noSM -> condition .

    LET             reduce using rule 11 (noSM -> condition .)
    TYPE            reduce using rule 11 (noSM -> condition .)
    FUNCTION        reduce using rule 11 (noSM -> condition .)
    IF              reduce using rule 11 (noSM -> condition .)
    WHILE           reduce using rule 11 (noSM -> condition .)
    CSINCOMILLAS    reduce using rule 11 (noSM -> condition .)
    $end            reduce using rule 11 (noSM -> condition .)
    RBRACKET        reduce using rule 11 (noSM -> condition .)
    RETURN          reduce using rule 11 (noSM -> condition .)


state 11

    (12) noSM -> loop .

    LET             reduce using rule 12 (noSM -> loop .)
    TYPE            reduce using rule 12 (noSM -> loop .)
    FUNCTION        reduce using rule 12 (noSM -> loop .)
    IF              reduce using rule 12 (noSM -> loop .)
    WHILE           reduce using rule 12 (noSM -> loop .)
    CSINCOMILLAS    reduce using rule 12 (noSM -> loop .)
    $end            reduce using rule 12 (noSM -> loop .)
    RBRACKET        reduce using rule 12 (noSM -> loop .)
    RETURN          reduce using rule 12 (noSM -> loop .)


state 12

    (17) declaration -> LET . id
    (18) id -> . var
    (19) id -> . var COMA id
    (20) id -> . var IGUAL expr
    (21) id -> . var IGUAL expr COMA id
    (22) var -> . CSINCOMILLAS
    (23) var -> . CSINCOMILLAS PUNTOS tipo

    CSINCOMILLAS    shift and go to state 15

    id                             shift and go to state 21
    var                            shift and go to state 22

state 13

    (29) assignment -> var . IGUAL expr

    IGUAL           shift and go to state 23


state 14

    (58) definicion_ajson -> TYPE . CSINCOMILLAS IGUAL ajson_t

    CSINCOMILLAS    shift and go to state 24


state 15

    (22) var -> CSINCOMILLAS .
    (23) var -> CSINCOMILLAS . PUNTOS tipo

    IGUAL           reduce using rule 22 (var -> CSINCOMILLAS .)
    COMA            reduce using rule 22 (var -> CSINCOMILLAS .)
    SEMICOLON       reduce using rule 22 (var -> CSINCOMILLAS .)
    PUNTOS          shift and go to state 25


state 16

    (83) function -> FUNCTION . CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (84) function -> FUNCTION . CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) function -> FUNCTION . CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (86) function -> FUNCTION . CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    CSINCOMILLAS    shift and go to state 26


state 17

    (80) condition -> IF . LPARENT expr RPARENT LBRACKET statement RBRACKET
    (81) condition -> IF . LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET

    LPARENT         shift and go to state 27


state 18

    (82) loop -> WHILE . LPARENT expr RPARENT LBRACKET statement RBRACKET

    LPARENT         shift and go to state 28


state 19

    (3) statement -> content SEMICOLON .
    (4) statement -> content SEMICOLON . statement
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (17) declaration -> . LET id
    (29) assignment -> . var IGUAL expr
    (58) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (83) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (84) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (86) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (80) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (81) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (82) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (22) var -> . CSINCOMILLAS
    (23) var -> . CSINCOMILLAS PUNTOS tipo

    $end            reduce using rule 3 (statement -> content SEMICOLON .)
    RBRACKET        reduce using rule 3 (statement -> content SEMICOLON .)
    RETURN          reduce using rule 3 (statement -> content SEMICOLON .)
    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    content                        shift and go to state 4
    statement                      shift and go to state 29
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 20

    (5) statement -> noSM statement .

    $end            reduce using rule 5 (statement -> noSM statement .)
    RBRACKET        reduce using rule 5 (statement -> noSM statement .)
    RETURN          reduce using rule 5 (statement -> noSM statement .)


state 21

    (17) declaration -> LET id .

    SEMICOLON       reduce using rule 17 (declaration -> LET id .)


state 22

    (18) id -> var .
    (19) id -> var . COMA id
    (20) id -> var . IGUAL expr
    (21) id -> var . IGUAL expr COMA id

    SEMICOLON       reduce using rule 18 (id -> var .)
    COMA            shift and go to state 30
    IGUAL           shift and go to state 31


state 23

    (29) assignment -> var IGUAL . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 32
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 24

    (58) definicion_ajson -> TYPE CSINCOMILLAS . IGUAL ajson_t

    IGUAL           shift and go to state 55


state 25

    (23) var -> CSINCOMILLAS PUNTOS . tipo
    (24) tipo -> . INT
    (25) tipo -> . FLOAT
    (26) tipo -> . CHARACTER
    (27) tipo -> . BOOLEAN
    (28) tipo -> . CSINCOMILLAS

    INT             shift and go to state 58
    FLOAT           shift and go to state 59
    CHARACTER       shift and go to state 60
    BOOLEAN         shift and go to state 61
    CSINCOMILLAS    shift and go to state 56

    tipo                           shift and go to state 57

state 26

    (83) function -> FUNCTION CSINCOMILLAS . LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (84) function -> FUNCTION CSINCOMILLAS . LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) function -> FUNCTION CSINCOMILLAS . LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (86) function -> FUNCTION CSINCOMILLAS . LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    LPARENT         shift and go to state 62


state 27

    (80) condition -> IF LPARENT . expr RPARENT LBRACKET statement RBRACKET
    (81) condition -> IF LPARENT . expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 63
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 28

    (82) loop -> WHILE LPARENT . expr RPARENT LBRACKET statement RBRACKET
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 64
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 29

    (4) statement -> content SEMICOLON statement .

    $end            reduce using rule 4 (statement -> content SEMICOLON statement .)
    RBRACKET        reduce using rule 4 (statement -> content SEMICOLON statement .)
    RETURN          reduce using rule 4 (statement -> content SEMICOLON statement .)


state 30

    (19) id -> var COMA . id
    (18) id -> . var
    (19) id -> . var COMA id
    (20) id -> . var IGUAL expr
    (21) id -> . var IGUAL expr COMA id
    (22) var -> . CSINCOMILLAS
    (23) var -> . CSINCOMILLAS PUNTOS tipo

    CSINCOMILLAS    shift and go to state 15

    var                            shift and go to state 22
    id                             shift and go to state 65

state 31

    (20) id -> var IGUAL . expr
    (21) id -> var IGUAL . expr COMA id
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 66
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 32

    (29) assignment -> var IGUAL expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SEMICOLON       reduce using rule 29 (assignment -> var IGUAL expr .)
    SUMA            shift and go to state 67
    RESTA           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77


state 33

    (30) expr -> operacion .

    SUMA            reduce using rule 30 (expr -> operacion .)
    RESTA           reduce using rule 30 (expr -> operacion .)
    MUL             reduce using rule 30 (expr -> operacion .)
    DIV             reduce using rule 30 (expr -> operacion .)
    AND             reduce using rule 30 (expr -> operacion .)
    OR              reduce using rule 30 (expr -> operacion .)
    LE              reduce using rule 30 (expr -> operacion .)
    LT              reduce using rule 30 (expr -> operacion .)
    GE              reduce using rule 30 (expr -> operacion .)
    GT              reduce using rule 30 (expr -> operacion .)
    EQ              reduce using rule 30 (expr -> operacion .)
    SEMICOLON       reduce using rule 30 (expr -> operacion .)
    RPARENT         reduce using rule 30 (expr -> operacion .)
    COMA            reduce using rule 30 (expr -> operacion .)
    RBRACKET        reduce using rule 30 (expr -> operacion .)


state 34

    (31) expr -> num .

    SUMA            reduce using rule 31 (expr -> num .)
    RESTA           reduce using rule 31 (expr -> num .)
    MUL             reduce using rule 31 (expr -> num .)
    DIV             reduce using rule 31 (expr -> num .)
    AND             reduce using rule 31 (expr -> num .)
    OR              reduce using rule 31 (expr -> num .)
    LE              reduce using rule 31 (expr -> num .)
    LT              reduce using rule 31 (expr -> num .)
    GE              reduce using rule 31 (expr -> num .)
    GT              reduce using rule 31 (expr -> num .)
    EQ              reduce using rule 31 (expr -> num .)
    SEMICOLON       reduce using rule 31 (expr -> num .)
    RPARENT         reduce using rule 31 (expr -> num .)
    COMA            reduce using rule 31 (expr -> num .)
    RBRACKET        reduce using rule 31 (expr -> num .)


state 35

    (32) expr -> bool .

    SUMA            reduce using rule 32 (expr -> bool .)
    RESTA           reduce using rule 32 (expr -> bool .)
    MUL             reduce using rule 32 (expr -> bool .)
    DIV             reduce using rule 32 (expr -> bool .)
    AND             reduce using rule 32 (expr -> bool .)
    OR              reduce using rule 32 (expr -> bool .)
    LE              reduce using rule 32 (expr -> bool .)
    LT              reduce using rule 32 (expr -> bool .)
    GE              reduce using rule 32 (expr -> bool .)
    GT              reduce using rule 32 (expr -> bool .)
    EQ              reduce using rule 32 (expr -> bool .)
    SEMICOLON       reduce using rule 32 (expr -> bool .)
    RPARENT         reduce using rule 32 (expr -> bool .)
    COMA            reduce using rule 32 (expr -> bool .)
    RBRACKET        reduce using rule 32 (expr -> bool .)


state 36

    (33) expr -> NULL .

    SUMA            reduce using rule 33 (expr -> NULL .)
    RESTA           reduce using rule 33 (expr -> NULL .)
    MUL             reduce using rule 33 (expr -> NULL .)
    DIV             reduce using rule 33 (expr -> NULL .)
    AND             reduce using rule 33 (expr -> NULL .)
    OR              reduce using rule 33 (expr -> NULL .)
    LE              reduce using rule 33 (expr -> NULL .)
    LT              reduce using rule 33 (expr -> NULL .)
    GE              reduce using rule 33 (expr -> NULL .)
    GT              reduce using rule 33 (expr -> NULL .)
    EQ              reduce using rule 33 (expr -> NULL .)
    SEMICOLON       reduce using rule 33 (expr -> NULL .)
    RPARENT         reduce using rule 33 (expr -> NULL .)
    COMA            reduce using rule 33 (expr -> NULL .)
    RBRACKET        reduce using rule 33 (expr -> NULL .)


state 37

    (34) expr -> CSINCOMILLAS .
    (72) punto -> CSINCOMILLAS . PUNTO CSINCOMILLAS
    (73) punto -> CSINCOMILLAS . PUNTO punto
    (74) punto -> CSINCOMILLAS . PUNTO corchete
    (75) corchete -> CSINCOMILLAS . LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> CSINCOMILLAS . LPARENT RPARENT
    (90) functioncall -> CSINCOMILLAS . LPARENT argumentos RPARENT

    SUMA            reduce using rule 34 (expr -> CSINCOMILLAS .)
    RESTA           reduce using rule 34 (expr -> CSINCOMILLAS .)
    MUL             reduce using rule 34 (expr -> CSINCOMILLAS .)
    DIV             reduce using rule 34 (expr -> CSINCOMILLAS .)
    AND             reduce using rule 34 (expr -> CSINCOMILLAS .)
    OR              reduce using rule 34 (expr -> CSINCOMILLAS .)
    LE              reduce using rule 34 (expr -> CSINCOMILLAS .)
    LT              reduce using rule 34 (expr -> CSINCOMILLAS .)
    GE              reduce using rule 34 (expr -> CSINCOMILLAS .)
    GT              reduce using rule 34 (expr -> CSINCOMILLAS .)
    EQ              reduce using rule 34 (expr -> CSINCOMILLAS .)
    SEMICOLON       reduce using rule 34 (expr -> CSINCOMILLAS .)
    RPARENT         reduce using rule 34 (expr -> CSINCOMILLAS .)
    COMA            reduce using rule 34 (expr -> CSINCOMILLAS .)
    RBRACKET        reduce using rule 34 (expr -> CSINCOMILLAS .)
    PUNTO           shift and go to state 78
    LCORCHETE       shift and go to state 79
    LPARENT         shift and go to state 80


state 38

    (35) expr -> RESTA . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 81
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 39

    (36) expr -> SUMA . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 82
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 40

    (37) expr -> CARACTER .

    SUMA            reduce using rule 37 (expr -> CARACTER .)
    RESTA           reduce using rule 37 (expr -> CARACTER .)
    MUL             reduce using rule 37 (expr -> CARACTER .)
    DIV             reduce using rule 37 (expr -> CARACTER .)
    AND             reduce using rule 37 (expr -> CARACTER .)
    OR              reduce using rule 37 (expr -> CARACTER .)
    LE              reduce using rule 37 (expr -> CARACTER .)
    LT              reduce using rule 37 (expr -> CARACTER .)
    GE              reduce using rule 37 (expr -> CARACTER .)
    GT              reduce using rule 37 (expr -> CARACTER .)
    EQ              reduce using rule 37 (expr -> CARACTER .)
    SEMICOLON       reduce using rule 37 (expr -> CARACTER .)
    RPARENT         reduce using rule 37 (expr -> CARACTER .)
    COMA            reduce using rule 37 (expr -> CARACTER .)
    RBRACKET        reduce using rule 37 (expr -> CARACTER .)


state 41

    (38) expr -> ajson .

    SUMA            reduce using rule 38 (expr -> ajson .)
    RESTA           reduce using rule 38 (expr -> ajson .)
    MUL             reduce using rule 38 (expr -> ajson .)
    DIV             reduce using rule 38 (expr -> ajson .)
    AND             reduce using rule 38 (expr -> ajson .)
    OR              reduce using rule 38 (expr -> ajson .)
    LE              reduce using rule 38 (expr -> ajson .)
    LT              reduce using rule 38 (expr -> ajson .)
    GE              reduce using rule 38 (expr -> ajson .)
    GT              reduce using rule 38 (expr -> ajson .)
    EQ              reduce using rule 38 (expr -> ajson .)
    SEMICOLON       reduce using rule 38 (expr -> ajson .)
    RPARENT         reduce using rule 38 (expr -> ajson .)
    COMA            reduce using rule 38 (expr -> ajson .)
    RBRACKET        reduce using rule 38 (expr -> ajson .)


state 42

    (39) expr -> LPARENT . expr RPARENT
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 83
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 43

    (40) expr -> punto .

    SUMA            reduce using rule 40 (expr -> punto .)
    RESTA           reduce using rule 40 (expr -> punto .)
    MUL             reduce using rule 40 (expr -> punto .)
    DIV             reduce using rule 40 (expr -> punto .)
    AND             reduce using rule 40 (expr -> punto .)
    OR              reduce using rule 40 (expr -> punto .)
    LE              reduce using rule 40 (expr -> punto .)
    LT              reduce using rule 40 (expr -> punto .)
    GE              reduce using rule 40 (expr -> punto .)
    GT              reduce using rule 40 (expr -> punto .)
    EQ              reduce using rule 40 (expr -> punto .)
    SEMICOLON       reduce using rule 40 (expr -> punto .)
    RPARENT         reduce using rule 40 (expr -> punto .)
    COMA            reduce using rule 40 (expr -> punto .)
    RBRACKET        reduce using rule 40 (expr -> punto .)


state 44

    (41) expr -> corchete .

    SUMA            reduce using rule 41 (expr -> corchete .)
    RESTA           reduce using rule 41 (expr -> corchete .)
    MUL             reduce using rule 41 (expr -> corchete .)
    DIV             reduce using rule 41 (expr -> corchete .)
    AND             reduce using rule 41 (expr -> corchete .)
    OR              reduce using rule 41 (expr -> corchete .)
    LE              reduce using rule 41 (expr -> corchete .)
    LT              reduce using rule 41 (expr -> corchete .)
    GE              reduce using rule 41 (expr -> corchete .)
    GT              reduce using rule 41 (expr -> corchete .)
    EQ              reduce using rule 41 (expr -> corchete .)
    SEMICOLON       reduce using rule 41 (expr -> corchete .)
    RPARENT         reduce using rule 41 (expr -> corchete .)
    COMA            reduce using rule 41 (expr -> corchete .)
    RBRACKET        reduce using rule 41 (expr -> corchete .)


state 45

    (42) expr -> functioncall .

    SUMA            reduce using rule 42 (expr -> functioncall .)
    RESTA           reduce using rule 42 (expr -> functioncall .)
    MUL             reduce using rule 42 (expr -> functioncall .)
    DIV             reduce using rule 42 (expr -> functioncall .)
    AND             reduce using rule 42 (expr -> functioncall .)
    OR              reduce using rule 42 (expr -> functioncall .)
    LE              reduce using rule 42 (expr -> functioncall .)
    LT              reduce using rule 42 (expr -> functioncall .)
    GE              reduce using rule 42 (expr -> functioncall .)
    GT              reduce using rule 42 (expr -> functioncall .)
    EQ              reduce using rule 42 (expr -> functioncall .)
    SEMICOLON       reduce using rule 42 (expr -> functioncall .)
    RPARENT         reduce using rule 42 (expr -> functioncall .)
    COMA            reduce using rule 42 (expr -> functioncall .)
    RBRACKET        reduce using rule 42 (expr -> functioncall .)


state 46

    (43) operacion -> aritmetica .

    SUMA            reduce using rule 43 (operacion -> aritmetica .)
    RESTA           reduce using rule 43 (operacion -> aritmetica .)
    MUL             reduce using rule 43 (operacion -> aritmetica .)
    DIV             reduce using rule 43 (operacion -> aritmetica .)
    AND             reduce using rule 43 (operacion -> aritmetica .)
    OR              reduce using rule 43 (operacion -> aritmetica .)
    LE              reduce using rule 43 (operacion -> aritmetica .)
    LT              reduce using rule 43 (operacion -> aritmetica .)
    GE              reduce using rule 43 (operacion -> aritmetica .)
    GT              reduce using rule 43 (operacion -> aritmetica .)
    EQ              reduce using rule 43 (operacion -> aritmetica .)
    SEMICOLON       reduce using rule 43 (operacion -> aritmetica .)
    RPARENT         reduce using rule 43 (operacion -> aritmetica .)
    COMA            reduce using rule 43 (operacion -> aritmetica .)
    RBRACKET        reduce using rule 43 (operacion -> aritmetica .)


state 47

    (44) operacion -> binaria .

    SUMA            reduce using rule 44 (operacion -> binaria .)
    RESTA           reduce using rule 44 (operacion -> binaria .)
    MUL             reduce using rule 44 (operacion -> binaria .)
    DIV             reduce using rule 44 (operacion -> binaria .)
    AND             reduce using rule 44 (operacion -> binaria .)
    OR              reduce using rule 44 (operacion -> binaria .)
    LE              reduce using rule 44 (operacion -> binaria .)
    LT              reduce using rule 44 (operacion -> binaria .)
    GE              reduce using rule 44 (operacion -> binaria .)
    GT              reduce using rule 44 (operacion -> binaria .)
    EQ              reduce using rule 44 (operacion -> binaria .)
    SEMICOLON       reduce using rule 44 (operacion -> binaria .)
    RPARENT         reduce using rule 44 (operacion -> binaria .)
    COMA            reduce using rule 44 (operacion -> binaria .)
    RBRACKET        reduce using rule 44 (operacion -> binaria .)


state 48

    (45) operacion -> comparation .

    SUMA            reduce using rule 45 (operacion -> comparation .)
    RESTA           reduce using rule 45 (operacion -> comparation .)
    MUL             reduce using rule 45 (operacion -> comparation .)
    DIV             reduce using rule 45 (operacion -> comparation .)
    AND             reduce using rule 45 (operacion -> comparation .)
    OR              reduce using rule 45 (operacion -> comparation .)
    LE              reduce using rule 45 (operacion -> comparation .)
    LT              reduce using rule 45 (operacion -> comparation .)
    GE              reduce using rule 45 (operacion -> comparation .)
    GT              reduce using rule 45 (operacion -> comparation .)
    EQ              reduce using rule 45 (operacion -> comparation .)
    SEMICOLON       reduce using rule 45 (operacion -> comparation .)
    RPARENT         reduce using rule 45 (operacion -> comparation .)
    COMA            reduce using rule 45 (operacion -> comparation .)
    RBRACKET        reduce using rule 45 (operacion -> comparation .)


state 49

    (13) num -> ENTERO .

    SUMA            reduce using rule 13 (num -> ENTERO .)
    RESTA           reduce using rule 13 (num -> ENTERO .)
    MUL             reduce using rule 13 (num -> ENTERO .)
    DIV             reduce using rule 13 (num -> ENTERO .)
    AND             reduce using rule 13 (num -> ENTERO .)
    OR              reduce using rule 13 (num -> ENTERO .)
    LE              reduce using rule 13 (num -> ENTERO .)
    LT              reduce using rule 13 (num -> ENTERO .)
    GE              reduce using rule 13 (num -> ENTERO .)
    GT              reduce using rule 13 (num -> ENTERO .)
    EQ              reduce using rule 13 (num -> ENTERO .)
    SEMICOLON       reduce using rule 13 (num -> ENTERO .)
    RPARENT         reduce using rule 13 (num -> ENTERO .)
    COMA            reduce using rule 13 (num -> ENTERO .)
    RBRACKET        reduce using rule 13 (num -> ENTERO .)


state 50

    (14) num -> DECIMAL .

    SUMA            reduce using rule 14 (num -> DECIMAL .)
    RESTA           reduce using rule 14 (num -> DECIMAL .)
    MUL             reduce using rule 14 (num -> DECIMAL .)
    DIV             reduce using rule 14 (num -> DECIMAL .)
    AND             reduce using rule 14 (num -> DECIMAL .)
    OR              reduce using rule 14 (num -> DECIMAL .)
    LE              reduce using rule 14 (num -> DECIMAL .)
    LT              reduce using rule 14 (num -> DECIMAL .)
    GE              reduce using rule 14 (num -> DECIMAL .)
    GT              reduce using rule 14 (num -> DECIMAL .)
    EQ              reduce using rule 14 (num -> DECIMAL .)
    SEMICOLON       reduce using rule 14 (num -> DECIMAL .)
    RPARENT         reduce using rule 14 (num -> DECIMAL .)
    COMA            reduce using rule 14 (num -> DECIMAL .)
    RBRACKET        reduce using rule 14 (num -> DECIMAL .)


state 51

    (15) bool -> TR .

    SUMA            reduce using rule 15 (bool -> TR .)
    RESTA           reduce using rule 15 (bool -> TR .)
    MUL             reduce using rule 15 (bool -> TR .)
    DIV             reduce using rule 15 (bool -> TR .)
    AND             reduce using rule 15 (bool -> TR .)
    OR              reduce using rule 15 (bool -> TR .)
    LE              reduce using rule 15 (bool -> TR .)
    LT              reduce using rule 15 (bool -> TR .)
    GE              reduce using rule 15 (bool -> TR .)
    GT              reduce using rule 15 (bool -> TR .)
    EQ              reduce using rule 15 (bool -> TR .)
    SEMICOLON       reduce using rule 15 (bool -> TR .)
    RPARENT         reduce using rule 15 (bool -> TR .)
    COMA            reduce using rule 15 (bool -> TR .)
    RBRACKET        reduce using rule 15 (bool -> TR .)


state 52

    (16) bool -> FL .

    SUMA            reduce using rule 16 (bool -> FL .)
    RESTA           reduce using rule 16 (bool -> FL .)
    MUL             reduce using rule 16 (bool -> FL .)
    DIV             reduce using rule 16 (bool -> FL .)
    AND             reduce using rule 16 (bool -> FL .)
    OR              reduce using rule 16 (bool -> FL .)
    LE              reduce using rule 16 (bool -> FL .)
    LT              reduce using rule 16 (bool -> FL .)
    GE              reduce using rule 16 (bool -> FL .)
    GT              reduce using rule 16 (bool -> FL .)
    EQ              reduce using rule 16 (bool -> FL .)
    SEMICOLON       reduce using rule 16 (bool -> FL .)
    RPARENT         reduce using rule 16 (bool -> FL .)
    COMA            reduce using rule 16 (bool -> FL .)
    RBRACKET        reduce using rule 16 (bool -> FL .)


state 53

    (67) ajson -> LBRACKET . object RBRACKET
    (68) object -> . pair COMA object
    (69) object -> . pair COMA
    (70) object -> . pair
    (71) pair -> . clave PUNTOS expr
    (65) clave -> . CCOMILLAS
    (66) clave -> . CSINCOMILLAS

    CCOMILLAS       shift and go to state 87
    CSINCOMILLAS    shift and go to state 88

    object                         shift and go to state 84
    pair                           shift and go to state 85
    clave                          shift and go to state 86

state 54

    (52) binaria -> NOT . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 89
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 55

    (58) definicion_ajson -> TYPE CSINCOMILLAS IGUAL . ajson_t
    (59) ajson_t -> . LBRACKET object_t RBRACKET

    LBRACKET        shift and go to state 91

    ajson_t                        shift and go to state 90

state 56

    (28) tipo -> CSINCOMILLAS .

    IGUAL           reduce using rule 28 (tipo -> CSINCOMILLAS .)
    COMA            reduce using rule 28 (tipo -> CSINCOMILLAS .)
    SEMICOLON       reduce using rule 28 (tipo -> CSINCOMILLAS .)
    RPARENT         reduce using rule 28 (tipo -> CSINCOMILLAS .)
    LBRACKET        reduce using rule 28 (tipo -> CSINCOMILLAS .)
    RBRACKET        reduce using rule 28 (tipo -> CSINCOMILLAS .)


state 57

    (23) var -> CSINCOMILLAS PUNTOS tipo .

    IGUAL           reduce using rule 23 (var -> CSINCOMILLAS PUNTOS tipo .)
    COMA            reduce using rule 23 (var -> CSINCOMILLAS PUNTOS tipo .)
    SEMICOLON       reduce using rule 23 (var -> CSINCOMILLAS PUNTOS tipo .)


state 58

    (24) tipo -> INT .

    IGUAL           reduce using rule 24 (tipo -> INT .)
    COMA            reduce using rule 24 (tipo -> INT .)
    SEMICOLON       reduce using rule 24 (tipo -> INT .)
    RPARENT         reduce using rule 24 (tipo -> INT .)
    LBRACKET        reduce using rule 24 (tipo -> INT .)
    RBRACKET        reduce using rule 24 (tipo -> INT .)


state 59

    (25) tipo -> FLOAT .

    IGUAL           reduce using rule 25 (tipo -> FLOAT .)
    COMA            reduce using rule 25 (tipo -> FLOAT .)
    SEMICOLON       reduce using rule 25 (tipo -> FLOAT .)
    RPARENT         reduce using rule 25 (tipo -> FLOAT .)
    LBRACKET        reduce using rule 25 (tipo -> FLOAT .)
    RBRACKET        reduce using rule 25 (tipo -> FLOAT .)


state 60

    (26) tipo -> CHARACTER .

    IGUAL           reduce using rule 26 (tipo -> CHARACTER .)
    COMA            reduce using rule 26 (tipo -> CHARACTER .)
    SEMICOLON       reduce using rule 26 (tipo -> CHARACTER .)
    RPARENT         reduce using rule 26 (tipo -> CHARACTER .)
    LBRACKET        reduce using rule 26 (tipo -> CHARACTER .)
    RBRACKET        reduce using rule 26 (tipo -> CHARACTER .)


state 61

    (27) tipo -> BOOLEAN .

    IGUAL           reduce using rule 27 (tipo -> BOOLEAN .)
    COMA            reduce using rule 27 (tipo -> BOOLEAN .)
    SEMICOLON       reduce using rule 27 (tipo -> BOOLEAN .)
    RPARENT         reduce using rule 27 (tipo -> BOOLEAN .)
    LBRACKET        reduce using rule 27 (tipo -> BOOLEAN .)
    RBRACKET        reduce using rule 27 (tipo -> BOOLEAN .)


state 62

    (83) function -> FUNCTION CSINCOMILLAS LPARENT . RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (84) function -> FUNCTION CSINCOMILLAS LPARENT . RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) function -> FUNCTION CSINCOMILLAS LPARENT . arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (86) function -> FUNCTION CSINCOMILLAS LPARENT . arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (87) arg_list -> . CSINCOMILLAS PUNTOS tipo
    (88) arg_list -> . CSINCOMILLAS PUNTOS tipo COMA arg_list

    RPARENT         shift and go to state 93
    CSINCOMILLAS    shift and go to state 92

    arg_list                       shift and go to state 94

state 63

    (80) condition -> IF LPARENT expr . RPARENT LBRACKET statement RBRACKET
    (81) condition -> IF LPARENT expr . RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    RPARENT         shift and go to state 95
    SUMA            shift and go to state 67
    RESTA           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77


state 64

    (82) loop -> WHILE LPARENT expr . RPARENT LBRACKET statement RBRACKET
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    RPARENT         shift and go to state 96
    SUMA            shift and go to state 67
    RESTA           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77


state 65

    (19) id -> var COMA id .

    SEMICOLON       reduce using rule 19 (id -> var COMA id .)


state 66

    (20) id -> var IGUAL expr .
    (21) id -> var IGUAL expr . COMA id
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SEMICOLON       reduce using rule 20 (id -> var IGUAL expr .)
    COMA            shift and go to state 97
    SUMA            shift and go to state 67
    RESTA           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77


state 67

    (46) aritmetica -> expr SUMA . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 98
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 68

    (47) aritmetica -> expr RESTA . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 99
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 69

    (48) aritmetica -> expr MUL . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 100
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 70

    (49) aritmetica -> expr DIV . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 101
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 71

    (50) binaria -> expr AND . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 102
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 72

    (51) binaria -> expr OR . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 103
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 73

    (53) comparation -> expr LE . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 104
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 74

    (54) comparation -> expr LT . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 105
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 75

    (55) comparation -> expr GE . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 106
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 76

    (56) comparation -> expr GT . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 107
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 77

    (57) comparation -> expr EQ . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 108
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 78

    (72) punto -> CSINCOMILLAS PUNTO . CSINCOMILLAS
    (73) punto -> CSINCOMILLAS PUNTO . punto
    (74) punto -> CSINCOMILLAS PUNTO . corchete
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete

    CSINCOMILLAS    shift and go to state 109

    punto                          shift and go to state 110
    corchete                       shift and go to state 111

state 79

    (75) corchete -> CSINCOMILLAS LCORCHETE . CCOMILLAS RCORCHETE recur_corchete

    CCOMILLAS       shift and go to state 112


state 80

    (89) functioncall -> CSINCOMILLAS LPARENT . RPARENT
    (90) functioncall -> CSINCOMILLAS LPARENT . argumentos RPARENT
    (91) argumentos -> . expr
    (92) argumentos -> . expr COMA argumentos
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    RPARENT         shift and go to state 113
    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    argumentos                     shift and go to state 114
    expr                           shift and go to state 115
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 81

    (35) expr -> RESTA expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SUMA            reduce using rule 35 (expr -> RESTA expr .)
    RESTA           reduce using rule 35 (expr -> RESTA expr .)
    MUL             reduce using rule 35 (expr -> RESTA expr .)
    DIV             reduce using rule 35 (expr -> RESTA expr .)
    SEMICOLON       reduce using rule 35 (expr -> RESTA expr .)
    RPARENT         reduce using rule 35 (expr -> RESTA expr .)
    COMA            reduce using rule 35 (expr -> RESTA expr .)
    RBRACKET        reduce using rule 35 (expr -> RESTA expr .)
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77

  ! AND             [ reduce using rule 35 (expr -> RESTA expr .) ]
  ! OR              [ reduce using rule 35 (expr -> RESTA expr .) ]
  ! LE              [ reduce using rule 35 (expr -> RESTA expr .) ]
  ! LT              [ reduce using rule 35 (expr -> RESTA expr .) ]
  ! GE              [ reduce using rule 35 (expr -> RESTA expr .) ]
  ! GT              [ reduce using rule 35 (expr -> RESTA expr .) ]
  ! EQ              [ reduce using rule 35 (expr -> RESTA expr .) ]
  ! SUMA            [ shift and go to state 67 ]
  ! RESTA           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]


state 82

    (36) expr -> SUMA expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SUMA            reduce using rule 36 (expr -> SUMA expr .)
    RESTA           reduce using rule 36 (expr -> SUMA expr .)
    MUL             reduce using rule 36 (expr -> SUMA expr .)
    DIV             reduce using rule 36 (expr -> SUMA expr .)
    SEMICOLON       reduce using rule 36 (expr -> SUMA expr .)
    RPARENT         reduce using rule 36 (expr -> SUMA expr .)
    COMA            reduce using rule 36 (expr -> SUMA expr .)
    RBRACKET        reduce using rule 36 (expr -> SUMA expr .)
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77

  ! AND             [ reduce using rule 36 (expr -> SUMA expr .) ]
  ! OR              [ reduce using rule 36 (expr -> SUMA expr .) ]
  ! LE              [ reduce using rule 36 (expr -> SUMA expr .) ]
  ! LT              [ reduce using rule 36 (expr -> SUMA expr .) ]
  ! GE              [ reduce using rule 36 (expr -> SUMA expr .) ]
  ! GT              [ reduce using rule 36 (expr -> SUMA expr .) ]
  ! EQ              [ reduce using rule 36 (expr -> SUMA expr .) ]
  ! SUMA            [ shift and go to state 67 ]
  ! RESTA           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]


state 83

    (39) expr -> LPARENT expr . RPARENT
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    RPARENT         shift and go to state 116
    SUMA            shift and go to state 67
    RESTA           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77


state 84

    (67) ajson -> LBRACKET object . RBRACKET

    RBRACKET        shift and go to state 117


state 85

    (68) object -> pair . COMA object
    (69) object -> pair . COMA
    (70) object -> pair .

    COMA            shift and go to state 118
    RBRACKET        reduce using rule 70 (object -> pair .)


state 86

    (71) pair -> clave . PUNTOS expr

    PUNTOS          shift and go to state 119


state 87

    (65) clave -> CCOMILLAS .

    PUNTOS          reduce using rule 65 (clave -> CCOMILLAS .)


state 88

    (66) clave -> CSINCOMILLAS .

    PUNTOS          reduce using rule 66 (clave -> CSINCOMILLAS .)


state 89

    (52) binaria -> NOT expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SUMA            reduce using rule 52 (binaria -> NOT expr .)
    RESTA           reduce using rule 52 (binaria -> NOT expr .)
    MUL             reduce using rule 52 (binaria -> NOT expr .)
    DIV             reduce using rule 52 (binaria -> NOT expr .)
    LE              reduce using rule 52 (binaria -> NOT expr .)
    LT              reduce using rule 52 (binaria -> NOT expr .)
    GE              reduce using rule 52 (binaria -> NOT expr .)
    GT              reduce using rule 52 (binaria -> NOT expr .)
    EQ              reduce using rule 52 (binaria -> NOT expr .)
    SEMICOLON       reduce using rule 52 (binaria -> NOT expr .)
    RPARENT         reduce using rule 52 (binaria -> NOT expr .)
    COMA            reduce using rule 52 (binaria -> NOT expr .)
    RBRACKET        reduce using rule 52 (binaria -> NOT expr .)
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! AND             [ reduce using rule 52 (binaria -> NOT expr .) ]
  ! OR              [ reduce using rule 52 (binaria -> NOT expr .) ]
  ! SUMA            [ shift and go to state 67 ]
  ! RESTA           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! LE              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GE              [ shift and go to state 75 ]
  ! GT              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 77 ]


state 90

    (58) definicion_ajson -> TYPE CSINCOMILLAS IGUAL ajson_t .

    SEMICOLON       reduce using rule 58 (definicion_ajson -> TYPE CSINCOMILLAS IGUAL ajson_t .)


state 91

    (59) ajson_t -> LBRACKET . object_t RBRACKET
    (60) object_t -> . pair_t COMA object_t
    (61) object_t -> . pair_t COMA
    (62) object_t -> . pair_t
    (63) pair_t -> . clave PUNTOS tipo
    (64) pair_t -> . clave PUNTOS ajson_t
    (65) clave -> . CCOMILLAS
    (66) clave -> . CSINCOMILLAS

    CCOMILLAS       shift and go to state 87
    CSINCOMILLAS    shift and go to state 88

    object_t                       shift and go to state 120
    pair_t                         shift and go to state 121
    clave                          shift and go to state 122

state 92

    (87) arg_list -> CSINCOMILLAS . PUNTOS tipo
    (88) arg_list -> CSINCOMILLAS . PUNTOS tipo COMA arg_list

    PUNTOS          shift and go to state 123


state 93

    (83) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT . PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (84) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT . PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    PUNTOS          shift and go to state 124


state 94

    (85) function -> FUNCTION CSINCOMILLAS LPARENT arg_list . RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (86) function -> FUNCTION CSINCOMILLAS LPARENT arg_list . RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    RPARENT         shift and go to state 125


state 95

    (80) condition -> IF LPARENT expr RPARENT . LBRACKET statement RBRACKET
    (81) condition -> IF LPARENT expr RPARENT . LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET

    LBRACKET        shift and go to state 126


state 96

    (82) loop -> WHILE LPARENT expr RPARENT . LBRACKET statement RBRACKET

    LBRACKET        shift and go to state 127


state 97

    (21) id -> var IGUAL expr COMA . id
    (18) id -> . var
    (19) id -> . var COMA id
    (20) id -> . var IGUAL expr
    (21) id -> . var IGUAL expr COMA id
    (22) var -> . CSINCOMILLAS
    (23) var -> . CSINCOMILLAS PUNTOS tipo

    CSINCOMILLAS    shift and go to state 15

    var                            shift and go to state 22
    id                             shift and go to state 128

state 98

    (46) aritmetica -> expr SUMA expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SUMA            reduce using rule 46 (aritmetica -> expr SUMA expr .)
    RESTA           reduce using rule 46 (aritmetica -> expr SUMA expr .)
    SEMICOLON       reduce using rule 46 (aritmetica -> expr SUMA expr .)
    RPARENT         reduce using rule 46 (aritmetica -> expr SUMA expr .)
    COMA            reduce using rule 46 (aritmetica -> expr SUMA expr .)
    RBRACKET        reduce using rule 46 (aritmetica -> expr SUMA expr .)
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77

  ! MUL             [ reduce using rule 46 (aritmetica -> expr SUMA expr .) ]
  ! DIV             [ reduce using rule 46 (aritmetica -> expr SUMA expr .) ]
  ! AND             [ reduce using rule 46 (aritmetica -> expr SUMA expr .) ]
  ! OR              [ reduce using rule 46 (aritmetica -> expr SUMA expr .) ]
  ! LE              [ reduce using rule 46 (aritmetica -> expr SUMA expr .) ]
  ! LT              [ reduce using rule 46 (aritmetica -> expr SUMA expr .) ]
  ! GE              [ reduce using rule 46 (aritmetica -> expr SUMA expr .) ]
  ! GT              [ reduce using rule 46 (aritmetica -> expr SUMA expr .) ]
  ! EQ              [ reduce using rule 46 (aritmetica -> expr SUMA expr .) ]
  ! SUMA            [ shift and go to state 67 ]
  ! RESTA           [ shift and go to state 68 ]


state 99

    (47) aritmetica -> expr RESTA expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SUMA            reduce using rule 47 (aritmetica -> expr RESTA expr .)
    RESTA           reduce using rule 47 (aritmetica -> expr RESTA expr .)
    SEMICOLON       reduce using rule 47 (aritmetica -> expr RESTA expr .)
    RPARENT         reduce using rule 47 (aritmetica -> expr RESTA expr .)
    COMA            reduce using rule 47 (aritmetica -> expr RESTA expr .)
    RBRACKET        reduce using rule 47 (aritmetica -> expr RESTA expr .)
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77

  ! MUL             [ reduce using rule 47 (aritmetica -> expr RESTA expr .) ]
  ! DIV             [ reduce using rule 47 (aritmetica -> expr RESTA expr .) ]
  ! AND             [ reduce using rule 47 (aritmetica -> expr RESTA expr .) ]
  ! OR              [ reduce using rule 47 (aritmetica -> expr RESTA expr .) ]
  ! LE              [ reduce using rule 47 (aritmetica -> expr RESTA expr .) ]
  ! LT              [ reduce using rule 47 (aritmetica -> expr RESTA expr .) ]
  ! GE              [ reduce using rule 47 (aritmetica -> expr RESTA expr .) ]
  ! GT              [ reduce using rule 47 (aritmetica -> expr RESTA expr .) ]
  ! EQ              [ reduce using rule 47 (aritmetica -> expr RESTA expr .) ]
  ! SUMA            [ shift and go to state 67 ]
  ! RESTA           [ shift and go to state 68 ]


state 100

    (48) aritmetica -> expr MUL expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SUMA            reduce using rule 48 (aritmetica -> expr MUL expr .)
    RESTA           reduce using rule 48 (aritmetica -> expr MUL expr .)
    MUL             reduce using rule 48 (aritmetica -> expr MUL expr .)
    DIV             reduce using rule 48 (aritmetica -> expr MUL expr .)
    SEMICOLON       reduce using rule 48 (aritmetica -> expr MUL expr .)
    RPARENT         reduce using rule 48 (aritmetica -> expr MUL expr .)
    COMA            reduce using rule 48 (aritmetica -> expr MUL expr .)
    RBRACKET        reduce using rule 48 (aritmetica -> expr MUL expr .)
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77

  ! AND             [ reduce using rule 48 (aritmetica -> expr MUL expr .) ]
  ! OR              [ reduce using rule 48 (aritmetica -> expr MUL expr .) ]
  ! LE              [ reduce using rule 48 (aritmetica -> expr MUL expr .) ]
  ! LT              [ reduce using rule 48 (aritmetica -> expr MUL expr .) ]
  ! GE              [ reduce using rule 48 (aritmetica -> expr MUL expr .) ]
  ! GT              [ reduce using rule 48 (aritmetica -> expr MUL expr .) ]
  ! EQ              [ reduce using rule 48 (aritmetica -> expr MUL expr .) ]
  ! SUMA            [ shift and go to state 67 ]
  ! RESTA           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]


state 101

    (49) aritmetica -> expr DIV expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SUMA            reduce using rule 49 (aritmetica -> expr DIV expr .)
    RESTA           reduce using rule 49 (aritmetica -> expr DIV expr .)
    MUL             reduce using rule 49 (aritmetica -> expr DIV expr .)
    DIV             reduce using rule 49 (aritmetica -> expr DIV expr .)
    SEMICOLON       reduce using rule 49 (aritmetica -> expr DIV expr .)
    RPARENT         reduce using rule 49 (aritmetica -> expr DIV expr .)
    COMA            reduce using rule 49 (aritmetica -> expr DIV expr .)
    RBRACKET        reduce using rule 49 (aritmetica -> expr DIV expr .)
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77

  ! AND             [ reduce using rule 49 (aritmetica -> expr DIV expr .) ]
  ! OR              [ reduce using rule 49 (aritmetica -> expr DIV expr .) ]
  ! LE              [ reduce using rule 49 (aritmetica -> expr DIV expr .) ]
  ! LT              [ reduce using rule 49 (aritmetica -> expr DIV expr .) ]
  ! GE              [ reduce using rule 49 (aritmetica -> expr DIV expr .) ]
  ! GT              [ reduce using rule 49 (aritmetica -> expr DIV expr .) ]
  ! EQ              [ reduce using rule 49 (aritmetica -> expr DIV expr .) ]
  ! SUMA            [ shift and go to state 67 ]
  ! RESTA           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]


state 102

    (50) binaria -> expr AND expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SUMA            reduce using rule 50 (binaria -> expr AND expr .)
    RESTA           reduce using rule 50 (binaria -> expr AND expr .)
    MUL             reduce using rule 50 (binaria -> expr AND expr .)
    DIV             reduce using rule 50 (binaria -> expr AND expr .)
    AND             reduce using rule 50 (binaria -> expr AND expr .)
    OR              reduce using rule 50 (binaria -> expr AND expr .)
    LE              reduce using rule 50 (binaria -> expr AND expr .)
    LT              reduce using rule 50 (binaria -> expr AND expr .)
    GE              reduce using rule 50 (binaria -> expr AND expr .)
    GT              reduce using rule 50 (binaria -> expr AND expr .)
    EQ              reduce using rule 50 (binaria -> expr AND expr .)
    SEMICOLON       reduce using rule 50 (binaria -> expr AND expr .)
    RPARENT         reduce using rule 50 (binaria -> expr AND expr .)
    COMA            reduce using rule 50 (binaria -> expr AND expr .)
    RBRACKET        reduce using rule 50 (binaria -> expr AND expr .)

  ! SUMA            [ shift and go to state 67 ]
  ! RESTA           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]
  ! OR              [ shift and go to state 72 ]
  ! LE              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GE              [ shift and go to state 75 ]
  ! GT              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 77 ]


state 103

    (51) binaria -> expr OR expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SUMA            reduce using rule 51 (binaria -> expr OR expr .)
    RESTA           reduce using rule 51 (binaria -> expr OR expr .)
    MUL             reduce using rule 51 (binaria -> expr OR expr .)
    DIV             reduce using rule 51 (binaria -> expr OR expr .)
    AND             reduce using rule 51 (binaria -> expr OR expr .)
    OR              reduce using rule 51 (binaria -> expr OR expr .)
    LE              reduce using rule 51 (binaria -> expr OR expr .)
    LT              reduce using rule 51 (binaria -> expr OR expr .)
    GE              reduce using rule 51 (binaria -> expr OR expr .)
    GT              reduce using rule 51 (binaria -> expr OR expr .)
    EQ              reduce using rule 51 (binaria -> expr OR expr .)
    SEMICOLON       reduce using rule 51 (binaria -> expr OR expr .)
    RPARENT         reduce using rule 51 (binaria -> expr OR expr .)
    COMA            reduce using rule 51 (binaria -> expr OR expr .)
    RBRACKET        reduce using rule 51 (binaria -> expr OR expr .)

  ! SUMA            [ shift and go to state 67 ]
  ! RESTA           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! AND             [ shift and go to state 71 ]
  ! OR              [ shift and go to state 72 ]
  ! LE              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GE              [ shift and go to state 75 ]
  ! GT              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 77 ]


state 104

    (53) comparation -> expr LE expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SUMA            reduce using rule 53 (comparation -> expr LE expr .)
    RESTA           reduce using rule 53 (comparation -> expr LE expr .)
    MUL             reduce using rule 53 (comparation -> expr LE expr .)
    DIV             reduce using rule 53 (comparation -> expr LE expr .)
    LE              reduce using rule 53 (comparation -> expr LE expr .)
    LT              reduce using rule 53 (comparation -> expr LE expr .)
    GE              reduce using rule 53 (comparation -> expr LE expr .)
    GT              reduce using rule 53 (comparation -> expr LE expr .)
    EQ              reduce using rule 53 (comparation -> expr LE expr .)
    SEMICOLON       reduce using rule 53 (comparation -> expr LE expr .)
    RPARENT         reduce using rule 53 (comparation -> expr LE expr .)
    COMA            reduce using rule 53 (comparation -> expr LE expr .)
    RBRACKET        reduce using rule 53 (comparation -> expr LE expr .)
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! AND             [ reduce using rule 53 (comparation -> expr LE expr .) ]
  ! OR              [ reduce using rule 53 (comparation -> expr LE expr .) ]
  ! SUMA            [ shift and go to state 67 ]
  ! RESTA           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! LE              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GE              [ shift and go to state 75 ]
  ! GT              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 77 ]


state 105

    (54) comparation -> expr LT expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SUMA            reduce using rule 54 (comparation -> expr LT expr .)
    RESTA           reduce using rule 54 (comparation -> expr LT expr .)
    MUL             reduce using rule 54 (comparation -> expr LT expr .)
    DIV             reduce using rule 54 (comparation -> expr LT expr .)
    LE              reduce using rule 54 (comparation -> expr LT expr .)
    LT              reduce using rule 54 (comparation -> expr LT expr .)
    GE              reduce using rule 54 (comparation -> expr LT expr .)
    GT              reduce using rule 54 (comparation -> expr LT expr .)
    EQ              reduce using rule 54 (comparation -> expr LT expr .)
    SEMICOLON       reduce using rule 54 (comparation -> expr LT expr .)
    RPARENT         reduce using rule 54 (comparation -> expr LT expr .)
    COMA            reduce using rule 54 (comparation -> expr LT expr .)
    RBRACKET        reduce using rule 54 (comparation -> expr LT expr .)
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! AND             [ reduce using rule 54 (comparation -> expr LT expr .) ]
  ! OR              [ reduce using rule 54 (comparation -> expr LT expr .) ]
  ! SUMA            [ shift and go to state 67 ]
  ! RESTA           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! LE              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GE              [ shift and go to state 75 ]
  ! GT              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 77 ]


state 106

    (55) comparation -> expr GE expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SUMA            reduce using rule 55 (comparation -> expr GE expr .)
    RESTA           reduce using rule 55 (comparation -> expr GE expr .)
    MUL             reduce using rule 55 (comparation -> expr GE expr .)
    DIV             reduce using rule 55 (comparation -> expr GE expr .)
    LE              reduce using rule 55 (comparation -> expr GE expr .)
    LT              reduce using rule 55 (comparation -> expr GE expr .)
    GE              reduce using rule 55 (comparation -> expr GE expr .)
    GT              reduce using rule 55 (comparation -> expr GE expr .)
    EQ              reduce using rule 55 (comparation -> expr GE expr .)
    SEMICOLON       reduce using rule 55 (comparation -> expr GE expr .)
    RPARENT         reduce using rule 55 (comparation -> expr GE expr .)
    COMA            reduce using rule 55 (comparation -> expr GE expr .)
    RBRACKET        reduce using rule 55 (comparation -> expr GE expr .)
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! AND             [ reduce using rule 55 (comparation -> expr GE expr .) ]
  ! OR              [ reduce using rule 55 (comparation -> expr GE expr .) ]
  ! SUMA            [ shift and go to state 67 ]
  ! RESTA           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! LE              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GE              [ shift and go to state 75 ]
  ! GT              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 77 ]


state 107

    (56) comparation -> expr GT expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SUMA            reduce using rule 56 (comparation -> expr GT expr .)
    RESTA           reduce using rule 56 (comparation -> expr GT expr .)
    MUL             reduce using rule 56 (comparation -> expr GT expr .)
    DIV             reduce using rule 56 (comparation -> expr GT expr .)
    LE              reduce using rule 56 (comparation -> expr GT expr .)
    LT              reduce using rule 56 (comparation -> expr GT expr .)
    GE              reduce using rule 56 (comparation -> expr GT expr .)
    GT              reduce using rule 56 (comparation -> expr GT expr .)
    EQ              reduce using rule 56 (comparation -> expr GT expr .)
    SEMICOLON       reduce using rule 56 (comparation -> expr GT expr .)
    RPARENT         reduce using rule 56 (comparation -> expr GT expr .)
    COMA            reduce using rule 56 (comparation -> expr GT expr .)
    RBRACKET        reduce using rule 56 (comparation -> expr GT expr .)
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! AND             [ reduce using rule 56 (comparation -> expr GT expr .) ]
  ! OR              [ reduce using rule 56 (comparation -> expr GT expr .) ]
  ! SUMA            [ shift and go to state 67 ]
  ! RESTA           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! LE              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GE              [ shift and go to state 75 ]
  ! GT              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 77 ]


state 108

    (57) comparation -> expr EQ expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SUMA            reduce using rule 57 (comparation -> expr EQ expr .)
    RESTA           reduce using rule 57 (comparation -> expr EQ expr .)
    MUL             reduce using rule 57 (comparation -> expr EQ expr .)
    DIV             reduce using rule 57 (comparation -> expr EQ expr .)
    LE              reduce using rule 57 (comparation -> expr EQ expr .)
    LT              reduce using rule 57 (comparation -> expr EQ expr .)
    GE              reduce using rule 57 (comparation -> expr EQ expr .)
    GT              reduce using rule 57 (comparation -> expr EQ expr .)
    EQ              reduce using rule 57 (comparation -> expr EQ expr .)
    SEMICOLON       reduce using rule 57 (comparation -> expr EQ expr .)
    RPARENT         reduce using rule 57 (comparation -> expr EQ expr .)
    COMA            reduce using rule 57 (comparation -> expr EQ expr .)
    RBRACKET        reduce using rule 57 (comparation -> expr EQ expr .)
    AND             shift and go to state 71
    OR              shift and go to state 72

  ! AND             [ reduce using rule 57 (comparation -> expr EQ expr .) ]
  ! OR              [ reduce using rule 57 (comparation -> expr EQ expr .) ]
  ! SUMA            [ shift and go to state 67 ]
  ! RESTA           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]
  ! LE              [ shift and go to state 73 ]
  ! LT              [ shift and go to state 74 ]
  ! GE              [ shift and go to state 75 ]
  ! GT              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 77 ]


state 109

    (72) punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .
    (72) punto -> CSINCOMILLAS . PUNTO CSINCOMILLAS
    (73) punto -> CSINCOMILLAS . PUNTO punto
    (74) punto -> CSINCOMILLAS . PUNTO corchete
    (75) corchete -> CSINCOMILLAS . LCORCHETE CCOMILLAS RCORCHETE recur_corchete

    SUMA            reduce using rule 72 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    RESTA           reduce using rule 72 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    MUL             reduce using rule 72 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    DIV             reduce using rule 72 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    AND             reduce using rule 72 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    OR              reduce using rule 72 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    LE              reduce using rule 72 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    LT              reduce using rule 72 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    GE              reduce using rule 72 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    GT              reduce using rule 72 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    EQ              reduce using rule 72 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    SEMICOLON       reduce using rule 72 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    RPARENT         reduce using rule 72 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    COMA            reduce using rule 72 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    RBRACKET        reduce using rule 72 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    PUNTO           shift and go to state 78
    LCORCHETE       shift and go to state 79


state 110

    (73) punto -> CSINCOMILLAS PUNTO punto .

    SUMA            reduce using rule 73 (punto -> CSINCOMILLAS PUNTO punto .)
    RESTA           reduce using rule 73 (punto -> CSINCOMILLAS PUNTO punto .)
    MUL             reduce using rule 73 (punto -> CSINCOMILLAS PUNTO punto .)
    DIV             reduce using rule 73 (punto -> CSINCOMILLAS PUNTO punto .)
    AND             reduce using rule 73 (punto -> CSINCOMILLAS PUNTO punto .)
    OR              reduce using rule 73 (punto -> CSINCOMILLAS PUNTO punto .)
    LE              reduce using rule 73 (punto -> CSINCOMILLAS PUNTO punto .)
    LT              reduce using rule 73 (punto -> CSINCOMILLAS PUNTO punto .)
    GE              reduce using rule 73 (punto -> CSINCOMILLAS PUNTO punto .)
    GT              reduce using rule 73 (punto -> CSINCOMILLAS PUNTO punto .)
    EQ              reduce using rule 73 (punto -> CSINCOMILLAS PUNTO punto .)
    SEMICOLON       reduce using rule 73 (punto -> CSINCOMILLAS PUNTO punto .)
    RPARENT         reduce using rule 73 (punto -> CSINCOMILLAS PUNTO punto .)
    COMA            reduce using rule 73 (punto -> CSINCOMILLAS PUNTO punto .)
    RBRACKET        reduce using rule 73 (punto -> CSINCOMILLAS PUNTO punto .)


state 111

    (74) punto -> CSINCOMILLAS PUNTO corchete .

    SUMA            reduce using rule 74 (punto -> CSINCOMILLAS PUNTO corchete .)
    RESTA           reduce using rule 74 (punto -> CSINCOMILLAS PUNTO corchete .)
    MUL             reduce using rule 74 (punto -> CSINCOMILLAS PUNTO corchete .)
    DIV             reduce using rule 74 (punto -> CSINCOMILLAS PUNTO corchete .)
    AND             reduce using rule 74 (punto -> CSINCOMILLAS PUNTO corchete .)
    OR              reduce using rule 74 (punto -> CSINCOMILLAS PUNTO corchete .)
    LE              reduce using rule 74 (punto -> CSINCOMILLAS PUNTO corchete .)
    LT              reduce using rule 74 (punto -> CSINCOMILLAS PUNTO corchete .)
    GE              reduce using rule 74 (punto -> CSINCOMILLAS PUNTO corchete .)
    GT              reduce using rule 74 (punto -> CSINCOMILLAS PUNTO corchete .)
    EQ              reduce using rule 74 (punto -> CSINCOMILLAS PUNTO corchete .)
    SEMICOLON       reduce using rule 74 (punto -> CSINCOMILLAS PUNTO corchete .)
    RPARENT         reduce using rule 74 (punto -> CSINCOMILLAS PUNTO corchete .)
    COMA            reduce using rule 74 (punto -> CSINCOMILLAS PUNTO corchete .)
    RBRACKET        reduce using rule 74 (punto -> CSINCOMILLAS PUNTO corchete .)


state 112

    (75) corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS . RCORCHETE recur_corchete

    RCORCHETE       shift and go to state 129


state 113

    (89) functioncall -> CSINCOMILLAS LPARENT RPARENT .

    SUMA            reduce using rule 89 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    RESTA           reduce using rule 89 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    MUL             reduce using rule 89 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    DIV             reduce using rule 89 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    AND             reduce using rule 89 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    OR              reduce using rule 89 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    LE              reduce using rule 89 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    LT              reduce using rule 89 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    GE              reduce using rule 89 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    GT              reduce using rule 89 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    EQ              reduce using rule 89 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    SEMICOLON       reduce using rule 89 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    RPARENT         reduce using rule 89 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    COMA            reduce using rule 89 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    RBRACKET        reduce using rule 89 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)


state 114

    (90) functioncall -> CSINCOMILLAS LPARENT argumentos . RPARENT

    RPARENT         shift and go to state 130


state 115

    (91) argumentos -> expr .
    (92) argumentos -> expr . COMA argumentos
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    RPARENT         reduce using rule 91 (argumentos -> expr .)
    COMA            shift and go to state 131
    SUMA            shift and go to state 67
    RESTA           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77


state 116

    (39) expr -> LPARENT expr RPARENT .

    SUMA            reduce using rule 39 (expr -> LPARENT expr RPARENT .)
    RESTA           reduce using rule 39 (expr -> LPARENT expr RPARENT .)
    MUL             reduce using rule 39 (expr -> LPARENT expr RPARENT .)
    DIV             reduce using rule 39 (expr -> LPARENT expr RPARENT .)
    AND             reduce using rule 39 (expr -> LPARENT expr RPARENT .)
    OR              reduce using rule 39 (expr -> LPARENT expr RPARENT .)
    LE              reduce using rule 39 (expr -> LPARENT expr RPARENT .)
    LT              reduce using rule 39 (expr -> LPARENT expr RPARENT .)
    GE              reduce using rule 39 (expr -> LPARENT expr RPARENT .)
    GT              reduce using rule 39 (expr -> LPARENT expr RPARENT .)
    EQ              reduce using rule 39 (expr -> LPARENT expr RPARENT .)
    SEMICOLON       reduce using rule 39 (expr -> LPARENT expr RPARENT .)
    RPARENT         reduce using rule 39 (expr -> LPARENT expr RPARENT .)
    COMA            reduce using rule 39 (expr -> LPARENT expr RPARENT .)
    RBRACKET        reduce using rule 39 (expr -> LPARENT expr RPARENT .)


state 117

    (67) ajson -> LBRACKET object RBRACKET .

    SUMA            reduce using rule 67 (ajson -> LBRACKET object RBRACKET .)
    RESTA           reduce using rule 67 (ajson -> LBRACKET object RBRACKET .)
    MUL             reduce using rule 67 (ajson -> LBRACKET object RBRACKET .)
    DIV             reduce using rule 67 (ajson -> LBRACKET object RBRACKET .)
    AND             reduce using rule 67 (ajson -> LBRACKET object RBRACKET .)
    OR              reduce using rule 67 (ajson -> LBRACKET object RBRACKET .)
    LE              reduce using rule 67 (ajson -> LBRACKET object RBRACKET .)
    LT              reduce using rule 67 (ajson -> LBRACKET object RBRACKET .)
    GE              reduce using rule 67 (ajson -> LBRACKET object RBRACKET .)
    GT              reduce using rule 67 (ajson -> LBRACKET object RBRACKET .)
    EQ              reduce using rule 67 (ajson -> LBRACKET object RBRACKET .)
    SEMICOLON       reduce using rule 67 (ajson -> LBRACKET object RBRACKET .)
    RPARENT         reduce using rule 67 (ajson -> LBRACKET object RBRACKET .)
    COMA            reduce using rule 67 (ajson -> LBRACKET object RBRACKET .)
    RBRACKET        reduce using rule 67 (ajson -> LBRACKET object RBRACKET .)


state 118

    (68) object -> pair COMA . object
    (69) object -> pair COMA .
    (68) object -> . pair COMA object
    (69) object -> . pair COMA
    (70) object -> . pair
    (71) pair -> . clave PUNTOS expr
    (65) clave -> . CCOMILLAS
    (66) clave -> . CSINCOMILLAS

    RBRACKET        reduce using rule 69 (object -> pair COMA .)
    CCOMILLAS       shift and go to state 87
    CSINCOMILLAS    shift and go to state 88

    pair                           shift and go to state 85
    object                         shift and go to state 132
    clave                          shift and go to state 86

state 119

    (71) pair -> clave PUNTOS . expr
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 133
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 120

    (59) ajson_t -> LBRACKET object_t . RBRACKET

    RBRACKET        shift and go to state 134


state 121

    (60) object_t -> pair_t . COMA object_t
    (61) object_t -> pair_t . COMA
    (62) object_t -> pair_t .

    COMA            shift and go to state 135
    RBRACKET        reduce using rule 62 (object_t -> pair_t .)


state 122

    (63) pair_t -> clave . PUNTOS tipo
    (64) pair_t -> clave . PUNTOS ajson_t

    PUNTOS          shift and go to state 136


state 123

    (87) arg_list -> CSINCOMILLAS PUNTOS . tipo
    (88) arg_list -> CSINCOMILLAS PUNTOS . tipo COMA arg_list
    (24) tipo -> . INT
    (25) tipo -> . FLOAT
    (26) tipo -> . CHARACTER
    (27) tipo -> . BOOLEAN
    (28) tipo -> . CSINCOMILLAS

    INT             shift and go to state 58
    FLOAT           shift and go to state 59
    CHARACTER       shift and go to state 60
    BOOLEAN         shift and go to state 61
    CSINCOMILLAS    shift and go to state 56

    tipo                           shift and go to state 137

state 124

    (83) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS . tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (84) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS . tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (24) tipo -> . INT
    (25) tipo -> . FLOAT
    (26) tipo -> . CHARACTER
    (27) tipo -> . BOOLEAN
    (28) tipo -> . CSINCOMILLAS

    INT             shift and go to state 58
    FLOAT           shift and go to state 59
    CHARACTER       shift and go to state 60
    BOOLEAN         shift and go to state 61
    CSINCOMILLAS    shift and go to state 56

    tipo                           shift and go to state 138

state 125

    (85) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT . PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (86) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT . PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    PUNTOS          shift and go to state 139


state 126

    (80) condition -> IF LPARENT expr RPARENT LBRACKET . statement RBRACKET
    (81) condition -> IF LPARENT expr RPARENT LBRACKET . statement RBRACKET ELSE LBRACKET statement RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (17) declaration -> . LET id
    (29) assignment -> . var IGUAL expr
    (58) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (83) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (84) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (86) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (80) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (81) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (82) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (22) var -> . CSINCOMILLAS
    (23) var -> . CSINCOMILLAS PUNTOS tipo

    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    statement                      shift and go to state 140
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 127

    (82) loop -> WHILE LPARENT expr RPARENT LBRACKET . statement RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (17) declaration -> . LET id
    (29) assignment -> . var IGUAL expr
    (58) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (83) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (84) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (86) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (80) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (81) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (82) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (22) var -> . CSINCOMILLAS
    (23) var -> . CSINCOMILLAS PUNTOS tipo

    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    statement                      shift and go to state 141
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 128

    (21) id -> var IGUAL expr COMA id .

    SEMICOLON       reduce using rule 21 (id -> var IGUAL expr COMA id .)


state 129

    (75) corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE . recur_corchete
    (76) recur_corchete -> . LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (77) recur_corchete -> . empty
    (78) recur_corchete -> . PUNTO CSINCOMILLAS
    (79) recur_corchete -> . PUNTO punto
    (93) empty -> .

    LCORCHETE       shift and go to state 142
    PUNTO           shift and go to state 145
    SUMA            reduce using rule 93 (empty -> .)
    RESTA           reduce using rule 93 (empty -> .)
    MUL             reduce using rule 93 (empty -> .)
    DIV             reduce using rule 93 (empty -> .)
    AND             reduce using rule 93 (empty -> .)
    OR              reduce using rule 93 (empty -> .)
    LE              reduce using rule 93 (empty -> .)
    LT              reduce using rule 93 (empty -> .)
    GE              reduce using rule 93 (empty -> .)
    GT              reduce using rule 93 (empty -> .)
    EQ              reduce using rule 93 (empty -> .)
    SEMICOLON       reduce using rule 93 (empty -> .)
    RPARENT         reduce using rule 93 (empty -> .)
    COMA            reduce using rule 93 (empty -> .)
    RBRACKET        reduce using rule 93 (empty -> .)

    recur_corchete                 shift and go to state 143
    empty                          shift and go to state 144

state 130

    (90) functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .

    SUMA            reduce using rule 90 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    RESTA           reduce using rule 90 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    MUL             reduce using rule 90 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    DIV             reduce using rule 90 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    AND             reduce using rule 90 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    OR              reduce using rule 90 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    LE              reduce using rule 90 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    LT              reduce using rule 90 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    GE              reduce using rule 90 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    GT              reduce using rule 90 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    EQ              reduce using rule 90 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    SEMICOLON       reduce using rule 90 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    RPARENT         reduce using rule 90 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    COMA            reduce using rule 90 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    RBRACKET        reduce using rule 90 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)


state 131

    (92) argumentos -> expr COMA . argumentos
    (91) argumentos -> . expr
    (92) argumentos -> . expr COMA argumentos
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 115
    argumentos                     shift and go to state 146
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 132

    (68) object -> pair COMA object .

    RBRACKET        reduce using rule 68 (object -> pair COMA object .)


state 133

    (71) pair -> clave PUNTOS expr .
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    COMA            reduce using rule 71 (pair -> clave PUNTOS expr .)
    RBRACKET        reduce using rule 71 (pair -> clave PUNTOS expr .)
    SUMA            shift and go to state 67
    RESTA           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77


state 134

    (59) ajson_t -> LBRACKET object_t RBRACKET .

    SEMICOLON       reduce using rule 59 (ajson_t -> LBRACKET object_t RBRACKET .)
    COMA            reduce using rule 59 (ajson_t -> LBRACKET object_t RBRACKET .)
    RBRACKET        reduce using rule 59 (ajson_t -> LBRACKET object_t RBRACKET .)


state 135

    (60) object_t -> pair_t COMA . object_t
    (61) object_t -> pair_t COMA .
    (60) object_t -> . pair_t COMA object_t
    (61) object_t -> . pair_t COMA
    (62) object_t -> . pair_t
    (63) pair_t -> . clave PUNTOS tipo
    (64) pair_t -> . clave PUNTOS ajson_t
    (65) clave -> . CCOMILLAS
    (66) clave -> . CSINCOMILLAS

    RBRACKET        reduce using rule 61 (object_t -> pair_t COMA .)
    CCOMILLAS       shift and go to state 87
    CSINCOMILLAS    shift and go to state 88

    pair_t                         shift and go to state 121
    object_t                       shift and go to state 147
    clave                          shift and go to state 122

state 136

    (63) pair_t -> clave PUNTOS . tipo
    (64) pair_t -> clave PUNTOS . ajson_t
    (24) tipo -> . INT
    (25) tipo -> . FLOAT
    (26) tipo -> . CHARACTER
    (27) tipo -> . BOOLEAN
    (28) tipo -> . CSINCOMILLAS
    (59) ajson_t -> . LBRACKET object_t RBRACKET

    INT             shift and go to state 58
    FLOAT           shift and go to state 59
    CHARACTER       shift and go to state 60
    BOOLEAN         shift and go to state 61
    CSINCOMILLAS    shift and go to state 56
    LBRACKET        shift and go to state 91

    tipo                           shift and go to state 148
    ajson_t                        shift and go to state 149

state 137

    (87) arg_list -> CSINCOMILLAS PUNTOS tipo .
    (88) arg_list -> CSINCOMILLAS PUNTOS tipo . COMA arg_list

    RPARENT         reduce using rule 87 (arg_list -> CSINCOMILLAS PUNTOS tipo .)
    COMA            shift and go to state 150


state 138

    (83) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo . LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (84) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo . LBRACKET RETURN expr SEMICOLON RBRACKET

    LBRACKET        shift and go to state 151


state 139

    (85) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS . tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (86) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS . tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (24) tipo -> . INT
    (25) tipo -> . FLOAT
    (26) tipo -> . CHARACTER
    (27) tipo -> . BOOLEAN
    (28) tipo -> . CSINCOMILLAS

    INT             shift and go to state 58
    FLOAT           shift and go to state 59
    CHARACTER       shift and go to state 60
    BOOLEAN         shift and go to state 61
    CSINCOMILLAS    shift and go to state 56

    tipo                           shift and go to state 152

state 140

    (80) condition -> IF LPARENT expr RPARENT LBRACKET statement . RBRACKET
    (81) condition -> IF LPARENT expr RPARENT LBRACKET statement . RBRACKET ELSE LBRACKET statement RBRACKET

    RBRACKET        shift and go to state 153


state 141

    (82) loop -> WHILE LPARENT expr RPARENT LBRACKET statement . RBRACKET

    RBRACKET        shift and go to state 154


state 142

    (76) recur_corchete -> LCORCHETE . CCOMILLAS RCORCHETE recur_corchete

    CCOMILLAS       shift and go to state 155


state 143

    (75) corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .

    SUMA            reduce using rule 75 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RESTA           reduce using rule 75 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    MUL             reduce using rule 75 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    DIV             reduce using rule 75 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    AND             reduce using rule 75 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    OR              reduce using rule 75 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LE              reduce using rule 75 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LT              reduce using rule 75 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GE              reduce using rule 75 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GT              reduce using rule 75 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    EQ              reduce using rule 75 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    SEMICOLON       reduce using rule 75 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RPARENT         reduce using rule 75 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    COMA            reduce using rule 75 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RBRACKET        reduce using rule 75 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)


state 144

    (77) recur_corchete -> empty .

    SUMA            reduce using rule 77 (recur_corchete -> empty .)
    RESTA           reduce using rule 77 (recur_corchete -> empty .)
    MUL             reduce using rule 77 (recur_corchete -> empty .)
    DIV             reduce using rule 77 (recur_corchete -> empty .)
    AND             reduce using rule 77 (recur_corchete -> empty .)
    OR              reduce using rule 77 (recur_corchete -> empty .)
    LE              reduce using rule 77 (recur_corchete -> empty .)
    LT              reduce using rule 77 (recur_corchete -> empty .)
    GE              reduce using rule 77 (recur_corchete -> empty .)
    GT              reduce using rule 77 (recur_corchete -> empty .)
    EQ              reduce using rule 77 (recur_corchete -> empty .)
    SEMICOLON       reduce using rule 77 (recur_corchete -> empty .)
    RPARENT         reduce using rule 77 (recur_corchete -> empty .)
    COMA            reduce using rule 77 (recur_corchete -> empty .)
    RBRACKET        reduce using rule 77 (recur_corchete -> empty .)


state 145

    (78) recur_corchete -> PUNTO . CSINCOMILLAS
    (79) recur_corchete -> PUNTO . punto
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete

    CSINCOMILLAS    shift and go to state 156

    punto                          shift and go to state 157

state 146

    (92) argumentos -> expr COMA argumentos .

    RPARENT         reduce using rule 92 (argumentos -> expr COMA argumentos .)


state 147

    (60) object_t -> pair_t COMA object_t .

    RBRACKET        reduce using rule 60 (object_t -> pair_t COMA object_t .)


state 148

    (63) pair_t -> clave PUNTOS tipo .

    COMA            reduce using rule 63 (pair_t -> clave PUNTOS tipo .)
    RBRACKET        reduce using rule 63 (pair_t -> clave PUNTOS tipo .)


state 149

    (64) pair_t -> clave PUNTOS ajson_t .

    COMA            reduce using rule 64 (pair_t -> clave PUNTOS ajson_t .)
    RBRACKET        reduce using rule 64 (pair_t -> clave PUNTOS ajson_t .)


state 150

    (88) arg_list -> CSINCOMILLAS PUNTOS tipo COMA . arg_list
    (87) arg_list -> . CSINCOMILLAS PUNTOS tipo
    (88) arg_list -> . CSINCOMILLAS PUNTOS tipo COMA arg_list

    CSINCOMILLAS    shift and go to state 92

    arg_list                       shift and go to state 158

state 151

    (83) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET . statement RETURN expr SEMICOLON RBRACKET
    (84) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET . RETURN expr SEMICOLON RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (17) declaration -> . LET id
    (29) assignment -> . var IGUAL expr
    (58) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (83) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (84) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (86) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (80) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (81) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (82) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (22) var -> . CSINCOMILLAS
    (23) var -> . CSINCOMILLAS PUNTOS tipo

    RETURN          shift and go to state 160
    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    statement                      shift and go to state 159
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 152

    (85) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo . LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (86) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo . LBRACKET RETURN expr SEMICOLON RBRACKET

    LBRACKET        shift and go to state 161


state 153

    (80) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .
    (81) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET . ELSE LBRACKET statement RBRACKET

    LET             reduce using rule 80 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    TYPE            reduce using rule 80 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    FUNCTION        reduce using rule 80 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    IF              reduce using rule 80 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    WHILE           reduce using rule 80 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    CSINCOMILLAS    reduce using rule 80 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    $end            reduce using rule 80 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RBRACKET        reduce using rule 80 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RETURN          reduce using rule 80 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    ELSE            shift and go to state 162


state 154

    (82) loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .

    LET             reduce using rule 82 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    TYPE            reduce using rule 82 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    FUNCTION        reduce using rule 82 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    IF              reduce using rule 82 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    WHILE           reduce using rule 82 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    CSINCOMILLAS    reduce using rule 82 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    $end            reduce using rule 82 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RBRACKET        reduce using rule 82 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RETURN          reduce using rule 82 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)


state 155

    (76) recur_corchete -> LCORCHETE CCOMILLAS . RCORCHETE recur_corchete

    RCORCHETE       shift and go to state 163


state 156

    (78) recur_corchete -> PUNTO CSINCOMILLAS .
    (72) punto -> CSINCOMILLAS . PUNTO CSINCOMILLAS
    (73) punto -> CSINCOMILLAS . PUNTO punto
    (74) punto -> CSINCOMILLAS . PUNTO corchete

    SUMA            reduce using rule 78 (recur_corchete -> PUNTO CSINCOMILLAS .)
    RESTA           reduce using rule 78 (recur_corchete -> PUNTO CSINCOMILLAS .)
    MUL             reduce using rule 78 (recur_corchete -> PUNTO CSINCOMILLAS .)
    DIV             reduce using rule 78 (recur_corchete -> PUNTO CSINCOMILLAS .)
    AND             reduce using rule 78 (recur_corchete -> PUNTO CSINCOMILLAS .)
    OR              reduce using rule 78 (recur_corchete -> PUNTO CSINCOMILLAS .)
    LE              reduce using rule 78 (recur_corchete -> PUNTO CSINCOMILLAS .)
    LT              reduce using rule 78 (recur_corchete -> PUNTO CSINCOMILLAS .)
    GE              reduce using rule 78 (recur_corchete -> PUNTO CSINCOMILLAS .)
    GT              reduce using rule 78 (recur_corchete -> PUNTO CSINCOMILLAS .)
    EQ              reduce using rule 78 (recur_corchete -> PUNTO CSINCOMILLAS .)
    SEMICOLON       reduce using rule 78 (recur_corchete -> PUNTO CSINCOMILLAS .)
    RPARENT         reduce using rule 78 (recur_corchete -> PUNTO CSINCOMILLAS .)
    COMA            reduce using rule 78 (recur_corchete -> PUNTO CSINCOMILLAS .)
    RBRACKET        reduce using rule 78 (recur_corchete -> PUNTO CSINCOMILLAS .)
    PUNTO           shift and go to state 78


state 157

    (79) recur_corchete -> PUNTO punto .

    SUMA            reduce using rule 79 (recur_corchete -> PUNTO punto .)
    RESTA           reduce using rule 79 (recur_corchete -> PUNTO punto .)
    MUL             reduce using rule 79 (recur_corchete -> PUNTO punto .)
    DIV             reduce using rule 79 (recur_corchete -> PUNTO punto .)
    AND             reduce using rule 79 (recur_corchete -> PUNTO punto .)
    OR              reduce using rule 79 (recur_corchete -> PUNTO punto .)
    LE              reduce using rule 79 (recur_corchete -> PUNTO punto .)
    LT              reduce using rule 79 (recur_corchete -> PUNTO punto .)
    GE              reduce using rule 79 (recur_corchete -> PUNTO punto .)
    GT              reduce using rule 79 (recur_corchete -> PUNTO punto .)
    EQ              reduce using rule 79 (recur_corchete -> PUNTO punto .)
    SEMICOLON       reduce using rule 79 (recur_corchete -> PUNTO punto .)
    RPARENT         reduce using rule 79 (recur_corchete -> PUNTO punto .)
    COMA            reduce using rule 79 (recur_corchete -> PUNTO punto .)
    RBRACKET        reduce using rule 79 (recur_corchete -> PUNTO punto .)


state 158

    (88) arg_list -> CSINCOMILLAS PUNTOS tipo COMA arg_list .

    RPARENT         reduce using rule 88 (arg_list -> CSINCOMILLAS PUNTOS tipo COMA arg_list .)


state 159

    (83) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement . RETURN expr SEMICOLON RBRACKET

    RETURN          shift and go to state 164


state 160

    (84) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN . expr SEMICOLON RBRACKET
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 165
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 161

    (85) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET . statement RETURN expr SEMICOLON RBRACKET
    (86) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET . RETURN expr SEMICOLON RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (17) declaration -> . LET id
    (29) assignment -> . var IGUAL expr
    (58) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (83) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (84) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (86) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (80) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (81) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (82) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (22) var -> . CSINCOMILLAS
    (23) var -> . CSINCOMILLAS PUNTOS tipo

    RETURN          shift and go to state 167
    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    statement                      shift and go to state 166
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 162

    (81) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE . LBRACKET statement RBRACKET

    LBRACKET        shift and go to state 168


state 163

    (76) recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE . recur_corchete
    (76) recur_corchete -> . LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (77) recur_corchete -> . empty
    (78) recur_corchete -> . PUNTO CSINCOMILLAS
    (79) recur_corchete -> . PUNTO punto
    (93) empty -> .

    LCORCHETE       shift and go to state 142
    PUNTO           shift and go to state 145
    SUMA            reduce using rule 93 (empty -> .)
    RESTA           reduce using rule 93 (empty -> .)
    MUL             reduce using rule 93 (empty -> .)
    DIV             reduce using rule 93 (empty -> .)
    AND             reduce using rule 93 (empty -> .)
    OR              reduce using rule 93 (empty -> .)
    LE              reduce using rule 93 (empty -> .)
    LT              reduce using rule 93 (empty -> .)
    GE              reduce using rule 93 (empty -> .)
    GT              reduce using rule 93 (empty -> .)
    EQ              reduce using rule 93 (empty -> .)
    SEMICOLON       reduce using rule 93 (empty -> .)
    RPARENT         reduce using rule 93 (empty -> .)
    COMA            reduce using rule 93 (empty -> .)
    RBRACKET        reduce using rule 93 (empty -> .)

    recur_corchete                 shift and go to state 169
    empty                          shift and go to state 144

state 164

    (83) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN . expr SEMICOLON RBRACKET
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 170
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 165

    (84) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr . SEMICOLON RBRACKET
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 171
    SUMA            shift and go to state 67
    RESTA           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77


state 166

    (85) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement . RETURN expr SEMICOLON RBRACKET

    RETURN          shift and go to state 172


state 167

    (86) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN . expr SEMICOLON RBRACKET
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 173
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 168

    (81) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET . statement RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (17) declaration -> . LET id
    (29) assignment -> . var IGUAL expr
    (58) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (83) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (84) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (86) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (80) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (81) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (82) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (22) var -> . CSINCOMILLAS
    (23) var -> . CSINCOMILLAS PUNTOS tipo

    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    statement                      shift and go to state 174
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 169

    (76) recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .

    SUMA            reduce using rule 76 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RESTA           reduce using rule 76 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    MUL             reduce using rule 76 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    DIV             reduce using rule 76 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    AND             reduce using rule 76 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    OR              reduce using rule 76 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LE              reduce using rule 76 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LT              reduce using rule 76 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GE              reduce using rule 76 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GT              reduce using rule 76 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    EQ              reduce using rule 76 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    SEMICOLON       reduce using rule 76 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RPARENT         reduce using rule 76 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    COMA            reduce using rule 76 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RBRACKET        reduce using rule 76 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)


state 170

    (83) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr . SEMICOLON RBRACKET
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 175
    SUMA            shift and go to state 67
    RESTA           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77


state 171

    (84) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 176


state 172

    (85) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN . expr SEMICOLON RBRACKET
    (30) expr -> . operacion
    (31) expr -> . num
    (32) expr -> . bool
    (33) expr -> . NULL
    (34) expr -> . CSINCOMILLAS
    (35) expr -> . RESTA expr
    (36) expr -> . SUMA expr
    (37) expr -> . CARACTER
    (38) expr -> . ajson
    (39) expr -> . LPARENT expr RPARENT
    (40) expr -> . punto
    (41) expr -> . corchete
    (42) expr -> . functioncall
    (43) operacion -> . aritmetica
    (44) operacion -> . binaria
    (45) operacion -> . comparation
    (13) num -> . ENTERO
    (14) num -> . DECIMAL
    (15) bool -> . TR
    (16) bool -> . FL
    (67) ajson -> . LBRACKET object RBRACKET
    (72) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (73) punto -> . CSINCOMILLAS PUNTO punto
    (74) punto -> . CSINCOMILLAS PUNTO corchete
    (75) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (89) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (90) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (46) aritmetica -> . expr SUMA expr
    (47) aritmetica -> . expr RESTA expr
    (48) aritmetica -> . expr MUL expr
    (49) aritmetica -> . expr DIV expr
    (50) binaria -> . expr AND expr
    (51) binaria -> . expr OR expr
    (52) binaria -> . NOT expr
    (53) comparation -> . expr LE expr
    (54) comparation -> . expr LT expr
    (55) comparation -> . expr GE expr
    (56) comparation -> . expr GT expr
    (57) comparation -> . expr EQ expr

    NULL            shift and go to state 36
    CSINCOMILLAS    shift and go to state 37
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    CARACTER        shift and go to state 40
    LPARENT         shift and go to state 42
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    TR              shift and go to state 51
    FL              shift and go to state 52
    LBRACKET        shift and go to state 53
    NOT             shift and go to state 54

    expr                           shift and go to state 177
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    ajson                          shift and go to state 41
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48

state 173

    (86) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr . SEMICOLON RBRACKET
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 178
    SUMA            shift and go to state 67
    RESTA           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77


state 174

    (81) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement . RBRACKET

    RBRACKET        shift and go to state 179


state 175

    (83) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 180


state 176

    (84) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .

    LET             reduce using rule 84 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 84 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 84 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 84 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 84 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 84 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 84 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 84 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 84 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)


state 177

    (85) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr . SEMICOLON RBRACKET
    (46) aritmetica -> expr . SUMA expr
    (47) aritmetica -> expr . RESTA expr
    (48) aritmetica -> expr . MUL expr
    (49) aritmetica -> expr . DIV expr
    (50) binaria -> expr . AND expr
    (51) binaria -> expr . OR expr
    (53) comparation -> expr . LE expr
    (54) comparation -> expr . LT expr
    (55) comparation -> expr . GE expr
    (56) comparation -> expr . GT expr
    (57) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 181
    SUMA            shift and go to state 67
    RESTA           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    AND             shift and go to state 71
    OR              shift and go to state 72
    LE              shift and go to state 73
    LT              shift and go to state 74
    GE              shift and go to state 75
    GT              shift and go to state 76
    EQ              shift and go to state 77


state 178

    (86) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 182


state 179

    (81) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .

    LET             reduce using rule 81 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    TYPE            reduce using rule 81 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    FUNCTION        reduce using rule 81 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    IF              reduce using rule 81 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    WHILE           reduce using rule 81 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    CSINCOMILLAS    reduce using rule 81 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    $end            reduce using rule 81 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    RBRACKET        reduce using rule 81 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    RETURN          reduce using rule 81 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)


state 180

    (83) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .

    LET             reduce using rule 83 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 83 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 83 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 83 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 83 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 83 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 83 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 83 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 83 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)


state 181

    (85) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 183


state 182

    (86) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .

    LET             reduce using rule 86 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 86 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 86 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 86 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 86 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 86 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 86 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 86 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 86 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)


state 183

    (85) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .

    LET             reduce using rule 85 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 85 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 85 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 85 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 85 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 85 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 85 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 85 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 85 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)

