Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> empty
Rule 3     statement -> content SEMICOLON
Rule 4     statement -> content SEMICOLON statement
Rule 5     statement -> noSM statement
Rule 6     statement -> noSM
Rule 7     content -> declaration
Rule 8     content -> assignment
Rule 9     content -> definicion_ajson
Rule 10    noSM -> function
Rule 11    noSM -> condition
Rule 12    noSM -> loop
Rule 13    entero -> ENTERO
Rule 14    decimal -> DECIMAL
Rule 15    num -> entero
Rule 16    num -> decimal
Rule 17    bool -> TR
Rule 18    bool -> FL
Rule 19    declaration -> let id
Rule 20    id -> var
Rule 21    id -> var COMA id
Rule 22    id -> var IGUAL expr
Rule 23    id -> var IGUAL expr COMA id
Rule 24    var -> CSINCOMILLAS
Rule 25    var -> CSINCOMILLAS PUNTOS tipo
Rule 26    tipo_ajson -> CSINCOMILLAS
Rule 27    tipo -> INT
Rule 28    tipo -> FLOAT
Rule 29    tipo -> CHARACTER
Rule 30    tipo -> BOOLEAN
Rule 31    tipo -> tipo_ajson
Rule 32    assignment -> var IGUAL expr
Rule 33    assignment -> punto_valor IGUAL expr
Rule 34    assignment -> corchete IGUAL expr
Rule 35    variable -> CSINCOMILLAS
Rule 36    cadena -> CARACTER
Rule 37    parentesis -> LPARENT expr RPARENT
Rule 38    signos -> SUMA expr
Rule 39    signos -> RESTA expr
Rule 40    expr -> operacion
Rule 41    expr -> num
Rule 42    expr -> bool
Rule 43    expr -> NULL
Rule 44    expr -> variable
Rule 45    expr -> signos
Rule 46    expr -> cadena
Rule 47    expr -> ajson
Rule 48    expr -> parentesis
Rule 49    expr -> pc
Rule 50    expr -> functioncall
Rule 51    operacion -> aritmetica
Rule 52    operacion -> binaria
Rule 53    operacion -> comparation
Rule 54    aritmetica -> expr SUMA expr
Rule 55    aritmetica -> expr RESTA expr
Rule 56    aritmetica -> expr MUL expr
Rule 57    aritmetica -> expr DIV expr
Rule 58    binaria -> expr AND expr
Rule 59    binaria -> expr OR expr
Rule 60    binaria -> NOT expr
Rule 61    comparation -> expr LE expr
Rule 62    comparation -> expr LT expr
Rule 63    comparation -> expr GE expr
Rule 64    comparation -> expr GT expr
Rule 65    comparation -> expr EQ expr
Rule 66    definicion_ajson -> TYPE CSINCOMILLAS IGUAL ajson_t
Rule 67    ajson_t -> LBRACKET object_t RBRACKET
Rule 68    object_t -> pair_t COMA object_t
Rule 69    object_t -> pair_t COMA
Rule 70    object_t -> pair_t
Rule 71    pair_t -> clave PUNTOS tipo
Rule 72    pair_t -> clave PUNTOS ajson_t
Rule 73    clave -> CCOMILLAS
Rule 74    clave -> CSINCOMILLAS
Rule 75    ajson -> LBRACKET object RBRACKET
Rule 76    object -> pair COMA object
Rule 77    object -> pair COMA
Rule 78    object -> pair
Rule 79    pair -> clave PUNTOS expr
Rule 80    punto_valor -> punto1
Rule 81    punto_valor -> punto2
Rule 82    punto_valor -> punto_corchete
Rule 83    pc -> punto_valor
Rule 84    pc -> corchete
Rule 85    punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS
Rule 86    punto2 -> CSINCOMILLAS PUNTO punto_valor
Rule 87    punto_corchete -> CSINCOMILLAS PUNTO corchete
Rule 88    corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
Rule 89    recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete
Rule 90    recur_corchete -> empty
Rule 91    recur_corchete -> PUNTO CSINCOMILLAS
Rule 92    recur_corchete -> PUNTO punto_valor
Rule 93    condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET
Rule 94    condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
Rule 95    loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
Rule 96    function -> function_no_args
Rule 97    function -> function_args
Rule 98    function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
Rule 99    function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
Rule 100   function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
Rule 101   function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
Rule 102   arg_list -> CSINCOMILLAS PUNTOS tipo
Rule 103   arg_list -> CSINCOMILLAS PUNTOS tipo COMA arg_list
Rule 104   functioncall -> CSINCOMILLAS LPARENT RPARENT
Rule 105   functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT
Rule 106   argumentos -> expr
Rule 107   argumentos -> expr COMA argumentos
Rule 108   empty -> <empty>

Terminals, with rules where they appear

AND                  : 58
BOOLEAN              : 30
CARACTER             : 36
CCOMILLAS            : 73 88 89
CHARACTER            : 29
COMA                 : 21 23 68 69 76 77 103 107
CSINCOMILLAS         : 24 25 26 35 66 74 85 85 86 87 88 91 98 99 100 101 102 103 104 105
DECIMAL              : 14
DIV                  : 57
ELSE                 : 94
ENTERO               : 13
EQ                   : 65
FL                   : 18
FLOAT                : 28
FUNCTION             : 98 99 100 101
GE                   : 63
GT                   : 64
IF                   : 93 94
IGUAL                : 22 23 32 33 34 66
INT                  : 27
LBRACKET             : 67 75 93 94 94 95 98 99 100 101
LCORCHETE            : 88 89
LE                   : 61
LPARENT              : 37 93 94 95 98 99 100 101 104 105
LT                   : 62
MUL                  : 56
NOT                  : 60
NULL                 : 43
OR                   : 59
PUNTO                : 85 86 87 91 92
PUNTOS               : 25 71 72 79 98 99 100 101 102 103
RBRACKET             : 67 75 93 94 94 95 98 99 100 101
RCORCHETE            : 88 89
RESTA                : 39 55
RETURN               : 98 99 100 101
RPARENT              : 37 93 94 95 98 99 100 101 104 105
SEMICOLON            : 3 4 98 99 100 101
SUMA                 : 38 54
TR                   : 17
TYPE                 : 66
WHILE                : 95
error                : 
let                  : 19

Nonterminals, with rules where they appear

ajson                : 47
ajson_t              : 66 72
arg_list             : 98 99 103
argumentos           : 105 107
aritmetica           : 51
assignment           : 8
binaria              : 52
bool                 : 42
cadena               : 46
clave                : 71 72 79
comparation          : 53
condition            : 11
content              : 3 4
corchete             : 34 84 87
decimal              : 16
declaration          : 7
definicion_ajson     : 9
empty                : 2 90
entero               : 15
expr                 : 22 23 32 33 34 37 38 39 54 54 55 55 56 56 57 57 58 58 59 59 60 61 61 62 62 63 63 64 64 65 65 79 93 94 95 98 99 100 101 106 107
function             : 10
function_args        : 97
function_no_args     : 96
functioncall         : 50
id                   : 19 21 23
loop                 : 12
noSM                 : 5 6
num                  : 41
object               : 75 76
object_t             : 67 68
operacion            : 40
pair                 : 76 77 78
pair_t               : 68 69 70
parentesis           : 48
pc                   : 49
program              : 0
punto1               : 80
punto2               : 81
punto_corchete       : 82
punto_valor          : 33 83 86 92
recur_corchete       : 88 89
signos               : 45
statement            : 1 4 5 93 94 94 95 98 100
tipo                 : 25 71 98 99 100 101 102 103
tipo_ajson           : 31
var                  : 20 21 22 23 32
variable             : 44

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . empty
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (108) empty -> .
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . let id
    (32) assignment -> . var IGUAL expr
    (33) assignment -> . punto_valor IGUAL expr
    (34) assignment -> . corchete IGUAL expr
    (66) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (96) function -> . function_no_args
    (97) function -> . function_args
    (93) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (94) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (95) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (100) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (101) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (98) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    $end            reduce using rule 108 (empty -> .)
    let             shift and go to state 12
    TYPE            shift and go to state 16
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    CSINCOMILLAS    shift and go to state 17
    FUNCTION        shift and go to state 25

    program                        shift and go to state 1
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    punto_valor                    shift and go to state 14
    corchete                       shift and go to state 15
    function_no_args               shift and go to state 18
    function_args                  shift and go to state 19
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .

    $end            reduce using rule 1 (program -> statement .)


state 3

    (2) program -> empty .

    $end            reduce using rule 2 (program -> empty .)


state 4

    (3) statement -> content . SEMICOLON
    (4) statement -> content . SEMICOLON statement

    SEMICOLON       shift and go to state 26


state 5

    (5) statement -> noSM . statement
    (6) statement -> noSM .
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . let id
    (32) assignment -> . var IGUAL expr
    (33) assignment -> . punto_valor IGUAL expr
    (34) assignment -> . corchete IGUAL expr
    (66) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (96) function -> . function_no_args
    (97) function -> . function_args
    (93) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (94) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (95) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (100) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (101) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (98) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    $end            reduce using rule 6 (statement -> noSM .)
    RBRACKET        reduce using rule 6 (statement -> noSM .)
    RETURN          reduce using rule 6 (statement -> noSM .)
    let             shift and go to state 12
    TYPE            shift and go to state 16
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    CSINCOMILLAS    shift and go to state 17
    FUNCTION        shift and go to state 25

    noSM                           shift and go to state 5
    statement                      shift and go to state 27
    content                        shift and go to state 4
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    punto_valor                    shift and go to state 14
    corchete                       shift and go to state 15
    function_no_args               shift and go to state 18
    function_args                  shift and go to state 19
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 6

    (7) content -> declaration .

    SEMICOLON       reduce using rule 7 (content -> declaration .)


state 7

    (8) content -> assignment .

    SEMICOLON       reduce using rule 8 (content -> assignment .)


state 8

    (9) content -> definicion_ajson .

    SEMICOLON       reduce using rule 9 (content -> definicion_ajson .)


state 9

    (10) noSM -> function .

    let             reduce using rule 10 (noSM -> function .)
    TYPE            reduce using rule 10 (noSM -> function .)
    IF              reduce using rule 10 (noSM -> function .)
    WHILE           reduce using rule 10 (noSM -> function .)
    CSINCOMILLAS    reduce using rule 10 (noSM -> function .)
    FUNCTION        reduce using rule 10 (noSM -> function .)
    $end            reduce using rule 10 (noSM -> function .)
    RBRACKET        reduce using rule 10 (noSM -> function .)
    RETURN          reduce using rule 10 (noSM -> function .)


state 10

    (11) noSM -> condition .

    let             reduce using rule 11 (noSM -> condition .)
    TYPE            reduce using rule 11 (noSM -> condition .)
    IF              reduce using rule 11 (noSM -> condition .)
    WHILE           reduce using rule 11 (noSM -> condition .)
    CSINCOMILLAS    reduce using rule 11 (noSM -> condition .)
    FUNCTION        reduce using rule 11 (noSM -> condition .)
    $end            reduce using rule 11 (noSM -> condition .)
    RBRACKET        reduce using rule 11 (noSM -> condition .)
    RETURN          reduce using rule 11 (noSM -> condition .)


state 11

    (12) noSM -> loop .

    let             reduce using rule 12 (noSM -> loop .)
    TYPE            reduce using rule 12 (noSM -> loop .)
    IF              reduce using rule 12 (noSM -> loop .)
    WHILE           reduce using rule 12 (noSM -> loop .)
    CSINCOMILLAS    reduce using rule 12 (noSM -> loop .)
    FUNCTION        reduce using rule 12 (noSM -> loop .)
    $end            reduce using rule 12 (noSM -> loop .)
    RBRACKET        reduce using rule 12 (noSM -> loop .)
    RETURN          reduce using rule 12 (noSM -> loop .)


state 12

    (19) declaration -> let . id
    (20) id -> . var
    (21) id -> . var COMA id
    (22) id -> . var IGUAL expr
    (23) id -> . var IGUAL expr COMA id
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    CSINCOMILLAS    shift and go to state 30

    id                             shift and go to state 28
    var                            shift and go to state 29

state 13

    (32) assignment -> var . IGUAL expr

    IGUAL           shift and go to state 31


state 14

    (33) assignment -> punto_valor . IGUAL expr

    IGUAL           shift and go to state 32


state 15

    (34) assignment -> corchete . IGUAL expr

    IGUAL           shift and go to state 33


state 16

    (66) definicion_ajson -> TYPE . CSINCOMILLAS IGUAL ajson_t

    CSINCOMILLAS    shift and go to state 34


state 17

    (24) var -> CSINCOMILLAS .
    (25) var -> CSINCOMILLAS . PUNTOS tipo
    (88) corchete -> CSINCOMILLAS . LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> CSINCOMILLAS . PUNTO CSINCOMILLAS
    (86) punto2 -> CSINCOMILLAS . PUNTO punto_valor
    (87) punto_corchete -> CSINCOMILLAS . PUNTO corchete

    IGUAL           reduce using rule 24 (var -> CSINCOMILLAS .)
    PUNTOS          shift and go to state 35
    LCORCHETE       shift and go to state 36
    PUNTO           shift and go to state 37


state 18

    (96) function -> function_no_args .

    let             reduce using rule 96 (function -> function_no_args .)
    TYPE            reduce using rule 96 (function -> function_no_args .)
    IF              reduce using rule 96 (function -> function_no_args .)
    WHILE           reduce using rule 96 (function -> function_no_args .)
    CSINCOMILLAS    reduce using rule 96 (function -> function_no_args .)
    FUNCTION        reduce using rule 96 (function -> function_no_args .)
    $end            reduce using rule 96 (function -> function_no_args .)
    RBRACKET        reduce using rule 96 (function -> function_no_args .)
    RETURN          reduce using rule 96 (function -> function_no_args .)


state 19

    (97) function -> function_args .

    let             reduce using rule 97 (function -> function_args .)
    TYPE            reduce using rule 97 (function -> function_args .)
    IF              reduce using rule 97 (function -> function_args .)
    WHILE           reduce using rule 97 (function -> function_args .)
    CSINCOMILLAS    reduce using rule 97 (function -> function_args .)
    FUNCTION        reduce using rule 97 (function -> function_args .)
    $end            reduce using rule 97 (function -> function_args .)
    RBRACKET        reduce using rule 97 (function -> function_args .)
    RETURN          reduce using rule 97 (function -> function_args .)


state 20

    (93) condition -> IF . LPARENT expr RPARENT LBRACKET statement RBRACKET
    (94) condition -> IF . LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET

    LPARENT         shift and go to state 38


state 21

    (95) loop -> WHILE . LPARENT expr RPARENT LBRACKET statement RBRACKET

    LPARENT         shift and go to state 39


state 22

    (80) punto_valor -> punto1 .

    IGUAL           reduce using rule 80 (punto_valor -> punto1 .)
    SUMA            reduce using rule 80 (punto_valor -> punto1 .)
    RESTA           reduce using rule 80 (punto_valor -> punto1 .)
    MUL             reduce using rule 80 (punto_valor -> punto1 .)
    DIV             reduce using rule 80 (punto_valor -> punto1 .)
    AND             reduce using rule 80 (punto_valor -> punto1 .)
    OR              reduce using rule 80 (punto_valor -> punto1 .)
    LE              reduce using rule 80 (punto_valor -> punto1 .)
    LT              reduce using rule 80 (punto_valor -> punto1 .)
    GE              reduce using rule 80 (punto_valor -> punto1 .)
    GT              reduce using rule 80 (punto_valor -> punto1 .)
    EQ              reduce using rule 80 (punto_valor -> punto1 .)
    SEMICOLON       reduce using rule 80 (punto_valor -> punto1 .)
    RPARENT         reduce using rule 80 (punto_valor -> punto1 .)
    COMA            reduce using rule 80 (punto_valor -> punto1 .)
    RBRACKET        reduce using rule 80 (punto_valor -> punto1 .)


state 23

    (81) punto_valor -> punto2 .

    IGUAL           reduce using rule 81 (punto_valor -> punto2 .)
    SUMA            reduce using rule 81 (punto_valor -> punto2 .)
    RESTA           reduce using rule 81 (punto_valor -> punto2 .)
    MUL             reduce using rule 81 (punto_valor -> punto2 .)
    DIV             reduce using rule 81 (punto_valor -> punto2 .)
    AND             reduce using rule 81 (punto_valor -> punto2 .)
    OR              reduce using rule 81 (punto_valor -> punto2 .)
    LE              reduce using rule 81 (punto_valor -> punto2 .)
    LT              reduce using rule 81 (punto_valor -> punto2 .)
    GE              reduce using rule 81 (punto_valor -> punto2 .)
    GT              reduce using rule 81 (punto_valor -> punto2 .)
    EQ              reduce using rule 81 (punto_valor -> punto2 .)
    SEMICOLON       reduce using rule 81 (punto_valor -> punto2 .)
    RPARENT         reduce using rule 81 (punto_valor -> punto2 .)
    COMA            reduce using rule 81 (punto_valor -> punto2 .)
    RBRACKET        reduce using rule 81 (punto_valor -> punto2 .)


state 24

    (82) punto_valor -> punto_corchete .

    IGUAL           reduce using rule 82 (punto_valor -> punto_corchete .)
    SUMA            reduce using rule 82 (punto_valor -> punto_corchete .)
    RESTA           reduce using rule 82 (punto_valor -> punto_corchete .)
    MUL             reduce using rule 82 (punto_valor -> punto_corchete .)
    DIV             reduce using rule 82 (punto_valor -> punto_corchete .)
    AND             reduce using rule 82 (punto_valor -> punto_corchete .)
    OR              reduce using rule 82 (punto_valor -> punto_corchete .)
    LE              reduce using rule 82 (punto_valor -> punto_corchete .)
    LT              reduce using rule 82 (punto_valor -> punto_corchete .)
    GE              reduce using rule 82 (punto_valor -> punto_corchete .)
    GT              reduce using rule 82 (punto_valor -> punto_corchete .)
    EQ              reduce using rule 82 (punto_valor -> punto_corchete .)
    SEMICOLON       reduce using rule 82 (punto_valor -> punto_corchete .)
    RPARENT         reduce using rule 82 (punto_valor -> punto_corchete .)
    COMA            reduce using rule 82 (punto_valor -> punto_corchete .)
    RBRACKET        reduce using rule 82 (punto_valor -> punto_corchete .)


state 25

    (100) function_no_args -> FUNCTION . CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (101) function_no_args -> FUNCTION . CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (98) function_args -> FUNCTION . CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> FUNCTION . CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    CSINCOMILLAS    shift and go to state 40


state 26

    (3) statement -> content SEMICOLON .
    (4) statement -> content SEMICOLON . statement
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . let id
    (32) assignment -> . var IGUAL expr
    (33) assignment -> . punto_valor IGUAL expr
    (34) assignment -> . corchete IGUAL expr
    (66) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (96) function -> . function_no_args
    (97) function -> . function_args
    (93) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (94) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (95) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (100) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (101) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (98) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    $end            reduce using rule 3 (statement -> content SEMICOLON .)
    RBRACKET        reduce using rule 3 (statement -> content SEMICOLON .)
    RETURN          reduce using rule 3 (statement -> content SEMICOLON .)
    let             shift and go to state 12
    TYPE            shift and go to state 16
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    CSINCOMILLAS    shift and go to state 17
    FUNCTION        shift and go to state 25

    content                        shift and go to state 4
    statement                      shift and go to state 41
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    punto_valor                    shift and go to state 14
    corchete                       shift and go to state 15
    function_no_args               shift and go to state 18
    function_args                  shift and go to state 19
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 27

    (5) statement -> noSM statement .

    $end            reduce using rule 5 (statement -> noSM statement .)
    RBRACKET        reduce using rule 5 (statement -> noSM statement .)
    RETURN          reduce using rule 5 (statement -> noSM statement .)


state 28

    (19) declaration -> let id .

    SEMICOLON       reduce using rule 19 (declaration -> let id .)


state 29

    (20) id -> var .
    (21) id -> var . COMA id
    (22) id -> var . IGUAL expr
    (23) id -> var . IGUAL expr COMA id

    SEMICOLON       reduce using rule 20 (id -> var .)
    COMA            shift and go to state 42
    IGUAL           shift and go to state 43


state 30

    (24) var -> CSINCOMILLAS .
    (25) var -> CSINCOMILLAS . PUNTOS tipo

    COMA            reduce using rule 24 (var -> CSINCOMILLAS .)
    IGUAL           reduce using rule 24 (var -> CSINCOMILLAS .)
    SEMICOLON       reduce using rule 24 (var -> CSINCOMILLAS .)
    PUNTOS          shift and go to state 35


state 31

    (32) assignment -> var IGUAL . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 44
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 32

    (33) assignment -> punto_valor IGUAL . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    punto_valor                    shift and go to state 69
    expr                           shift and go to state 74
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 33

    (34) assignment -> corchete IGUAL . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    corchete                       shift and go to state 70
    expr                           shift and go to state 75
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 34

    (66) definicion_ajson -> TYPE CSINCOMILLAS . IGUAL ajson_t

    IGUAL           shift and go to state 76


state 35

    (25) var -> CSINCOMILLAS PUNTOS . tipo
    (27) tipo -> . INT
    (28) tipo -> . FLOAT
    (29) tipo -> . CHARACTER
    (30) tipo -> . BOOLEAN
    (31) tipo -> . tipo_ajson
    (26) tipo_ajson -> . CSINCOMILLAS

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    CHARACTER       shift and go to state 81
    BOOLEAN         shift and go to state 82
    CSINCOMILLAS    shift and go to state 77

    tipo                           shift and go to state 78
    tipo_ajson                     shift and go to state 83

state 36

    (88) corchete -> CSINCOMILLAS LCORCHETE . CCOMILLAS RCORCHETE recur_corchete

    CCOMILLAS       shift and go to state 84


state 37

    (85) punto1 -> CSINCOMILLAS PUNTO . CSINCOMILLAS
    (86) punto2 -> CSINCOMILLAS PUNTO . punto_valor
    (87) punto_corchete -> CSINCOMILLAS PUNTO . corchete
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    CSINCOMILLAS    shift and go to state 85

    punto_valor                    shift and go to state 86
    corchete                       shift and go to state 87
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 38

    (93) condition -> IF LPARENT . expr RPARENT LBRACKET statement RBRACKET
    (94) condition -> IF LPARENT . expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 88
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 39

    (95) loop -> WHILE LPARENT . expr RPARENT LBRACKET statement RBRACKET
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 89
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 40

    (100) function_no_args -> FUNCTION CSINCOMILLAS . LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (101) function_no_args -> FUNCTION CSINCOMILLAS . LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (98) function_args -> FUNCTION CSINCOMILLAS . LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> FUNCTION CSINCOMILLAS . LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    LPARENT         shift and go to state 90


state 41

    (4) statement -> content SEMICOLON statement .

    $end            reduce using rule 4 (statement -> content SEMICOLON statement .)
    RBRACKET        reduce using rule 4 (statement -> content SEMICOLON statement .)
    RETURN          reduce using rule 4 (statement -> content SEMICOLON statement .)


state 42

    (21) id -> var COMA . id
    (20) id -> . var
    (21) id -> . var COMA id
    (22) id -> . var IGUAL expr
    (23) id -> . var IGUAL expr COMA id
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    CSINCOMILLAS    shift and go to state 30

    var                            shift and go to state 29
    id                             shift and go to state 91

state 43

    (22) id -> var IGUAL . expr
    (23) id -> var IGUAL . expr COMA id
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 92
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 44

    (32) assignment -> var IGUAL expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    SEMICOLON       reduce using rule 32 (assignment -> var IGUAL expr .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103


state 45

    (40) expr -> operacion .

    SUMA            reduce using rule 40 (expr -> operacion .)
    RESTA           reduce using rule 40 (expr -> operacion .)
    MUL             reduce using rule 40 (expr -> operacion .)
    DIV             reduce using rule 40 (expr -> operacion .)
    AND             reduce using rule 40 (expr -> operacion .)
    OR              reduce using rule 40 (expr -> operacion .)
    LE              reduce using rule 40 (expr -> operacion .)
    LT              reduce using rule 40 (expr -> operacion .)
    GE              reduce using rule 40 (expr -> operacion .)
    GT              reduce using rule 40 (expr -> operacion .)
    EQ              reduce using rule 40 (expr -> operacion .)
    SEMICOLON       reduce using rule 40 (expr -> operacion .)
    RPARENT         reduce using rule 40 (expr -> operacion .)
    COMA            reduce using rule 40 (expr -> operacion .)
    RBRACKET        reduce using rule 40 (expr -> operacion .)


state 46

    (41) expr -> num .

    SUMA            reduce using rule 41 (expr -> num .)
    RESTA           reduce using rule 41 (expr -> num .)
    MUL             reduce using rule 41 (expr -> num .)
    DIV             reduce using rule 41 (expr -> num .)
    AND             reduce using rule 41 (expr -> num .)
    OR              reduce using rule 41 (expr -> num .)
    LE              reduce using rule 41 (expr -> num .)
    LT              reduce using rule 41 (expr -> num .)
    GE              reduce using rule 41 (expr -> num .)
    GT              reduce using rule 41 (expr -> num .)
    EQ              reduce using rule 41 (expr -> num .)
    SEMICOLON       reduce using rule 41 (expr -> num .)
    RPARENT         reduce using rule 41 (expr -> num .)
    COMA            reduce using rule 41 (expr -> num .)
    RBRACKET        reduce using rule 41 (expr -> num .)


state 47

    (42) expr -> bool .

    SUMA            reduce using rule 42 (expr -> bool .)
    RESTA           reduce using rule 42 (expr -> bool .)
    MUL             reduce using rule 42 (expr -> bool .)
    DIV             reduce using rule 42 (expr -> bool .)
    AND             reduce using rule 42 (expr -> bool .)
    OR              reduce using rule 42 (expr -> bool .)
    LE              reduce using rule 42 (expr -> bool .)
    LT              reduce using rule 42 (expr -> bool .)
    GE              reduce using rule 42 (expr -> bool .)
    GT              reduce using rule 42 (expr -> bool .)
    EQ              reduce using rule 42 (expr -> bool .)
    SEMICOLON       reduce using rule 42 (expr -> bool .)
    RPARENT         reduce using rule 42 (expr -> bool .)
    COMA            reduce using rule 42 (expr -> bool .)
    RBRACKET        reduce using rule 42 (expr -> bool .)


state 48

    (43) expr -> NULL .

    SUMA            reduce using rule 43 (expr -> NULL .)
    RESTA           reduce using rule 43 (expr -> NULL .)
    MUL             reduce using rule 43 (expr -> NULL .)
    DIV             reduce using rule 43 (expr -> NULL .)
    AND             reduce using rule 43 (expr -> NULL .)
    OR              reduce using rule 43 (expr -> NULL .)
    LE              reduce using rule 43 (expr -> NULL .)
    LT              reduce using rule 43 (expr -> NULL .)
    GE              reduce using rule 43 (expr -> NULL .)
    GT              reduce using rule 43 (expr -> NULL .)
    EQ              reduce using rule 43 (expr -> NULL .)
    SEMICOLON       reduce using rule 43 (expr -> NULL .)
    RPARENT         reduce using rule 43 (expr -> NULL .)
    COMA            reduce using rule 43 (expr -> NULL .)
    RBRACKET        reduce using rule 43 (expr -> NULL .)


state 49

    (44) expr -> variable .

    SUMA            reduce using rule 44 (expr -> variable .)
    RESTA           reduce using rule 44 (expr -> variable .)
    MUL             reduce using rule 44 (expr -> variable .)
    DIV             reduce using rule 44 (expr -> variable .)
    AND             reduce using rule 44 (expr -> variable .)
    OR              reduce using rule 44 (expr -> variable .)
    LE              reduce using rule 44 (expr -> variable .)
    LT              reduce using rule 44 (expr -> variable .)
    GE              reduce using rule 44 (expr -> variable .)
    GT              reduce using rule 44 (expr -> variable .)
    EQ              reduce using rule 44 (expr -> variable .)
    SEMICOLON       reduce using rule 44 (expr -> variable .)
    RPARENT         reduce using rule 44 (expr -> variable .)
    COMA            reduce using rule 44 (expr -> variable .)
    RBRACKET        reduce using rule 44 (expr -> variable .)


state 50

    (45) expr -> signos .

    SUMA            reduce using rule 45 (expr -> signos .)
    RESTA           reduce using rule 45 (expr -> signos .)
    MUL             reduce using rule 45 (expr -> signos .)
    DIV             reduce using rule 45 (expr -> signos .)
    AND             reduce using rule 45 (expr -> signos .)
    OR              reduce using rule 45 (expr -> signos .)
    LE              reduce using rule 45 (expr -> signos .)
    LT              reduce using rule 45 (expr -> signos .)
    GE              reduce using rule 45 (expr -> signos .)
    GT              reduce using rule 45 (expr -> signos .)
    EQ              reduce using rule 45 (expr -> signos .)
    SEMICOLON       reduce using rule 45 (expr -> signos .)
    RPARENT         reduce using rule 45 (expr -> signos .)
    COMA            reduce using rule 45 (expr -> signos .)
    RBRACKET        reduce using rule 45 (expr -> signos .)


state 51

    (46) expr -> cadena .

    SUMA            reduce using rule 46 (expr -> cadena .)
    RESTA           reduce using rule 46 (expr -> cadena .)
    MUL             reduce using rule 46 (expr -> cadena .)
    DIV             reduce using rule 46 (expr -> cadena .)
    AND             reduce using rule 46 (expr -> cadena .)
    OR              reduce using rule 46 (expr -> cadena .)
    LE              reduce using rule 46 (expr -> cadena .)
    LT              reduce using rule 46 (expr -> cadena .)
    GE              reduce using rule 46 (expr -> cadena .)
    GT              reduce using rule 46 (expr -> cadena .)
    EQ              reduce using rule 46 (expr -> cadena .)
    SEMICOLON       reduce using rule 46 (expr -> cadena .)
    RPARENT         reduce using rule 46 (expr -> cadena .)
    COMA            reduce using rule 46 (expr -> cadena .)
    RBRACKET        reduce using rule 46 (expr -> cadena .)


state 52

    (47) expr -> ajson .

    SUMA            reduce using rule 47 (expr -> ajson .)
    RESTA           reduce using rule 47 (expr -> ajson .)
    MUL             reduce using rule 47 (expr -> ajson .)
    DIV             reduce using rule 47 (expr -> ajson .)
    AND             reduce using rule 47 (expr -> ajson .)
    OR              reduce using rule 47 (expr -> ajson .)
    LE              reduce using rule 47 (expr -> ajson .)
    LT              reduce using rule 47 (expr -> ajson .)
    GE              reduce using rule 47 (expr -> ajson .)
    GT              reduce using rule 47 (expr -> ajson .)
    EQ              reduce using rule 47 (expr -> ajson .)
    SEMICOLON       reduce using rule 47 (expr -> ajson .)
    RPARENT         reduce using rule 47 (expr -> ajson .)
    COMA            reduce using rule 47 (expr -> ajson .)
    RBRACKET        reduce using rule 47 (expr -> ajson .)


state 53

    (48) expr -> parentesis .

    SUMA            reduce using rule 48 (expr -> parentesis .)
    RESTA           reduce using rule 48 (expr -> parentesis .)
    MUL             reduce using rule 48 (expr -> parentesis .)
    DIV             reduce using rule 48 (expr -> parentesis .)
    AND             reduce using rule 48 (expr -> parentesis .)
    OR              reduce using rule 48 (expr -> parentesis .)
    LE              reduce using rule 48 (expr -> parentesis .)
    LT              reduce using rule 48 (expr -> parentesis .)
    GE              reduce using rule 48 (expr -> parentesis .)
    GT              reduce using rule 48 (expr -> parentesis .)
    EQ              reduce using rule 48 (expr -> parentesis .)
    SEMICOLON       reduce using rule 48 (expr -> parentesis .)
    RPARENT         reduce using rule 48 (expr -> parentesis .)
    COMA            reduce using rule 48 (expr -> parentesis .)
    RBRACKET        reduce using rule 48 (expr -> parentesis .)


state 54

    (49) expr -> pc .

    SUMA            reduce using rule 49 (expr -> pc .)
    RESTA           reduce using rule 49 (expr -> pc .)
    MUL             reduce using rule 49 (expr -> pc .)
    DIV             reduce using rule 49 (expr -> pc .)
    AND             reduce using rule 49 (expr -> pc .)
    OR              reduce using rule 49 (expr -> pc .)
    LE              reduce using rule 49 (expr -> pc .)
    LT              reduce using rule 49 (expr -> pc .)
    GE              reduce using rule 49 (expr -> pc .)
    GT              reduce using rule 49 (expr -> pc .)
    EQ              reduce using rule 49 (expr -> pc .)
    SEMICOLON       reduce using rule 49 (expr -> pc .)
    RPARENT         reduce using rule 49 (expr -> pc .)
    COMA            reduce using rule 49 (expr -> pc .)
    RBRACKET        reduce using rule 49 (expr -> pc .)


state 55

    (50) expr -> functioncall .

    SUMA            reduce using rule 50 (expr -> functioncall .)
    RESTA           reduce using rule 50 (expr -> functioncall .)
    MUL             reduce using rule 50 (expr -> functioncall .)
    DIV             reduce using rule 50 (expr -> functioncall .)
    AND             reduce using rule 50 (expr -> functioncall .)
    OR              reduce using rule 50 (expr -> functioncall .)
    LE              reduce using rule 50 (expr -> functioncall .)
    LT              reduce using rule 50 (expr -> functioncall .)
    GE              reduce using rule 50 (expr -> functioncall .)
    GT              reduce using rule 50 (expr -> functioncall .)
    EQ              reduce using rule 50 (expr -> functioncall .)
    SEMICOLON       reduce using rule 50 (expr -> functioncall .)
    RPARENT         reduce using rule 50 (expr -> functioncall .)
    COMA            reduce using rule 50 (expr -> functioncall .)
    RBRACKET        reduce using rule 50 (expr -> functioncall .)


state 56

    (51) operacion -> aritmetica .

    SUMA            reduce using rule 51 (operacion -> aritmetica .)
    RESTA           reduce using rule 51 (operacion -> aritmetica .)
    MUL             reduce using rule 51 (operacion -> aritmetica .)
    DIV             reduce using rule 51 (operacion -> aritmetica .)
    AND             reduce using rule 51 (operacion -> aritmetica .)
    OR              reduce using rule 51 (operacion -> aritmetica .)
    LE              reduce using rule 51 (operacion -> aritmetica .)
    LT              reduce using rule 51 (operacion -> aritmetica .)
    GE              reduce using rule 51 (operacion -> aritmetica .)
    GT              reduce using rule 51 (operacion -> aritmetica .)
    EQ              reduce using rule 51 (operacion -> aritmetica .)
    SEMICOLON       reduce using rule 51 (operacion -> aritmetica .)
    RPARENT         reduce using rule 51 (operacion -> aritmetica .)
    COMA            reduce using rule 51 (operacion -> aritmetica .)
    RBRACKET        reduce using rule 51 (operacion -> aritmetica .)


state 57

    (52) operacion -> binaria .

    SUMA            reduce using rule 52 (operacion -> binaria .)
    RESTA           reduce using rule 52 (operacion -> binaria .)
    MUL             reduce using rule 52 (operacion -> binaria .)
    DIV             reduce using rule 52 (operacion -> binaria .)
    AND             reduce using rule 52 (operacion -> binaria .)
    OR              reduce using rule 52 (operacion -> binaria .)
    LE              reduce using rule 52 (operacion -> binaria .)
    LT              reduce using rule 52 (operacion -> binaria .)
    GE              reduce using rule 52 (operacion -> binaria .)
    GT              reduce using rule 52 (operacion -> binaria .)
    EQ              reduce using rule 52 (operacion -> binaria .)
    SEMICOLON       reduce using rule 52 (operacion -> binaria .)
    RPARENT         reduce using rule 52 (operacion -> binaria .)
    COMA            reduce using rule 52 (operacion -> binaria .)
    RBRACKET        reduce using rule 52 (operacion -> binaria .)


state 58

    (53) operacion -> comparation .

    SUMA            reduce using rule 53 (operacion -> comparation .)
    RESTA           reduce using rule 53 (operacion -> comparation .)
    MUL             reduce using rule 53 (operacion -> comparation .)
    DIV             reduce using rule 53 (operacion -> comparation .)
    AND             reduce using rule 53 (operacion -> comparation .)
    OR              reduce using rule 53 (operacion -> comparation .)
    LE              reduce using rule 53 (operacion -> comparation .)
    LT              reduce using rule 53 (operacion -> comparation .)
    GE              reduce using rule 53 (operacion -> comparation .)
    GT              reduce using rule 53 (operacion -> comparation .)
    EQ              reduce using rule 53 (operacion -> comparation .)
    SEMICOLON       reduce using rule 53 (operacion -> comparation .)
    RPARENT         reduce using rule 53 (operacion -> comparation .)
    COMA            reduce using rule 53 (operacion -> comparation .)
    RBRACKET        reduce using rule 53 (operacion -> comparation .)


state 59

    (15) num -> entero .

    SUMA            reduce using rule 15 (num -> entero .)
    RESTA           reduce using rule 15 (num -> entero .)
    MUL             reduce using rule 15 (num -> entero .)
    DIV             reduce using rule 15 (num -> entero .)
    AND             reduce using rule 15 (num -> entero .)
    OR              reduce using rule 15 (num -> entero .)
    LE              reduce using rule 15 (num -> entero .)
    LT              reduce using rule 15 (num -> entero .)
    GE              reduce using rule 15 (num -> entero .)
    GT              reduce using rule 15 (num -> entero .)
    EQ              reduce using rule 15 (num -> entero .)
    SEMICOLON       reduce using rule 15 (num -> entero .)
    RPARENT         reduce using rule 15 (num -> entero .)
    COMA            reduce using rule 15 (num -> entero .)
    RBRACKET        reduce using rule 15 (num -> entero .)


state 60

    (16) num -> decimal .

    SUMA            reduce using rule 16 (num -> decimal .)
    RESTA           reduce using rule 16 (num -> decimal .)
    MUL             reduce using rule 16 (num -> decimal .)
    DIV             reduce using rule 16 (num -> decimal .)
    AND             reduce using rule 16 (num -> decimal .)
    OR              reduce using rule 16 (num -> decimal .)
    LE              reduce using rule 16 (num -> decimal .)
    LT              reduce using rule 16 (num -> decimal .)
    GE              reduce using rule 16 (num -> decimal .)
    GT              reduce using rule 16 (num -> decimal .)
    EQ              reduce using rule 16 (num -> decimal .)
    SEMICOLON       reduce using rule 16 (num -> decimal .)
    RPARENT         reduce using rule 16 (num -> decimal .)
    COMA            reduce using rule 16 (num -> decimal .)
    RBRACKET        reduce using rule 16 (num -> decimal .)


state 61

    (17) bool -> TR .

    SUMA            reduce using rule 17 (bool -> TR .)
    RESTA           reduce using rule 17 (bool -> TR .)
    MUL             reduce using rule 17 (bool -> TR .)
    DIV             reduce using rule 17 (bool -> TR .)
    AND             reduce using rule 17 (bool -> TR .)
    OR              reduce using rule 17 (bool -> TR .)
    LE              reduce using rule 17 (bool -> TR .)
    LT              reduce using rule 17 (bool -> TR .)
    GE              reduce using rule 17 (bool -> TR .)
    GT              reduce using rule 17 (bool -> TR .)
    EQ              reduce using rule 17 (bool -> TR .)
    SEMICOLON       reduce using rule 17 (bool -> TR .)
    RPARENT         reduce using rule 17 (bool -> TR .)
    COMA            reduce using rule 17 (bool -> TR .)
    RBRACKET        reduce using rule 17 (bool -> TR .)


state 62

    (18) bool -> FL .

    SUMA            reduce using rule 18 (bool -> FL .)
    RESTA           reduce using rule 18 (bool -> FL .)
    MUL             reduce using rule 18 (bool -> FL .)
    DIV             reduce using rule 18 (bool -> FL .)
    AND             reduce using rule 18 (bool -> FL .)
    OR              reduce using rule 18 (bool -> FL .)
    LE              reduce using rule 18 (bool -> FL .)
    LT              reduce using rule 18 (bool -> FL .)
    GE              reduce using rule 18 (bool -> FL .)
    GT              reduce using rule 18 (bool -> FL .)
    EQ              reduce using rule 18 (bool -> FL .)
    SEMICOLON       reduce using rule 18 (bool -> FL .)
    RPARENT         reduce using rule 18 (bool -> FL .)
    COMA            reduce using rule 18 (bool -> FL .)
    RBRACKET        reduce using rule 18 (bool -> FL .)


state 63

    (35) variable -> CSINCOMILLAS .
    (104) functioncall -> CSINCOMILLAS . LPARENT RPARENT
    (105) functioncall -> CSINCOMILLAS . LPARENT argumentos RPARENT
    (88) corchete -> CSINCOMILLAS . LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> CSINCOMILLAS . PUNTO CSINCOMILLAS
    (86) punto2 -> CSINCOMILLAS . PUNTO punto_valor
    (87) punto_corchete -> CSINCOMILLAS . PUNTO corchete

    SUMA            reduce using rule 35 (variable -> CSINCOMILLAS .)
    RESTA           reduce using rule 35 (variable -> CSINCOMILLAS .)
    MUL             reduce using rule 35 (variable -> CSINCOMILLAS .)
    DIV             reduce using rule 35 (variable -> CSINCOMILLAS .)
    AND             reduce using rule 35 (variable -> CSINCOMILLAS .)
    OR              reduce using rule 35 (variable -> CSINCOMILLAS .)
    LE              reduce using rule 35 (variable -> CSINCOMILLAS .)
    LT              reduce using rule 35 (variable -> CSINCOMILLAS .)
    GE              reduce using rule 35 (variable -> CSINCOMILLAS .)
    GT              reduce using rule 35 (variable -> CSINCOMILLAS .)
    EQ              reduce using rule 35 (variable -> CSINCOMILLAS .)
    SEMICOLON       reduce using rule 35 (variable -> CSINCOMILLAS .)
    RPARENT         reduce using rule 35 (variable -> CSINCOMILLAS .)
    COMA            reduce using rule 35 (variable -> CSINCOMILLAS .)
    RBRACKET        reduce using rule 35 (variable -> CSINCOMILLAS .)
    LPARENT         shift and go to state 104
    LCORCHETE       shift and go to state 36
    PUNTO           shift and go to state 37


state 64

    (38) signos -> SUMA . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 105
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 65

    (39) signos -> RESTA . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 106
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 66

    (36) cadena -> CARACTER .

    SUMA            reduce using rule 36 (cadena -> CARACTER .)
    RESTA           reduce using rule 36 (cadena -> CARACTER .)
    MUL             reduce using rule 36 (cadena -> CARACTER .)
    DIV             reduce using rule 36 (cadena -> CARACTER .)
    AND             reduce using rule 36 (cadena -> CARACTER .)
    OR              reduce using rule 36 (cadena -> CARACTER .)
    LE              reduce using rule 36 (cadena -> CARACTER .)
    LT              reduce using rule 36 (cadena -> CARACTER .)
    GE              reduce using rule 36 (cadena -> CARACTER .)
    GT              reduce using rule 36 (cadena -> CARACTER .)
    EQ              reduce using rule 36 (cadena -> CARACTER .)
    SEMICOLON       reduce using rule 36 (cadena -> CARACTER .)
    RPARENT         reduce using rule 36 (cadena -> CARACTER .)
    COMA            reduce using rule 36 (cadena -> CARACTER .)
    RBRACKET        reduce using rule 36 (cadena -> CARACTER .)


state 67

    (75) ajson -> LBRACKET . object RBRACKET
    (76) object -> . pair COMA object
    (77) object -> . pair COMA
    (78) object -> . pair
    (79) pair -> . clave PUNTOS expr
    (73) clave -> . CCOMILLAS
    (74) clave -> . CSINCOMILLAS

    CCOMILLAS       shift and go to state 110
    CSINCOMILLAS    shift and go to state 111

    object                         shift and go to state 107
    pair                           shift and go to state 108
    clave                          shift and go to state 109

state 68

    (37) parentesis -> LPARENT . expr RPARENT
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 112
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 69

    (83) pc -> punto_valor .

    SUMA            reduce using rule 83 (pc -> punto_valor .)
    RESTA           reduce using rule 83 (pc -> punto_valor .)
    MUL             reduce using rule 83 (pc -> punto_valor .)
    DIV             reduce using rule 83 (pc -> punto_valor .)
    AND             reduce using rule 83 (pc -> punto_valor .)
    OR              reduce using rule 83 (pc -> punto_valor .)
    LE              reduce using rule 83 (pc -> punto_valor .)
    LT              reduce using rule 83 (pc -> punto_valor .)
    GE              reduce using rule 83 (pc -> punto_valor .)
    GT              reduce using rule 83 (pc -> punto_valor .)
    EQ              reduce using rule 83 (pc -> punto_valor .)
    SEMICOLON       reduce using rule 83 (pc -> punto_valor .)
    RPARENT         reduce using rule 83 (pc -> punto_valor .)
    COMA            reduce using rule 83 (pc -> punto_valor .)
    RBRACKET        reduce using rule 83 (pc -> punto_valor .)


state 70

    (84) pc -> corchete .

    SUMA            reduce using rule 84 (pc -> corchete .)
    RESTA           reduce using rule 84 (pc -> corchete .)
    MUL             reduce using rule 84 (pc -> corchete .)
    DIV             reduce using rule 84 (pc -> corchete .)
    AND             reduce using rule 84 (pc -> corchete .)
    OR              reduce using rule 84 (pc -> corchete .)
    LE              reduce using rule 84 (pc -> corchete .)
    LT              reduce using rule 84 (pc -> corchete .)
    GE              reduce using rule 84 (pc -> corchete .)
    GT              reduce using rule 84 (pc -> corchete .)
    EQ              reduce using rule 84 (pc -> corchete .)
    SEMICOLON       reduce using rule 84 (pc -> corchete .)
    RPARENT         reduce using rule 84 (pc -> corchete .)
    COMA            reduce using rule 84 (pc -> corchete .)
    RBRACKET        reduce using rule 84 (pc -> corchete .)


state 71

    (60) binaria -> NOT . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 113
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 72

    (13) entero -> ENTERO .

    SUMA            reduce using rule 13 (entero -> ENTERO .)
    RESTA           reduce using rule 13 (entero -> ENTERO .)
    MUL             reduce using rule 13 (entero -> ENTERO .)
    DIV             reduce using rule 13 (entero -> ENTERO .)
    AND             reduce using rule 13 (entero -> ENTERO .)
    OR              reduce using rule 13 (entero -> ENTERO .)
    LE              reduce using rule 13 (entero -> ENTERO .)
    LT              reduce using rule 13 (entero -> ENTERO .)
    GE              reduce using rule 13 (entero -> ENTERO .)
    GT              reduce using rule 13 (entero -> ENTERO .)
    EQ              reduce using rule 13 (entero -> ENTERO .)
    SEMICOLON       reduce using rule 13 (entero -> ENTERO .)
    RPARENT         reduce using rule 13 (entero -> ENTERO .)
    COMA            reduce using rule 13 (entero -> ENTERO .)
    RBRACKET        reduce using rule 13 (entero -> ENTERO .)


state 73

    (14) decimal -> DECIMAL .

    SUMA            reduce using rule 14 (decimal -> DECIMAL .)
    RESTA           reduce using rule 14 (decimal -> DECIMAL .)
    MUL             reduce using rule 14 (decimal -> DECIMAL .)
    DIV             reduce using rule 14 (decimal -> DECIMAL .)
    AND             reduce using rule 14 (decimal -> DECIMAL .)
    OR              reduce using rule 14 (decimal -> DECIMAL .)
    LE              reduce using rule 14 (decimal -> DECIMAL .)
    LT              reduce using rule 14 (decimal -> DECIMAL .)
    GE              reduce using rule 14 (decimal -> DECIMAL .)
    GT              reduce using rule 14 (decimal -> DECIMAL .)
    EQ              reduce using rule 14 (decimal -> DECIMAL .)
    SEMICOLON       reduce using rule 14 (decimal -> DECIMAL .)
    RPARENT         reduce using rule 14 (decimal -> DECIMAL .)
    COMA            reduce using rule 14 (decimal -> DECIMAL .)
    RBRACKET        reduce using rule 14 (decimal -> DECIMAL .)


state 74

    (33) assignment -> punto_valor IGUAL expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    SEMICOLON       reduce using rule 33 (assignment -> punto_valor IGUAL expr .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103


state 75

    (34) assignment -> corchete IGUAL expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    SEMICOLON       reduce using rule 34 (assignment -> corchete IGUAL expr .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103


state 76

    (66) definicion_ajson -> TYPE CSINCOMILLAS IGUAL . ajson_t
    (67) ajson_t -> . LBRACKET object_t RBRACKET

    LBRACKET        shift and go to state 115

    ajson_t                        shift and go to state 114

state 77

    (26) tipo_ajson -> CSINCOMILLAS .

    IGUAL           reduce using rule 26 (tipo_ajson -> CSINCOMILLAS .)
    COMA            reduce using rule 26 (tipo_ajson -> CSINCOMILLAS .)
    SEMICOLON       reduce using rule 26 (tipo_ajson -> CSINCOMILLAS .)
    RPARENT         reduce using rule 26 (tipo_ajson -> CSINCOMILLAS .)
    LBRACKET        reduce using rule 26 (tipo_ajson -> CSINCOMILLAS .)
    RBRACKET        reduce using rule 26 (tipo_ajson -> CSINCOMILLAS .)


state 78

    (25) var -> CSINCOMILLAS PUNTOS tipo .

    IGUAL           reduce using rule 25 (var -> CSINCOMILLAS PUNTOS tipo .)
    COMA            reduce using rule 25 (var -> CSINCOMILLAS PUNTOS tipo .)
    SEMICOLON       reduce using rule 25 (var -> CSINCOMILLAS PUNTOS tipo .)


state 79

    (27) tipo -> INT .

    IGUAL           reduce using rule 27 (tipo -> INT .)
    COMA            reduce using rule 27 (tipo -> INT .)
    SEMICOLON       reduce using rule 27 (tipo -> INT .)
    RPARENT         reduce using rule 27 (tipo -> INT .)
    LBRACKET        reduce using rule 27 (tipo -> INT .)
    RBRACKET        reduce using rule 27 (tipo -> INT .)


state 80

    (28) tipo -> FLOAT .

    IGUAL           reduce using rule 28 (tipo -> FLOAT .)
    COMA            reduce using rule 28 (tipo -> FLOAT .)
    SEMICOLON       reduce using rule 28 (tipo -> FLOAT .)
    RPARENT         reduce using rule 28 (tipo -> FLOAT .)
    LBRACKET        reduce using rule 28 (tipo -> FLOAT .)
    RBRACKET        reduce using rule 28 (tipo -> FLOAT .)


state 81

    (29) tipo -> CHARACTER .

    IGUAL           reduce using rule 29 (tipo -> CHARACTER .)
    COMA            reduce using rule 29 (tipo -> CHARACTER .)
    SEMICOLON       reduce using rule 29 (tipo -> CHARACTER .)
    RPARENT         reduce using rule 29 (tipo -> CHARACTER .)
    LBRACKET        reduce using rule 29 (tipo -> CHARACTER .)
    RBRACKET        reduce using rule 29 (tipo -> CHARACTER .)


state 82

    (30) tipo -> BOOLEAN .

    IGUAL           reduce using rule 30 (tipo -> BOOLEAN .)
    COMA            reduce using rule 30 (tipo -> BOOLEAN .)
    SEMICOLON       reduce using rule 30 (tipo -> BOOLEAN .)
    RPARENT         reduce using rule 30 (tipo -> BOOLEAN .)
    LBRACKET        reduce using rule 30 (tipo -> BOOLEAN .)
    RBRACKET        reduce using rule 30 (tipo -> BOOLEAN .)


state 83

    (31) tipo -> tipo_ajson .

    IGUAL           reduce using rule 31 (tipo -> tipo_ajson .)
    COMA            reduce using rule 31 (tipo -> tipo_ajson .)
    SEMICOLON       reduce using rule 31 (tipo -> tipo_ajson .)
    RPARENT         reduce using rule 31 (tipo -> tipo_ajson .)
    LBRACKET        reduce using rule 31 (tipo -> tipo_ajson .)
    RBRACKET        reduce using rule 31 (tipo -> tipo_ajson .)


state 84

    (88) corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS . RCORCHETE recur_corchete

    RCORCHETE       shift and go to state 116


state 85

    (85) punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .
    (88) corchete -> CSINCOMILLAS . LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> CSINCOMILLAS . PUNTO CSINCOMILLAS
    (86) punto2 -> CSINCOMILLAS . PUNTO punto_valor
    (87) punto_corchete -> CSINCOMILLAS . PUNTO corchete

    IGUAL           reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    SUMA            reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    RESTA           reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    MUL             reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    DIV             reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    AND             reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    OR              reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    LE              reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    LT              reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    GE              reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    GT              reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    EQ              reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    SEMICOLON       reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    RPARENT         reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    COMA            reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    RBRACKET        reduce using rule 85 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    LCORCHETE       shift and go to state 36
    PUNTO           shift and go to state 37


state 86

    (86) punto2 -> CSINCOMILLAS PUNTO punto_valor .

    IGUAL           reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    SUMA            reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    RESTA           reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    MUL             reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    DIV             reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    AND             reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    OR              reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    LE              reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    LT              reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    GE              reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    GT              reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    EQ              reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    SEMICOLON       reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    RPARENT         reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    COMA            reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    RBRACKET        reduce using rule 86 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)


state 87

    (87) punto_corchete -> CSINCOMILLAS PUNTO corchete .

    IGUAL           reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    SUMA            reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    RESTA           reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    MUL             reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    DIV             reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    AND             reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    OR              reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    LE              reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    LT              reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    GE              reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    GT              reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    EQ              reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    SEMICOLON       reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    RPARENT         reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    COMA            reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    RBRACKET        reduce using rule 87 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)


state 88

    (93) condition -> IF LPARENT expr . RPARENT LBRACKET statement RBRACKET
    (94) condition -> IF LPARENT expr . RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    RPARENT         shift and go to state 117
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103


state 89

    (95) loop -> WHILE LPARENT expr . RPARENT LBRACKET statement RBRACKET
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    RPARENT         shift and go to state 118
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103


state 90

    (100) function_no_args -> FUNCTION CSINCOMILLAS LPARENT . RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (101) function_no_args -> FUNCTION CSINCOMILLAS LPARENT . RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (98) function_args -> FUNCTION CSINCOMILLAS LPARENT . arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> FUNCTION CSINCOMILLAS LPARENT . arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (102) arg_list -> . CSINCOMILLAS PUNTOS tipo
    (103) arg_list -> . CSINCOMILLAS PUNTOS tipo COMA arg_list

    RPARENT         shift and go to state 120
    CSINCOMILLAS    shift and go to state 119

    arg_list                       shift and go to state 121

state 91

    (21) id -> var COMA id .

    SEMICOLON       reduce using rule 21 (id -> var COMA id .)


state 92

    (22) id -> var IGUAL expr .
    (23) id -> var IGUAL expr . COMA id
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    SEMICOLON       reduce using rule 22 (id -> var IGUAL expr .)
    COMA            shift and go to state 122
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103


state 93

    (54) aritmetica -> expr SUMA . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 123
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 94

    (55) aritmetica -> expr RESTA . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 124
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 95

    (56) aritmetica -> expr MUL . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 125
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 96

    (57) aritmetica -> expr DIV . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 126
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 97

    (58) binaria -> expr AND . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 127
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 98

    (59) binaria -> expr OR . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 128
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 99

    (61) comparation -> expr LE . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 129
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 100

    (62) comparation -> expr LT . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 130
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 101

    (63) comparation -> expr GE . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 131
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 102

    (64) comparation -> expr GT . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 132
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 103

    (65) comparation -> expr EQ . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 133
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 104

    (104) functioncall -> CSINCOMILLAS LPARENT . RPARENT
    (105) functioncall -> CSINCOMILLAS LPARENT . argumentos RPARENT
    (106) argumentos -> . expr
    (107) argumentos -> . expr COMA argumentos
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    RPARENT         shift and go to state 134
    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    argumentos                     shift and go to state 135
    expr                           shift and go to state 136
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 105

    (38) signos -> SUMA expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    SUMA            reduce using rule 38 (signos -> SUMA expr .)
    RESTA           reduce using rule 38 (signos -> SUMA expr .)
    MUL             reduce using rule 38 (signos -> SUMA expr .)
    DIV             reduce using rule 38 (signos -> SUMA expr .)
    AND             reduce using rule 38 (signos -> SUMA expr .)
    OR              reduce using rule 38 (signos -> SUMA expr .)
    LE              reduce using rule 38 (signos -> SUMA expr .)
    LT              reduce using rule 38 (signos -> SUMA expr .)
    GE              reduce using rule 38 (signos -> SUMA expr .)
    GT              reduce using rule 38 (signos -> SUMA expr .)
    EQ              reduce using rule 38 (signos -> SUMA expr .)
    SEMICOLON       reduce using rule 38 (signos -> SUMA expr .)
    RPARENT         reduce using rule 38 (signos -> SUMA expr .)
    COMA            reduce using rule 38 (signos -> SUMA expr .)
    RBRACKET        reduce using rule 38 (signos -> SUMA expr .)

  ! SUMA            [ shift and go to state 93 ]
  ! RESTA           [ shift and go to state 94 ]
  ! MUL             [ shift and go to state 95 ]
  ! DIV             [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! LE              [ shift and go to state 99 ]
  ! LT              [ shift and go to state 100 ]
  ! GE              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]


state 106

    (39) signos -> RESTA expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    SUMA            reduce using rule 39 (signos -> RESTA expr .)
    RESTA           reduce using rule 39 (signos -> RESTA expr .)
    MUL             reduce using rule 39 (signos -> RESTA expr .)
    DIV             reduce using rule 39 (signos -> RESTA expr .)
    AND             reduce using rule 39 (signos -> RESTA expr .)
    OR              reduce using rule 39 (signos -> RESTA expr .)
    LE              reduce using rule 39 (signos -> RESTA expr .)
    LT              reduce using rule 39 (signos -> RESTA expr .)
    GE              reduce using rule 39 (signos -> RESTA expr .)
    GT              reduce using rule 39 (signos -> RESTA expr .)
    EQ              reduce using rule 39 (signos -> RESTA expr .)
    SEMICOLON       reduce using rule 39 (signos -> RESTA expr .)
    RPARENT         reduce using rule 39 (signos -> RESTA expr .)
    COMA            reduce using rule 39 (signos -> RESTA expr .)
    RBRACKET        reduce using rule 39 (signos -> RESTA expr .)

  ! SUMA            [ shift and go to state 93 ]
  ! RESTA           [ shift and go to state 94 ]
  ! MUL             [ shift and go to state 95 ]
  ! DIV             [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! LE              [ shift and go to state 99 ]
  ! LT              [ shift and go to state 100 ]
  ! GE              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]


state 107

    (75) ajson -> LBRACKET object . RBRACKET

    RBRACKET        shift and go to state 137


state 108

    (76) object -> pair . COMA object
    (77) object -> pair . COMA
    (78) object -> pair .

    COMA            shift and go to state 138
    RBRACKET        reduce using rule 78 (object -> pair .)


state 109

    (79) pair -> clave . PUNTOS expr

    PUNTOS          shift and go to state 139


state 110

    (73) clave -> CCOMILLAS .

    PUNTOS          reduce using rule 73 (clave -> CCOMILLAS .)


state 111

    (74) clave -> CSINCOMILLAS .

    PUNTOS          reduce using rule 74 (clave -> CSINCOMILLAS .)


state 112

    (37) parentesis -> LPARENT expr . RPARENT
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    RPARENT         shift and go to state 140
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103


state 113

    (60) binaria -> NOT expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    SEMICOLON       reduce using rule 60 (binaria -> NOT expr .)
    RPARENT         reduce using rule 60 (binaria -> NOT expr .)
    COMA            reduce using rule 60 (binaria -> NOT expr .)
    RBRACKET        reduce using rule 60 (binaria -> NOT expr .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103

  ! SUMA            [ reduce using rule 60 (binaria -> NOT expr .) ]
  ! RESTA           [ reduce using rule 60 (binaria -> NOT expr .) ]
  ! MUL             [ reduce using rule 60 (binaria -> NOT expr .) ]
  ! DIV             [ reduce using rule 60 (binaria -> NOT expr .) ]
  ! AND             [ reduce using rule 60 (binaria -> NOT expr .) ]
  ! OR              [ reduce using rule 60 (binaria -> NOT expr .) ]
  ! LE              [ reduce using rule 60 (binaria -> NOT expr .) ]
  ! LT              [ reduce using rule 60 (binaria -> NOT expr .) ]
  ! GE              [ reduce using rule 60 (binaria -> NOT expr .) ]
  ! GT              [ reduce using rule 60 (binaria -> NOT expr .) ]
  ! EQ              [ reduce using rule 60 (binaria -> NOT expr .) ]


state 114

    (66) definicion_ajson -> TYPE CSINCOMILLAS IGUAL ajson_t .

    SEMICOLON       reduce using rule 66 (definicion_ajson -> TYPE CSINCOMILLAS IGUAL ajson_t .)


state 115

    (67) ajson_t -> LBRACKET . object_t RBRACKET
    (68) object_t -> . pair_t COMA object_t
    (69) object_t -> . pair_t COMA
    (70) object_t -> . pair_t
    (71) pair_t -> . clave PUNTOS tipo
    (72) pair_t -> . clave PUNTOS ajson_t
    (73) clave -> . CCOMILLAS
    (74) clave -> . CSINCOMILLAS

    CCOMILLAS       shift and go to state 110
    CSINCOMILLAS    shift and go to state 111

    object_t                       shift and go to state 141
    pair_t                         shift and go to state 142
    clave                          shift and go to state 143

state 116

    (88) corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE . recur_corchete
    (89) recur_corchete -> . LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (90) recur_corchete -> . empty
    (91) recur_corchete -> . PUNTO CSINCOMILLAS
    (92) recur_corchete -> . PUNTO punto_valor
    (108) empty -> .

    LCORCHETE       shift and go to state 144
    PUNTO           shift and go to state 147
    IGUAL           reduce using rule 108 (empty -> .)
    SUMA            reduce using rule 108 (empty -> .)
    RESTA           reduce using rule 108 (empty -> .)
    MUL             reduce using rule 108 (empty -> .)
    DIV             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    LE              reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GE              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RPARENT         reduce using rule 108 (empty -> .)
    COMA            reduce using rule 108 (empty -> .)
    RBRACKET        reduce using rule 108 (empty -> .)

    recur_corchete                 shift and go to state 145
    empty                          shift and go to state 146

state 117

    (93) condition -> IF LPARENT expr RPARENT . LBRACKET statement RBRACKET
    (94) condition -> IF LPARENT expr RPARENT . LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET

    LBRACKET        shift and go to state 148


state 118

    (95) loop -> WHILE LPARENT expr RPARENT . LBRACKET statement RBRACKET

    LBRACKET        shift and go to state 149


state 119

    (102) arg_list -> CSINCOMILLAS . PUNTOS tipo
    (103) arg_list -> CSINCOMILLAS . PUNTOS tipo COMA arg_list

    PUNTOS          shift and go to state 150


state 120

    (100) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT . PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (101) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT . PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    PUNTOS          shift and go to state 151


state 121

    (98) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list . RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list . RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    RPARENT         shift and go to state 152


state 122

    (23) id -> var IGUAL expr COMA . id
    (20) id -> . var
    (21) id -> . var COMA id
    (22) id -> . var IGUAL expr
    (23) id -> . var IGUAL expr COMA id
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    CSINCOMILLAS    shift and go to state 30

    var                            shift and go to state 29
    id                             shift and go to state 153

state 123

    (54) aritmetica -> expr SUMA expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    SUMA            reduce using rule 54 (aritmetica -> expr SUMA expr .)
    RESTA           reduce using rule 54 (aritmetica -> expr SUMA expr .)
    AND             reduce using rule 54 (aritmetica -> expr SUMA expr .)
    OR              reduce using rule 54 (aritmetica -> expr SUMA expr .)
    LE              reduce using rule 54 (aritmetica -> expr SUMA expr .)
    LT              reduce using rule 54 (aritmetica -> expr SUMA expr .)
    GE              reduce using rule 54 (aritmetica -> expr SUMA expr .)
    GT              reduce using rule 54 (aritmetica -> expr SUMA expr .)
    EQ              reduce using rule 54 (aritmetica -> expr SUMA expr .)
    SEMICOLON       reduce using rule 54 (aritmetica -> expr SUMA expr .)
    RPARENT         reduce using rule 54 (aritmetica -> expr SUMA expr .)
    COMA            reduce using rule 54 (aritmetica -> expr SUMA expr .)
    RBRACKET        reduce using rule 54 (aritmetica -> expr SUMA expr .)
    MUL             shift and go to state 95
    DIV             shift and go to state 96

  ! MUL             [ reduce using rule 54 (aritmetica -> expr SUMA expr .) ]
  ! DIV             [ reduce using rule 54 (aritmetica -> expr SUMA expr .) ]
  ! SUMA            [ shift and go to state 93 ]
  ! RESTA           [ shift and go to state 94 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! LE              [ shift and go to state 99 ]
  ! LT              [ shift and go to state 100 ]
  ! GE              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]


state 124

    (55) aritmetica -> expr RESTA expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    SUMA            reduce using rule 55 (aritmetica -> expr RESTA expr .)
    RESTA           reduce using rule 55 (aritmetica -> expr RESTA expr .)
    AND             reduce using rule 55 (aritmetica -> expr RESTA expr .)
    OR              reduce using rule 55 (aritmetica -> expr RESTA expr .)
    LE              reduce using rule 55 (aritmetica -> expr RESTA expr .)
    LT              reduce using rule 55 (aritmetica -> expr RESTA expr .)
    GE              reduce using rule 55 (aritmetica -> expr RESTA expr .)
    GT              reduce using rule 55 (aritmetica -> expr RESTA expr .)
    EQ              reduce using rule 55 (aritmetica -> expr RESTA expr .)
    SEMICOLON       reduce using rule 55 (aritmetica -> expr RESTA expr .)
    RPARENT         reduce using rule 55 (aritmetica -> expr RESTA expr .)
    COMA            reduce using rule 55 (aritmetica -> expr RESTA expr .)
    RBRACKET        reduce using rule 55 (aritmetica -> expr RESTA expr .)
    MUL             shift and go to state 95
    DIV             shift and go to state 96

  ! MUL             [ reduce using rule 55 (aritmetica -> expr RESTA expr .) ]
  ! DIV             [ reduce using rule 55 (aritmetica -> expr RESTA expr .) ]
  ! SUMA            [ shift and go to state 93 ]
  ! RESTA           [ shift and go to state 94 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! LE              [ shift and go to state 99 ]
  ! LT              [ shift and go to state 100 ]
  ! GE              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]


state 125

    (56) aritmetica -> expr MUL expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    SUMA            reduce using rule 56 (aritmetica -> expr MUL expr .)
    RESTA           reduce using rule 56 (aritmetica -> expr MUL expr .)
    MUL             reduce using rule 56 (aritmetica -> expr MUL expr .)
    DIV             reduce using rule 56 (aritmetica -> expr MUL expr .)
    AND             reduce using rule 56 (aritmetica -> expr MUL expr .)
    OR              reduce using rule 56 (aritmetica -> expr MUL expr .)
    LE              reduce using rule 56 (aritmetica -> expr MUL expr .)
    LT              reduce using rule 56 (aritmetica -> expr MUL expr .)
    GE              reduce using rule 56 (aritmetica -> expr MUL expr .)
    GT              reduce using rule 56 (aritmetica -> expr MUL expr .)
    EQ              reduce using rule 56 (aritmetica -> expr MUL expr .)
    SEMICOLON       reduce using rule 56 (aritmetica -> expr MUL expr .)
    RPARENT         reduce using rule 56 (aritmetica -> expr MUL expr .)
    COMA            reduce using rule 56 (aritmetica -> expr MUL expr .)
    RBRACKET        reduce using rule 56 (aritmetica -> expr MUL expr .)

  ! SUMA            [ shift and go to state 93 ]
  ! RESTA           [ shift and go to state 94 ]
  ! MUL             [ shift and go to state 95 ]
  ! DIV             [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! LE              [ shift and go to state 99 ]
  ! LT              [ shift and go to state 100 ]
  ! GE              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]


state 126

    (57) aritmetica -> expr DIV expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    SUMA            reduce using rule 57 (aritmetica -> expr DIV expr .)
    RESTA           reduce using rule 57 (aritmetica -> expr DIV expr .)
    MUL             reduce using rule 57 (aritmetica -> expr DIV expr .)
    DIV             reduce using rule 57 (aritmetica -> expr DIV expr .)
    AND             reduce using rule 57 (aritmetica -> expr DIV expr .)
    OR              reduce using rule 57 (aritmetica -> expr DIV expr .)
    LE              reduce using rule 57 (aritmetica -> expr DIV expr .)
    LT              reduce using rule 57 (aritmetica -> expr DIV expr .)
    GE              reduce using rule 57 (aritmetica -> expr DIV expr .)
    GT              reduce using rule 57 (aritmetica -> expr DIV expr .)
    EQ              reduce using rule 57 (aritmetica -> expr DIV expr .)
    SEMICOLON       reduce using rule 57 (aritmetica -> expr DIV expr .)
    RPARENT         reduce using rule 57 (aritmetica -> expr DIV expr .)
    COMA            reduce using rule 57 (aritmetica -> expr DIV expr .)
    RBRACKET        reduce using rule 57 (aritmetica -> expr DIV expr .)

  ! SUMA            [ shift and go to state 93 ]
  ! RESTA           [ shift and go to state 94 ]
  ! MUL             [ shift and go to state 95 ]
  ! DIV             [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! LE              [ shift and go to state 99 ]
  ! LT              [ shift and go to state 100 ]
  ! GE              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]


state 127

    (58) binaria -> expr AND expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    AND             reduce using rule 58 (binaria -> expr AND expr .)
    OR              reduce using rule 58 (binaria -> expr AND expr .)
    SEMICOLON       reduce using rule 58 (binaria -> expr AND expr .)
    RPARENT         reduce using rule 58 (binaria -> expr AND expr .)
    COMA            reduce using rule 58 (binaria -> expr AND expr .)
    RBRACKET        reduce using rule 58 (binaria -> expr AND expr .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103

  ! SUMA            [ reduce using rule 58 (binaria -> expr AND expr .) ]
  ! RESTA           [ reduce using rule 58 (binaria -> expr AND expr .) ]
  ! MUL             [ reduce using rule 58 (binaria -> expr AND expr .) ]
  ! DIV             [ reduce using rule 58 (binaria -> expr AND expr .) ]
  ! LE              [ reduce using rule 58 (binaria -> expr AND expr .) ]
  ! LT              [ reduce using rule 58 (binaria -> expr AND expr .) ]
  ! GE              [ reduce using rule 58 (binaria -> expr AND expr .) ]
  ! GT              [ reduce using rule 58 (binaria -> expr AND expr .) ]
  ! EQ              [ reduce using rule 58 (binaria -> expr AND expr .) ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]


state 128

    (59) binaria -> expr OR expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    AND             reduce using rule 59 (binaria -> expr OR expr .)
    OR              reduce using rule 59 (binaria -> expr OR expr .)
    SEMICOLON       reduce using rule 59 (binaria -> expr OR expr .)
    RPARENT         reduce using rule 59 (binaria -> expr OR expr .)
    COMA            reduce using rule 59 (binaria -> expr OR expr .)
    RBRACKET        reduce using rule 59 (binaria -> expr OR expr .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103

  ! SUMA            [ reduce using rule 59 (binaria -> expr OR expr .) ]
  ! RESTA           [ reduce using rule 59 (binaria -> expr OR expr .) ]
  ! MUL             [ reduce using rule 59 (binaria -> expr OR expr .) ]
  ! DIV             [ reduce using rule 59 (binaria -> expr OR expr .) ]
  ! LE              [ reduce using rule 59 (binaria -> expr OR expr .) ]
  ! LT              [ reduce using rule 59 (binaria -> expr OR expr .) ]
  ! GE              [ reduce using rule 59 (binaria -> expr OR expr .) ]
  ! GT              [ reduce using rule 59 (binaria -> expr OR expr .) ]
  ! EQ              [ reduce using rule 59 (binaria -> expr OR expr .) ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]


state 129

    (61) comparation -> expr LE expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    AND             reduce using rule 61 (comparation -> expr LE expr .)
    OR              reduce using rule 61 (comparation -> expr LE expr .)
    LE              reduce using rule 61 (comparation -> expr LE expr .)
    LT              reduce using rule 61 (comparation -> expr LE expr .)
    GE              reduce using rule 61 (comparation -> expr LE expr .)
    GT              reduce using rule 61 (comparation -> expr LE expr .)
    EQ              reduce using rule 61 (comparation -> expr LE expr .)
    SEMICOLON       reduce using rule 61 (comparation -> expr LE expr .)
    RPARENT         reduce using rule 61 (comparation -> expr LE expr .)
    COMA            reduce using rule 61 (comparation -> expr LE expr .)
    RBRACKET        reduce using rule 61 (comparation -> expr LE expr .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96

  ! SUMA            [ reduce using rule 61 (comparation -> expr LE expr .) ]
  ! RESTA           [ reduce using rule 61 (comparation -> expr LE expr .) ]
  ! MUL             [ reduce using rule 61 (comparation -> expr LE expr .) ]
  ! DIV             [ reduce using rule 61 (comparation -> expr LE expr .) ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! LE              [ shift and go to state 99 ]
  ! LT              [ shift and go to state 100 ]
  ! GE              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]


state 130

    (62) comparation -> expr LT expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    AND             reduce using rule 62 (comparation -> expr LT expr .)
    OR              reduce using rule 62 (comparation -> expr LT expr .)
    LE              reduce using rule 62 (comparation -> expr LT expr .)
    LT              reduce using rule 62 (comparation -> expr LT expr .)
    GE              reduce using rule 62 (comparation -> expr LT expr .)
    GT              reduce using rule 62 (comparation -> expr LT expr .)
    EQ              reduce using rule 62 (comparation -> expr LT expr .)
    SEMICOLON       reduce using rule 62 (comparation -> expr LT expr .)
    RPARENT         reduce using rule 62 (comparation -> expr LT expr .)
    COMA            reduce using rule 62 (comparation -> expr LT expr .)
    RBRACKET        reduce using rule 62 (comparation -> expr LT expr .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96

  ! SUMA            [ reduce using rule 62 (comparation -> expr LT expr .) ]
  ! RESTA           [ reduce using rule 62 (comparation -> expr LT expr .) ]
  ! MUL             [ reduce using rule 62 (comparation -> expr LT expr .) ]
  ! DIV             [ reduce using rule 62 (comparation -> expr LT expr .) ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! LE              [ shift and go to state 99 ]
  ! LT              [ shift and go to state 100 ]
  ! GE              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]


state 131

    (63) comparation -> expr GE expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    AND             reduce using rule 63 (comparation -> expr GE expr .)
    OR              reduce using rule 63 (comparation -> expr GE expr .)
    LE              reduce using rule 63 (comparation -> expr GE expr .)
    LT              reduce using rule 63 (comparation -> expr GE expr .)
    GE              reduce using rule 63 (comparation -> expr GE expr .)
    GT              reduce using rule 63 (comparation -> expr GE expr .)
    EQ              reduce using rule 63 (comparation -> expr GE expr .)
    SEMICOLON       reduce using rule 63 (comparation -> expr GE expr .)
    RPARENT         reduce using rule 63 (comparation -> expr GE expr .)
    COMA            reduce using rule 63 (comparation -> expr GE expr .)
    RBRACKET        reduce using rule 63 (comparation -> expr GE expr .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96

  ! SUMA            [ reduce using rule 63 (comparation -> expr GE expr .) ]
  ! RESTA           [ reduce using rule 63 (comparation -> expr GE expr .) ]
  ! MUL             [ reduce using rule 63 (comparation -> expr GE expr .) ]
  ! DIV             [ reduce using rule 63 (comparation -> expr GE expr .) ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! LE              [ shift and go to state 99 ]
  ! LT              [ shift and go to state 100 ]
  ! GE              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]


state 132

    (64) comparation -> expr GT expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    AND             reduce using rule 64 (comparation -> expr GT expr .)
    OR              reduce using rule 64 (comparation -> expr GT expr .)
    LE              reduce using rule 64 (comparation -> expr GT expr .)
    LT              reduce using rule 64 (comparation -> expr GT expr .)
    GE              reduce using rule 64 (comparation -> expr GT expr .)
    GT              reduce using rule 64 (comparation -> expr GT expr .)
    EQ              reduce using rule 64 (comparation -> expr GT expr .)
    SEMICOLON       reduce using rule 64 (comparation -> expr GT expr .)
    RPARENT         reduce using rule 64 (comparation -> expr GT expr .)
    COMA            reduce using rule 64 (comparation -> expr GT expr .)
    RBRACKET        reduce using rule 64 (comparation -> expr GT expr .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96

  ! SUMA            [ reduce using rule 64 (comparation -> expr GT expr .) ]
  ! RESTA           [ reduce using rule 64 (comparation -> expr GT expr .) ]
  ! MUL             [ reduce using rule 64 (comparation -> expr GT expr .) ]
  ! DIV             [ reduce using rule 64 (comparation -> expr GT expr .) ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! LE              [ shift and go to state 99 ]
  ! LT              [ shift and go to state 100 ]
  ! GE              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]


state 133

    (65) comparation -> expr EQ expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    AND             reduce using rule 65 (comparation -> expr EQ expr .)
    OR              reduce using rule 65 (comparation -> expr EQ expr .)
    LE              reduce using rule 65 (comparation -> expr EQ expr .)
    LT              reduce using rule 65 (comparation -> expr EQ expr .)
    GE              reduce using rule 65 (comparation -> expr EQ expr .)
    GT              reduce using rule 65 (comparation -> expr EQ expr .)
    EQ              reduce using rule 65 (comparation -> expr EQ expr .)
    SEMICOLON       reduce using rule 65 (comparation -> expr EQ expr .)
    RPARENT         reduce using rule 65 (comparation -> expr EQ expr .)
    COMA            reduce using rule 65 (comparation -> expr EQ expr .)
    RBRACKET        reduce using rule 65 (comparation -> expr EQ expr .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96

  ! SUMA            [ reduce using rule 65 (comparation -> expr EQ expr .) ]
  ! RESTA           [ reduce using rule 65 (comparation -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 65 (comparation -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 65 (comparation -> expr EQ expr .) ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! LE              [ shift and go to state 99 ]
  ! LT              [ shift and go to state 100 ]
  ! GE              [ shift and go to state 101 ]
  ! GT              [ shift and go to state 102 ]
  ! EQ              [ shift and go to state 103 ]


state 134

    (104) functioncall -> CSINCOMILLAS LPARENT RPARENT .

    SUMA            reduce using rule 104 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    RESTA           reduce using rule 104 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    MUL             reduce using rule 104 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    DIV             reduce using rule 104 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    AND             reduce using rule 104 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    OR              reduce using rule 104 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    LE              reduce using rule 104 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    LT              reduce using rule 104 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    GE              reduce using rule 104 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    GT              reduce using rule 104 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    EQ              reduce using rule 104 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    SEMICOLON       reduce using rule 104 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    RPARENT         reduce using rule 104 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    COMA            reduce using rule 104 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    RBRACKET        reduce using rule 104 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)


state 135

    (105) functioncall -> CSINCOMILLAS LPARENT argumentos . RPARENT

    RPARENT         shift and go to state 154


state 136

    (106) argumentos -> expr .
    (107) argumentos -> expr . COMA argumentos
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    RPARENT         reduce using rule 106 (argumentos -> expr .)
    COMA            shift and go to state 155
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103


state 137

    (75) ajson -> LBRACKET object RBRACKET .

    SUMA            reduce using rule 75 (ajson -> LBRACKET object RBRACKET .)
    RESTA           reduce using rule 75 (ajson -> LBRACKET object RBRACKET .)
    MUL             reduce using rule 75 (ajson -> LBRACKET object RBRACKET .)
    DIV             reduce using rule 75 (ajson -> LBRACKET object RBRACKET .)
    AND             reduce using rule 75 (ajson -> LBRACKET object RBRACKET .)
    OR              reduce using rule 75 (ajson -> LBRACKET object RBRACKET .)
    LE              reduce using rule 75 (ajson -> LBRACKET object RBRACKET .)
    LT              reduce using rule 75 (ajson -> LBRACKET object RBRACKET .)
    GE              reduce using rule 75 (ajson -> LBRACKET object RBRACKET .)
    GT              reduce using rule 75 (ajson -> LBRACKET object RBRACKET .)
    EQ              reduce using rule 75 (ajson -> LBRACKET object RBRACKET .)
    SEMICOLON       reduce using rule 75 (ajson -> LBRACKET object RBRACKET .)
    RPARENT         reduce using rule 75 (ajson -> LBRACKET object RBRACKET .)
    COMA            reduce using rule 75 (ajson -> LBRACKET object RBRACKET .)
    RBRACKET        reduce using rule 75 (ajson -> LBRACKET object RBRACKET .)


state 138

    (76) object -> pair COMA . object
    (77) object -> pair COMA .
    (76) object -> . pair COMA object
    (77) object -> . pair COMA
    (78) object -> . pair
    (79) pair -> . clave PUNTOS expr
    (73) clave -> . CCOMILLAS
    (74) clave -> . CSINCOMILLAS

    RBRACKET        reduce using rule 77 (object -> pair COMA .)
    CCOMILLAS       shift and go to state 110
    CSINCOMILLAS    shift and go to state 111

    pair                           shift and go to state 108
    object                         shift and go to state 156
    clave                          shift and go to state 109

state 139

    (79) pair -> clave PUNTOS . expr
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 157
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 140

    (37) parentesis -> LPARENT expr RPARENT .

    SUMA            reduce using rule 37 (parentesis -> LPARENT expr RPARENT .)
    RESTA           reduce using rule 37 (parentesis -> LPARENT expr RPARENT .)
    MUL             reduce using rule 37 (parentesis -> LPARENT expr RPARENT .)
    DIV             reduce using rule 37 (parentesis -> LPARENT expr RPARENT .)
    AND             reduce using rule 37 (parentesis -> LPARENT expr RPARENT .)
    OR              reduce using rule 37 (parentesis -> LPARENT expr RPARENT .)
    LE              reduce using rule 37 (parentesis -> LPARENT expr RPARENT .)
    LT              reduce using rule 37 (parentesis -> LPARENT expr RPARENT .)
    GE              reduce using rule 37 (parentesis -> LPARENT expr RPARENT .)
    GT              reduce using rule 37 (parentesis -> LPARENT expr RPARENT .)
    EQ              reduce using rule 37 (parentesis -> LPARENT expr RPARENT .)
    SEMICOLON       reduce using rule 37 (parentesis -> LPARENT expr RPARENT .)
    RPARENT         reduce using rule 37 (parentesis -> LPARENT expr RPARENT .)
    COMA            reduce using rule 37 (parentesis -> LPARENT expr RPARENT .)
    RBRACKET        reduce using rule 37 (parentesis -> LPARENT expr RPARENT .)


state 141

    (67) ajson_t -> LBRACKET object_t . RBRACKET

    RBRACKET        shift and go to state 158


state 142

    (68) object_t -> pair_t . COMA object_t
    (69) object_t -> pair_t . COMA
    (70) object_t -> pair_t .

    COMA            shift and go to state 159
    RBRACKET        reduce using rule 70 (object_t -> pair_t .)


state 143

    (71) pair_t -> clave . PUNTOS tipo
    (72) pair_t -> clave . PUNTOS ajson_t

    PUNTOS          shift and go to state 160


state 144

    (89) recur_corchete -> LCORCHETE . CCOMILLAS RCORCHETE recur_corchete

    CCOMILLAS       shift and go to state 161


state 145

    (88) corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .

    IGUAL           reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    SUMA            reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RESTA           reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    MUL             reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    DIV             reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    AND             reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    OR              reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LE              reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LT              reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GE              reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GT              reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    EQ              reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    SEMICOLON       reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RPARENT         reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    COMA            reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RBRACKET        reduce using rule 88 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)


state 146

    (90) recur_corchete -> empty .

    IGUAL           reduce using rule 90 (recur_corchete -> empty .)
    SUMA            reduce using rule 90 (recur_corchete -> empty .)
    RESTA           reduce using rule 90 (recur_corchete -> empty .)
    MUL             reduce using rule 90 (recur_corchete -> empty .)
    DIV             reduce using rule 90 (recur_corchete -> empty .)
    AND             reduce using rule 90 (recur_corchete -> empty .)
    OR              reduce using rule 90 (recur_corchete -> empty .)
    LE              reduce using rule 90 (recur_corchete -> empty .)
    LT              reduce using rule 90 (recur_corchete -> empty .)
    GE              reduce using rule 90 (recur_corchete -> empty .)
    GT              reduce using rule 90 (recur_corchete -> empty .)
    EQ              reduce using rule 90 (recur_corchete -> empty .)
    SEMICOLON       reduce using rule 90 (recur_corchete -> empty .)
    RPARENT         reduce using rule 90 (recur_corchete -> empty .)
    COMA            reduce using rule 90 (recur_corchete -> empty .)
    RBRACKET        reduce using rule 90 (recur_corchete -> empty .)


state 147

    (91) recur_corchete -> PUNTO . CSINCOMILLAS
    (92) recur_corchete -> PUNTO . punto_valor
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    CSINCOMILLAS    shift and go to state 162

    punto_valor                    shift and go to state 163
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 148

    (93) condition -> IF LPARENT expr RPARENT LBRACKET . statement RBRACKET
    (94) condition -> IF LPARENT expr RPARENT LBRACKET . statement RBRACKET ELSE LBRACKET statement RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . let id
    (32) assignment -> . var IGUAL expr
    (33) assignment -> . punto_valor IGUAL expr
    (34) assignment -> . corchete IGUAL expr
    (66) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (96) function -> . function_no_args
    (97) function -> . function_args
    (93) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (94) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (95) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (100) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (101) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (98) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    let             shift and go to state 12
    TYPE            shift and go to state 16
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    CSINCOMILLAS    shift and go to state 17
    FUNCTION        shift and go to state 25

    statement                      shift and go to state 164
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    punto_valor                    shift and go to state 14
    corchete                       shift and go to state 15
    function_no_args               shift and go to state 18
    function_args                  shift and go to state 19
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 149

    (95) loop -> WHILE LPARENT expr RPARENT LBRACKET . statement RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . let id
    (32) assignment -> . var IGUAL expr
    (33) assignment -> . punto_valor IGUAL expr
    (34) assignment -> . corchete IGUAL expr
    (66) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (96) function -> . function_no_args
    (97) function -> . function_args
    (93) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (94) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (95) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (100) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (101) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (98) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    let             shift and go to state 12
    TYPE            shift and go to state 16
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    CSINCOMILLAS    shift and go to state 17
    FUNCTION        shift and go to state 25

    statement                      shift and go to state 165
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    punto_valor                    shift and go to state 14
    corchete                       shift and go to state 15
    function_no_args               shift and go to state 18
    function_args                  shift and go to state 19
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 150

    (102) arg_list -> CSINCOMILLAS PUNTOS . tipo
    (103) arg_list -> CSINCOMILLAS PUNTOS . tipo COMA arg_list
    (27) tipo -> . INT
    (28) tipo -> . FLOAT
    (29) tipo -> . CHARACTER
    (30) tipo -> . BOOLEAN
    (31) tipo -> . tipo_ajson
    (26) tipo_ajson -> . CSINCOMILLAS

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    CHARACTER       shift and go to state 81
    BOOLEAN         shift and go to state 82
    CSINCOMILLAS    shift and go to state 77

    tipo                           shift and go to state 166
    tipo_ajson                     shift and go to state 83

state 151

    (100) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS . tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (101) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS . tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (27) tipo -> . INT
    (28) tipo -> . FLOAT
    (29) tipo -> . CHARACTER
    (30) tipo -> . BOOLEAN
    (31) tipo -> . tipo_ajson
    (26) tipo_ajson -> . CSINCOMILLAS

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    CHARACTER       shift and go to state 81
    BOOLEAN         shift and go to state 82
    CSINCOMILLAS    shift and go to state 77

    tipo                           shift and go to state 167
    tipo_ajson                     shift and go to state 83

state 152

    (98) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT . PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT . PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    PUNTOS          shift and go to state 168


state 153

    (23) id -> var IGUAL expr COMA id .

    SEMICOLON       reduce using rule 23 (id -> var IGUAL expr COMA id .)


state 154

    (105) functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .

    SUMA            reduce using rule 105 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    RESTA           reduce using rule 105 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    MUL             reduce using rule 105 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    DIV             reduce using rule 105 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    AND             reduce using rule 105 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    OR              reduce using rule 105 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    LE              reduce using rule 105 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    LT              reduce using rule 105 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    GE              reduce using rule 105 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    GT              reduce using rule 105 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    EQ              reduce using rule 105 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    SEMICOLON       reduce using rule 105 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    RPARENT         reduce using rule 105 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    COMA            reduce using rule 105 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    RBRACKET        reduce using rule 105 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)


state 155

    (107) argumentos -> expr COMA . argumentos
    (106) argumentos -> . expr
    (107) argumentos -> . expr COMA argumentos
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 136
    argumentos                     shift and go to state 169
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 156

    (76) object -> pair COMA object .

    RBRACKET        reduce using rule 76 (object -> pair COMA object .)


state 157

    (79) pair -> clave PUNTOS expr .
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    COMA            reduce using rule 79 (pair -> clave PUNTOS expr .)
    RBRACKET        reduce using rule 79 (pair -> clave PUNTOS expr .)
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103


state 158

    (67) ajson_t -> LBRACKET object_t RBRACKET .

    SEMICOLON       reduce using rule 67 (ajson_t -> LBRACKET object_t RBRACKET .)
    COMA            reduce using rule 67 (ajson_t -> LBRACKET object_t RBRACKET .)
    RBRACKET        reduce using rule 67 (ajson_t -> LBRACKET object_t RBRACKET .)


state 159

    (68) object_t -> pair_t COMA . object_t
    (69) object_t -> pair_t COMA .
    (68) object_t -> . pair_t COMA object_t
    (69) object_t -> . pair_t COMA
    (70) object_t -> . pair_t
    (71) pair_t -> . clave PUNTOS tipo
    (72) pair_t -> . clave PUNTOS ajson_t
    (73) clave -> . CCOMILLAS
    (74) clave -> . CSINCOMILLAS

    RBRACKET        reduce using rule 69 (object_t -> pair_t COMA .)
    CCOMILLAS       shift and go to state 110
    CSINCOMILLAS    shift and go to state 111

    pair_t                         shift and go to state 142
    object_t                       shift and go to state 170
    clave                          shift and go to state 143

state 160

    (71) pair_t -> clave PUNTOS . tipo
    (72) pair_t -> clave PUNTOS . ajson_t
    (27) tipo -> . INT
    (28) tipo -> . FLOAT
    (29) tipo -> . CHARACTER
    (30) tipo -> . BOOLEAN
    (31) tipo -> . tipo_ajson
    (67) ajson_t -> . LBRACKET object_t RBRACKET
    (26) tipo_ajson -> . CSINCOMILLAS

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    CHARACTER       shift and go to state 81
    BOOLEAN         shift and go to state 82
    LBRACKET        shift and go to state 115
    CSINCOMILLAS    shift and go to state 77

    tipo                           shift and go to state 171
    ajson_t                        shift and go to state 172
    tipo_ajson                     shift and go to state 83

state 161

    (89) recur_corchete -> LCORCHETE CCOMILLAS . RCORCHETE recur_corchete

    RCORCHETE       shift and go to state 173


state 162

    (91) recur_corchete -> PUNTO CSINCOMILLAS .
    (85) punto1 -> CSINCOMILLAS . PUNTO CSINCOMILLAS
    (86) punto2 -> CSINCOMILLAS . PUNTO punto_valor
    (87) punto_corchete -> CSINCOMILLAS . PUNTO corchete

    IGUAL           reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    SUMA            reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    RESTA           reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    MUL             reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    DIV             reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    AND             reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    OR              reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    LE              reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    LT              reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    GE              reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    GT              reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    EQ              reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    SEMICOLON       reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    RPARENT         reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    COMA            reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    RBRACKET        reduce using rule 91 (recur_corchete -> PUNTO CSINCOMILLAS .)
    PUNTO           shift and go to state 37


state 163

    (92) recur_corchete -> PUNTO punto_valor .

    IGUAL           reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)
    SUMA            reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)
    RESTA           reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)
    MUL             reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)
    DIV             reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)
    AND             reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)
    OR              reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)
    LE              reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)
    LT              reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)
    GE              reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)
    GT              reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)
    EQ              reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)
    SEMICOLON       reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)
    RPARENT         reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)
    COMA            reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)
    RBRACKET        reduce using rule 92 (recur_corchete -> PUNTO punto_valor .)


state 164

    (93) condition -> IF LPARENT expr RPARENT LBRACKET statement . RBRACKET
    (94) condition -> IF LPARENT expr RPARENT LBRACKET statement . RBRACKET ELSE LBRACKET statement RBRACKET

    RBRACKET        shift and go to state 174


state 165

    (95) loop -> WHILE LPARENT expr RPARENT LBRACKET statement . RBRACKET

    RBRACKET        shift and go to state 175


state 166

    (102) arg_list -> CSINCOMILLAS PUNTOS tipo .
    (103) arg_list -> CSINCOMILLAS PUNTOS tipo . COMA arg_list

    RPARENT         reduce using rule 102 (arg_list -> CSINCOMILLAS PUNTOS tipo .)
    COMA            shift and go to state 176


state 167

    (100) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo . LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (101) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo . LBRACKET RETURN expr SEMICOLON RBRACKET

    LBRACKET        shift and go to state 177


state 168

    (98) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS . tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS . tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (27) tipo -> . INT
    (28) tipo -> . FLOAT
    (29) tipo -> . CHARACTER
    (30) tipo -> . BOOLEAN
    (31) tipo -> . tipo_ajson
    (26) tipo_ajson -> . CSINCOMILLAS

    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    CHARACTER       shift and go to state 81
    BOOLEAN         shift and go to state 82
    CSINCOMILLAS    shift and go to state 77

    tipo                           shift and go to state 178
    tipo_ajson                     shift and go to state 83

state 169

    (107) argumentos -> expr COMA argumentos .

    RPARENT         reduce using rule 107 (argumentos -> expr COMA argumentos .)


state 170

    (68) object_t -> pair_t COMA object_t .

    RBRACKET        reduce using rule 68 (object_t -> pair_t COMA object_t .)


state 171

    (71) pair_t -> clave PUNTOS tipo .

    COMA            reduce using rule 71 (pair_t -> clave PUNTOS tipo .)
    RBRACKET        reduce using rule 71 (pair_t -> clave PUNTOS tipo .)


state 172

    (72) pair_t -> clave PUNTOS ajson_t .

    COMA            reduce using rule 72 (pair_t -> clave PUNTOS ajson_t .)
    RBRACKET        reduce using rule 72 (pair_t -> clave PUNTOS ajson_t .)


state 173

    (89) recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE . recur_corchete
    (89) recur_corchete -> . LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (90) recur_corchete -> . empty
    (91) recur_corchete -> . PUNTO CSINCOMILLAS
    (92) recur_corchete -> . PUNTO punto_valor
    (108) empty -> .

    LCORCHETE       shift and go to state 144
    PUNTO           shift and go to state 147
    IGUAL           reduce using rule 108 (empty -> .)
    SUMA            reduce using rule 108 (empty -> .)
    RESTA           reduce using rule 108 (empty -> .)
    MUL             reduce using rule 108 (empty -> .)
    DIV             reduce using rule 108 (empty -> .)
    AND             reduce using rule 108 (empty -> .)
    OR              reduce using rule 108 (empty -> .)
    LE              reduce using rule 108 (empty -> .)
    LT              reduce using rule 108 (empty -> .)
    GE              reduce using rule 108 (empty -> .)
    GT              reduce using rule 108 (empty -> .)
    EQ              reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RPARENT         reduce using rule 108 (empty -> .)
    COMA            reduce using rule 108 (empty -> .)
    RBRACKET        reduce using rule 108 (empty -> .)

    recur_corchete                 shift and go to state 179
    empty                          shift and go to state 146

state 174

    (93) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .
    (94) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET . ELSE LBRACKET statement RBRACKET

    let             reduce using rule 93 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    TYPE            reduce using rule 93 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    IF              reduce using rule 93 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    WHILE           reduce using rule 93 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    CSINCOMILLAS    reduce using rule 93 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    FUNCTION        reduce using rule 93 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    $end            reduce using rule 93 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RBRACKET        reduce using rule 93 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RETURN          reduce using rule 93 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    ELSE            shift and go to state 180


state 175

    (95) loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .

    let             reduce using rule 95 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    TYPE            reduce using rule 95 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    IF              reduce using rule 95 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    WHILE           reduce using rule 95 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    CSINCOMILLAS    reduce using rule 95 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    FUNCTION        reduce using rule 95 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    $end            reduce using rule 95 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RBRACKET        reduce using rule 95 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RETURN          reduce using rule 95 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)


state 176

    (103) arg_list -> CSINCOMILLAS PUNTOS tipo COMA . arg_list
    (102) arg_list -> . CSINCOMILLAS PUNTOS tipo
    (103) arg_list -> . CSINCOMILLAS PUNTOS tipo COMA arg_list

    CSINCOMILLAS    shift and go to state 119

    arg_list                       shift and go to state 181

state 177

    (100) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET . statement RETURN expr SEMICOLON RBRACKET
    (101) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET . RETURN expr SEMICOLON RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . let id
    (32) assignment -> . var IGUAL expr
    (33) assignment -> . punto_valor IGUAL expr
    (34) assignment -> . corchete IGUAL expr
    (66) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (96) function -> . function_no_args
    (97) function -> . function_args
    (93) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (94) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (95) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (100) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (101) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (98) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    RETURN          shift and go to state 183
    let             shift and go to state 12
    TYPE            shift and go to state 16
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    CSINCOMILLAS    shift and go to state 17
    FUNCTION        shift and go to state 25

    statement                      shift and go to state 182
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    punto_valor                    shift and go to state 14
    corchete                       shift and go to state 15
    function_no_args               shift and go to state 18
    function_args                  shift and go to state 19
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 178

    (98) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo . LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo . LBRACKET RETURN expr SEMICOLON RBRACKET

    LBRACKET        shift and go to state 184


state 179

    (89) recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .

    IGUAL           reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    SUMA            reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RESTA           reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    MUL             reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    DIV             reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    AND             reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    OR              reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LE              reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LT              reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GE              reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GT              reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    EQ              reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    SEMICOLON       reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RPARENT         reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    COMA            reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RBRACKET        reduce using rule 89 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)


state 180

    (94) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE . LBRACKET statement RBRACKET

    LBRACKET        shift and go to state 185


state 181

    (103) arg_list -> CSINCOMILLAS PUNTOS tipo COMA arg_list .

    RPARENT         reduce using rule 103 (arg_list -> CSINCOMILLAS PUNTOS tipo COMA arg_list .)


state 182

    (100) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement . RETURN expr SEMICOLON RBRACKET

    RETURN          shift and go to state 186


state 183

    (101) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN . expr SEMICOLON RBRACKET
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 187
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 184

    (98) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET . statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET . RETURN expr SEMICOLON RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . let id
    (32) assignment -> . var IGUAL expr
    (33) assignment -> . punto_valor IGUAL expr
    (34) assignment -> . corchete IGUAL expr
    (66) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (96) function -> . function_no_args
    (97) function -> . function_args
    (93) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (94) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (95) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (100) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (101) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (98) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    RETURN          shift and go to state 189
    let             shift and go to state 12
    TYPE            shift and go to state 16
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    CSINCOMILLAS    shift and go to state 17
    FUNCTION        shift and go to state 25

    statement                      shift and go to state 188
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    punto_valor                    shift and go to state 14
    corchete                       shift and go to state 15
    function_no_args               shift and go to state 18
    function_args                  shift and go to state 19
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 185

    (94) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET . statement RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . let id
    (32) assignment -> . var IGUAL expr
    (33) assignment -> . punto_valor IGUAL expr
    (34) assignment -> . corchete IGUAL expr
    (66) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (96) function -> . function_no_args
    (97) function -> . function_args
    (93) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (94) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (95) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (100) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (101) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (98) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    let             shift and go to state 12
    TYPE            shift and go to state 16
    IF              shift and go to state 20
    WHILE           shift and go to state 21
    CSINCOMILLAS    shift and go to state 17
    FUNCTION        shift and go to state 25

    statement                      shift and go to state 190
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    punto_valor                    shift and go to state 14
    corchete                       shift and go to state 15
    function_no_args               shift and go to state 18
    function_args                  shift and go to state 19
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 186

    (100) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN . expr SEMICOLON RBRACKET
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 191
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 187

    (101) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr . SEMICOLON RBRACKET
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 192
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103


state 188

    (98) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement . RETURN expr SEMICOLON RBRACKET

    RETURN          shift and go to state 193


state 189

    (99) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN . expr SEMICOLON RBRACKET
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 194
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 190

    (94) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement . RBRACKET

    RBRACKET        shift and go to state 195


state 191

    (100) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr . SEMICOLON RBRACKET
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 196
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103


state 192

    (101) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 197


state 193

    (98) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN . expr SEMICOLON RBRACKET
    (40) expr -> . operacion
    (41) expr -> . num
    (42) expr -> . bool
    (43) expr -> . NULL
    (44) expr -> . variable
    (45) expr -> . signos
    (46) expr -> . cadena
    (47) expr -> . ajson
    (48) expr -> . parentesis
    (49) expr -> . pc
    (50) expr -> . functioncall
    (51) operacion -> . aritmetica
    (52) operacion -> . binaria
    (53) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (35) variable -> . CSINCOMILLAS
    (38) signos -> . SUMA expr
    (39) signos -> . RESTA expr
    (36) cadena -> . CARACTER
    (75) ajson -> . LBRACKET object RBRACKET
    (37) parentesis -> . LPARENT expr RPARENT
    (83) pc -> . punto_valor
    (84) pc -> . corchete
    (104) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (105) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (54) aritmetica -> . expr SUMA expr
    (55) aritmetica -> . expr RESTA expr
    (56) aritmetica -> . expr MUL expr
    (57) aritmetica -> . expr DIV expr
    (58) binaria -> . expr AND expr
    (59) binaria -> . expr OR expr
    (60) binaria -> . NOT expr
    (61) comparation -> . expr LE expr
    (62) comparation -> . expr LT expr
    (63) comparation -> . expr GE expr
    (64) comparation -> . expr GT expr
    (65) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (80) punto_valor -> . punto1
    (81) punto_valor -> . punto2
    (82) punto_valor -> . punto_corchete
    (88) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (85) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (86) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (87) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 48
    TR              shift and go to state 61
    FL              shift and go to state 62
    CSINCOMILLAS    shift and go to state 63
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    CARACTER        shift and go to state 66
    LBRACKET        shift and go to state 67
    LPARENT         shift and go to state 68
    NOT             shift and go to state 71
    ENTERO          shift and go to state 72
    DECIMAL         shift and go to state 73

    expr                           shift and go to state 198
    operacion                      shift and go to state 45
    num                            shift and go to state 46
    bool                           shift and go to state 47
    variable                       shift and go to state 49
    signos                         shift and go to state 50
    cadena                         shift and go to state 51
    ajson                          shift and go to state 52
    parentesis                     shift and go to state 53
    pc                             shift and go to state 54
    functioncall                   shift and go to state 55
    aritmetica                     shift and go to state 56
    binaria                        shift and go to state 57
    comparation                    shift and go to state 58
    entero                         shift and go to state 59
    decimal                        shift and go to state 60
    punto_valor                    shift and go to state 69
    corchete                       shift and go to state 70
    punto1                         shift and go to state 22
    punto2                         shift and go to state 23
    punto_corchete                 shift and go to state 24

state 194

    (99) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr . SEMICOLON RBRACKET
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 199
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103


state 195

    (94) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .

    let             reduce using rule 94 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    TYPE            reduce using rule 94 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    IF              reduce using rule 94 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    WHILE           reduce using rule 94 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    CSINCOMILLAS    reduce using rule 94 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    FUNCTION        reduce using rule 94 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    $end            reduce using rule 94 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    RBRACKET        reduce using rule 94 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    RETURN          reduce using rule 94 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)


state 196

    (100) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 200


state 197

    (101) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .

    let             reduce using rule 101 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 101 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 101 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 101 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 101 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 101 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 101 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 101 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 101 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)


state 198

    (98) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr . SEMICOLON RBRACKET
    (54) aritmetica -> expr . SUMA expr
    (55) aritmetica -> expr . RESTA expr
    (56) aritmetica -> expr . MUL expr
    (57) aritmetica -> expr . DIV expr
    (58) binaria -> expr . AND expr
    (59) binaria -> expr . OR expr
    (61) comparation -> expr . LE expr
    (62) comparation -> expr . LT expr
    (63) comparation -> expr . GE expr
    (64) comparation -> expr . GT expr
    (65) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 201
    SUMA            shift and go to state 93
    RESTA           shift and go to state 94
    MUL             shift and go to state 95
    DIV             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    LE              shift and go to state 99
    LT              shift and go to state 100
    GE              shift and go to state 101
    GT              shift and go to state 102
    EQ              shift and go to state 103


state 199

    (99) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 202


state 200

    (100) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .

    let             reduce using rule 100 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 100 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 100 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 100 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 100 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 100 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 100 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 100 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 100 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)


state 201

    (98) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 203


state 202

    (99) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .

    let             reduce using rule 99 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 99 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 99 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 99 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 99 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 99 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 99 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 99 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 99 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)


state 203

    (98) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .

    let             reduce using rule 98 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 98 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 98 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 98 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 98 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 98 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 98 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 98 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 98 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)

