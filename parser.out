Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> empty
Rule 3     statement -> content SEMICOLON
Rule 4     statement -> content SEMICOLON statement
Rule 5     statement -> noSM statement
Rule 6     statement -> noSM
Rule 7     content -> declaration
Rule 8     content -> assignment
Rule 9     content -> definicion_ajson
Rule 10    noSM -> function
Rule 11    noSM -> condition
Rule 12    noSM -> loop
Rule 13    entero -> ENTERO
Rule 14    decimal -> DECIMAL
Rule 15    num -> entero
Rule 16    num -> decimal
Rule 17    bool -> TR
Rule 18    bool -> FL
Rule 19    declaration -> LET id
Rule 20    id -> var
Rule 21    id -> var COMA id
Rule 22    id -> var IGUAL expr
Rule 23    id -> var IGUAL expr COMA id
Rule 24    var -> CSINCOMILLAS
Rule 25    var -> CSINCOMILLAS PUNTOS tipo
Rule 26    tipo_ajson -> CSINCOMILLAS
Rule 27    tipo -> INT
Rule 28    tipo -> FLOAT
Rule 29    tipo -> CHARACTER
Rule 30    tipo -> BOOLEAN
Rule 31    tipo -> tipo_ajson
Rule 32    assignment -> var IGUAL expr
Rule 33    variable -> CSINCOMILLAS
Rule 34    cadena -> CARACTER
Rule 35    parentesis -> LPARENT expr RPARENT
Rule 36    signos -> SUMA expr
Rule 37    signos -> RESTA expr
Rule 38    expr -> operacion
Rule 39    expr -> num
Rule 40    expr -> bool
Rule 41    expr -> NULL
Rule 42    expr -> variable
Rule 43    expr -> signos
Rule 44    expr -> cadena
Rule 45    expr -> ajson
Rule 46    expr -> parentesis
Rule 47    expr -> pc
Rule 48    expr -> functioncall
Rule 49    operacion -> aritmetica
Rule 50    operacion -> binaria
Rule 51    operacion -> comparation
Rule 52    aritmetica -> expr SUMA expr
Rule 53    aritmetica -> expr RESTA expr
Rule 54    aritmetica -> expr MUL expr
Rule 55    aritmetica -> expr DIV expr
Rule 56    binaria -> expr AND expr
Rule 57    binaria -> expr OR expr
Rule 58    binaria -> NOT expr
Rule 59    comparation -> expr LE expr
Rule 60    comparation -> expr LT expr
Rule 61    comparation -> expr GE expr
Rule 62    comparation -> expr GT expr
Rule 63    comparation -> expr EQ expr
Rule 64    definicion_ajson -> TYPE CSINCOMILLAS IGUAL ajson_t
Rule 65    ajson_t -> LBRACKET object_t RBRACKET
Rule 66    object_t -> pair_t COMA object_t
Rule 67    object_t -> pair_t COMA
Rule 68    object_t -> pair_t
Rule 69    pair_t -> clave PUNTOS tipo
Rule 70    pair_t -> clave PUNTOS ajson_t
Rule 71    clave -> CCOMILLAS
Rule 72    clave -> CSINCOMILLAS
Rule 73    ajson -> LBRACKET object RBRACKET
Rule 74    object -> pair COMA object
Rule 75    object -> pair COMA
Rule 76    object -> pair
Rule 77    pair -> clave PUNTOS expr
Rule 78    punto_valor -> punto1
Rule 79    punto_valor -> punto2
Rule 80    punto_valor -> punto_corchete
Rule 81    pc -> punto_valor
Rule 82    pc -> corchete
Rule 83    punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS
Rule 84    punto2 -> CSINCOMILLAS PUNTO punto_valor
Rule 85    punto_corchete -> CSINCOMILLAS PUNTO corchete
Rule 86    corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
Rule 87    recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete
Rule 88    recur_corchete -> empty
Rule 89    recur_corchete -> PUNTO CSINCOMILLAS
Rule 90    recur_corchete -> PUNTO punto_valor
Rule 91    condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET
Rule 92    condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
Rule 93    loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
Rule 94    function -> function_no_args
Rule 95    function -> function_args
Rule 96    function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
Rule 97    function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
Rule 98    function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
Rule 99    function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
Rule 100   arg_list -> CSINCOMILLAS PUNTOS tipo
Rule 101   arg_list -> CSINCOMILLAS PUNTOS tipo COMA arg_list
Rule 102   functioncall -> CSINCOMILLAS LPARENT RPARENT
Rule 103   functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT
Rule 104   argumentos -> expr
Rule 105   argumentos -> expr COMA argumentos
Rule 106   empty -> <empty>

Terminals, with rules where they appear

AND                  : 56
BOOLEAN              : 30
CARACTER             : 34
CCOMILLAS            : 71 86 87
CHARACTER            : 29
COMA                 : 21 23 66 67 74 75 101 105
CSINCOMILLAS         : 24 25 26 33 64 72 83 83 84 85 86 89 96 97 98 99 100 101 102 103
DECIMAL              : 14
DIV                  : 55
ELSE                 : 92
ENTERO               : 13
EQ                   : 63
FL                   : 18
FLOAT                : 28
FUNCTION             : 96 97 98 99
GE                   : 61
GT                   : 62
IF                   : 91 92
IGUAL                : 22 23 32 64
INT                  : 27
LBRACKET             : 65 73 91 92 92 93 96 97 98 99
LCORCHETE            : 86 87
LE                   : 59
LET                  : 19
LPARENT              : 35 91 92 93 96 97 98 99 102 103
LT                   : 60
MUL                  : 54
NOT                  : 58
NULL                 : 41
OR                   : 57
PUNTO                : 83 84 85 89 90
PUNTOS               : 25 69 70 77 96 97 98 99 100 101
RBRACKET             : 65 73 91 92 92 93 96 97 98 99
RCORCHETE            : 86 87
RESTA                : 37 53
RETURN               : 96 97 98 99
RPARENT              : 35 91 92 93 96 97 98 99 102 103
SEMICOLON            : 3 4 96 97 98 99
SUMA                 : 36 52
TR                   : 17
TYPE                 : 64
WHILE                : 93
error                : 

Nonterminals, with rules where they appear

ajson                : 45
ajson_t              : 64 70
arg_list             : 96 97 101
argumentos           : 103 105
aritmetica           : 49
assignment           : 8
binaria              : 50
bool                 : 40
cadena               : 44
clave                : 69 70 77
comparation          : 51
condition            : 11
content              : 3 4
corchete             : 82 85
decimal              : 16
declaration          : 7
definicion_ajson     : 9
empty                : 2 88
entero               : 15
expr                 : 22 23 32 35 36 37 52 52 53 53 54 54 55 55 56 56 57 57 58 59 59 60 60 61 61 62 62 63 63 77 91 92 93 96 97 98 99 104 105
function             : 10
function_args        : 95
function_no_args     : 94
functioncall         : 48
id                   : 19 21 23
loop                 : 12
noSM                 : 5 6
num                  : 39
object               : 73 74
object_t             : 65 66
operacion            : 38
pair                 : 74 75 76
pair_t               : 66 67 68
parentesis           : 46
pc                   : 47
program              : 0
punto1               : 78
punto2               : 79
punto_corchete       : 80
punto_valor          : 81 84 90
recur_corchete       : 86 87
signos               : 43
statement            : 1 4 5 91 92 92 93 96 98
tipo                 : 25 69 96 97 98 99 100 101
tipo_ajson           : 31
var                  : 20 21 22 23 32
variable             : 42

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . empty
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (106) empty -> .
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (32) assignment -> . var IGUAL expr
    (64) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (94) function -> . function_no_args
    (95) function -> . function_args
    (91) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (92) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (93) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (98) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (96) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    $end            reduce using rule 106 (empty -> .)
    LET             shift and go to state 12
    TYPE            shift and go to state 14
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    CSINCOMILLAS    shift and go to state 15
    FUNCTION        shift and go to state 20

    program                        shift and go to state 1
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    function_no_args               shift and go to state 16
    function_args                  shift and go to state 17

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .

    $end            reduce using rule 1 (program -> statement .)


state 3

    (2) program -> empty .

    $end            reduce using rule 2 (program -> empty .)


state 4

    (3) statement -> content . SEMICOLON
    (4) statement -> content . SEMICOLON statement

    SEMICOLON       shift and go to state 21


state 5

    (5) statement -> noSM . statement
    (6) statement -> noSM .
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (32) assignment -> . var IGUAL expr
    (64) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (94) function -> . function_no_args
    (95) function -> . function_args
    (91) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (92) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (93) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (98) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (96) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    $end            reduce using rule 6 (statement -> noSM .)
    RBRACKET        reduce using rule 6 (statement -> noSM .)
    RETURN          reduce using rule 6 (statement -> noSM .)
    LET             shift and go to state 12
    TYPE            shift and go to state 14
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    CSINCOMILLAS    shift and go to state 15
    FUNCTION        shift and go to state 20

    noSM                           shift and go to state 5
    statement                      shift and go to state 22
    content                        shift and go to state 4
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    function_no_args               shift and go to state 16
    function_args                  shift and go to state 17

state 6

    (7) content -> declaration .

    SEMICOLON       reduce using rule 7 (content -> declaration .)


state 7

    (8) content -> assignment .

    SEMICOLON       reduce using rule 8 (content -> assignment .)


state 8

    (9) content -> definicion_ajson .

    SEMICOLON       reduce using rule 9 (content -> definicion_ajson .)


state 9

    (10) noSM -> function .

    LET             reduce using rule 10 (noSM -> function .)
    TYPE            reduce using rule 10 (noSM -> function .)
    IF              reduce using rule 10 (noSM -> function .)
    WHILE           reduce using rule 10 (noSM -> function .)
    CSINCOMILLAS    reduce using rule 10 (noSM -> function .)
    FUNCTION        reduce using rule 10 (noSM -> function .)
    $end            reduce using rule 10 (noSM -> function .)
    RBRACKET        reduce using rule 10 (noSM -> function .)
    RETURN          reduce using rule 10 (noSM -> function .)


state 10

    (11) noSM -> condition .

    LET             reduce using rule 11 (noSM -> condition .)
    TYPE            reduce using rule 11 (noSM -> condition .)
    IF              reduce using rule 11 (noSM -> condition .)
    WHILE           reduce using rule 11 (noSM -> condition .)
    CSINCOMILLAS    reduce using rule 11 (noSM -> condition .)
    FUNCTION        reduce using rule 11 (noSM -> condition .)
    $end            reduce using rule 11 (noSM -> condition .)
    RBRACKET        reduce using rule 11 (noSM -> condition .)
    RETURN          reduce using rule 11 (noSM -> condition .)


state 11

    (12) noSM -> loop .

    LET             reduce using rule 12 (noSM -> loop .)
    TYPE            reduce using rule 12 (noSM -> loop .)
    IF              reduce using rule 12 (noSM -> loop .)
    WHILE           reduce using rule 12 (noSM -> loop .)
    CSINCOMILLAS    reduce using rule 12 (noSM -> loop .)
    FUNCTION        reduce using rule 12 (noSM -> loop .)
    $end            reduce using rule 12 (noSM -> loop .)
    RBRACKET        reduce using rule 12 (noSM -> loop .)
    RETURN          reduce using rule 12 (noSM -> loop .)


state 12

    (19) declaration -> LET . id
    (20) id -> . var
    (21) id -> . var COMA id
    (22) id -> . var IGUAL expr
    (23) id -> . var IGUAL expr COMA id
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    CSINCOMILLAS    shift and go to state 15

    id                             shift and go to state 23
    var                            shift and go to state 24

state 13

    (32) assignment -> var . IGUAL expr

    IGUAL           shift and go to state 25


state 14

    (64) definicion_ajson -> TYPE . CSINCOMILLAS IGUAL ajson_t

    CSINCOMILLAS    shift and go to state 26


state 15

    (24) var -> CSINCOMILLAS .
    (25) var -> CSINCOMILLAS . PUNTOS tipo

    IGUAL           reduce using rule 24 (var -> CSINCOMILLAS .)
    COMA            reduce using rule 24 (var -> CSINCOMILLAS .)
    SEMICOLON       reduce using rule 24 (var -> CSINCOMILLAS .)
    PUNTOS          shift and go to state 27


state 16

    (94) function -> function_no_args .

    LET             reduce using rule 94 (function -> function_no_args .)
    TYPE            reduce using rule 94 (function -> function_no_args .)
    IF              reduce using rule 94 (function -> function_no_args .)
    WHILE           reduce using rule 94 (function -> function_no_args .)
    CSINCOMILLAS    reduce using rule 94 (function -> function_no_args .)
    FUNCTION        reduce using rule 94 (function -> function_no_args .)
    $end            reduce using rule 94 (function -> function_no_args .)
    RBRACKET        reduce using rule 94 (function -> function_no_args .)
    RETURN          reduce using rule 94 (function -> function_no_args .)


state 17

    (95) function -> function_args .

    LET             reduce using rule 95 (function -> function_args .)
    TYPE            reduce using rule 95 (function -> function_args .)
    IF              reduce using rule 95 (function -> function_args .)
    WHILE           reduce using rule 95 (function -> function_args .)
    CSINCOMILLAS    reduce using rule 95 (function -> function_args .)
    FUNCTION        reduce using rule 95 (function -> function_args .)
    $end            reduce using rule 95 (function -> function_args .)
    RBRACKET        reduce using rule 95 (function -> function_args .)
    RETURN          reduce using rule 95 (function -> function_args .)


state 18

    (91) condition -> IF . LPARENT expr RPARENT LBRACKET statement RBRACKET
    (92) condition -> IF . LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET

    LPARENT         shift and go to state 28


state 19

    (93) loop -> WHILE . LPARENT expr RPARENT LBRACKET statement RBRACKET

    LPARENT         shift and go to state 29


state 20

    (98) function_no_args -> FUNCTION . CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_no_args -> FUNCTION . CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (96) function_args -> FUNCTION . CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> FUNCTION . CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    CSINCOMILLAS    shift and go to state 30


state 21

    (3) statement -> content SEMICOLON .
    (4) statement -> content SEMICOLON . statement
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (32) assignment -> . var IGUAL expr
    (64) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (94) function -> . function_no_args
    (95) function -> . function_args
    (91) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (92) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (93) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (98) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (96) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    $end            reduce using rule 3 (statement -> content SEMICOLON .)
    RBRACKET        reduce using rule 3 (statement -> content SEMICOLON .)
    RETURN          reduce using rule 3 (statement -> content SEMICOLON .)
    LET             shift and go to state 12
    TYPE            shift and go to state 14
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    CSINCOMILLAS    shift and go to state 15
    FUNCTION        shift and go to state 20

    content                        shift and go to state 4
    statement                      shift and go to state 31
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    function_no_args               shift and go to state 16
    function_args                  shift and go to state 17

state 22

    (5) statement -> noSM statement .

    $end            reduce using rule 5 (statement -> noSM statement .)
    RBRACKET        reduce using rule 5 (statement -> noSM statement .)
    RETURN          reduce using rule 5 (statement -> noSM statement .)


state 23

    (19) declaration -> LET id .

    SEMICOLON       reduce using rule 19 (declaration -> LET id .)


state 24

    (20) id -> var .
    (21) id -> var . COMA id
    (22) id -> var . IGUAL expr
    (23) id -> var . IGUAL expr COMA id

    SEMICOLON       reduce using rule 20 (id -> var .)
    COMA            shift and go to state 32
    IGUAL           shift and go to state 33


state 25

    (32) assignment -> var IGUAL . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 34
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 26

    (64) definicion_ajson -> TYPE CSINCOMILLAS . IGUAL ajson_t

    IGUAL           shift and go to state 67


state 27

    (25) var -> CSINCOMILLAS PUNTOS . tipo
    (27) tipo -> . INT
    (28) tipo -> . FLOAT
    (29) tipo -> . CHARACTER
    (30) tipo -> . BOOLEAN
    (31) tipo -> . tipo_ajson
    (26) tipo_ajson -> . CSINCOMILLAS

    INT             shift and go to state 70
    FLOAT           shift and go to state 71
    CHARACTER       shift and go to state 72
    BOOLEAN         shift and go to state 73
    CSINCOMILLAS    shift and go to state 68

    tipo                           shift and go to state 69
    tipo_ajson                     shift and go to state 74

state 28

    (91) condition -> IF LPARENT . expr RPARENT LBRACKET statement RBRACKET
    (92) condition -> IF LPARENT . expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 75
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 29

    (93) loop -> WHILE LPARENT . expr RPARENT LBRACKET statement RBRACKET
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 76
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 30

    (98) function_no_args -> FUNCTION CSINCOMILLAS . LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_no_args -> FUNCTION CSINCOMILLAS . LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (96) function_args -> FUNCTION CSINCOMILLAS . LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> FUNCTION CSINCOMILLAS . LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    LPARENT         shift and go to state 77


state 31

    (4) statement -> content SEMICOLON statement .

    $end            reduce using rule 4 (statement -> content SEMICOLON statement .)
    RBRACKET        reduce using rule 4 (statement -> content SEMICOLON statement .)
    RETURN          reduce using rule 4 (statement -> content SEMICOLON statement .)


state 32

    (21) id -> var COMA . id
    (20) id -> . var
    (21) id -> . var COMA id
    (22) id -> . var IGUAL expr
    (23) id -> . var IGUAL expr COMA id
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    CSINCOMILLAS    shift and go to state 15

    var                            shift and go to state 24
    id                             shift and go to state 78

state 33

    (22) id -> var IGUAL . expr
    (23) id -> var IGUAL . expr COMA id
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 79
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 34

    (32) assignment -> var IGUAL expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    SEMICOLON       reduce using rule 32 (assignment -> var IGUAL expr .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    LE              shift and go to state 86
    LT              shift and go to state 87
    GE              shift and go to state 88
    GT              shift and go to state 89
    EQ              shift and go to state 90


state 35

    (38) expr -> operacion .

    SUMA            reduce using rule 38 (expr -> operacion .)
    RESTA           reduce using rule 38 (expr -> operacion .)
    MUL             reduce using rule 38 (expr -> operacion .)
    DIV             reduce using rule 38 (expr -> operacion .)
    AND             reduce using rule 38 (expr -> operacion .)
    OR              reduce using rule 38 (expr -> operacion .)
    LE              reduce using rule 38 (expr -> operacion .)
    LT              reduce using rule 38 (expr -> operacion .)
    GE              reduce using rule 38 (expr -> operacion .)
    GT              reduce using rule 38 (expr -> operacion .)
    EQ              reduce using rule 38 (expr -> operacion .)
    SEMICOLON       reduce using rule 38 (expr -> operacion .)
    RPARENT         reduce using rule 38 (expr -> operacion .)
    COMA            reduce using rule 38 (expr -> operacion .)
    RBRACKET        reduce using rule 38 (expr -> operacion .)


state 36

    (39) expr -> num .

    SUMA            reduce using rule 39 (expr -> num .)
    RESTA           reduce using rule 39 (expr -> num .)
    MUL             reduce using rule 39 (expr -> num .)
    DIV             reduce using rule 39 (expr -> num .)
    AND             reduce using rule 39 (expr -> num .)
    OR              reduce using rule 39 (expr -> num .)
    LE              reduce using rule 39 (expr -> num .)
    LT              reduce using rule 39 (expr -> num .)
    GE              reduce using rule 39 (expr -> num .)
    GT              reduce using rule 39 (expr -> num .)
    EQ              reduce using rule 39 (expr -> num .)
    SEMICOLON       reduce using rule 39 (expr -> num .)
    RPARENT         reduce using rule 39 (expr -> num .)
    COMA            reduce using rule 39 (expr -> num .)
    RBRACKET        reduce using rule 39 (expr -> num .)


state 37

    (40) expr -> bool .

    SUMA            reduce using rule 40 (expr -> bool .)
    RESTA           reduce using rule 40 (expr -> bool .)
    MUL             reduce using rule 40 (expr -> bool .)
    DIV             reduce using rule 40 (expr -> bool .)
    AND             reduce using rule 40 (expr -> bool .)
    OR              reduce using rule 40 (expr -> bool .)
    LE              reduce using rule 40 (expr -> bool .)
    LT              reduce using rule 40 (expr -> bool .)
    GE              reduce using rule 40 (expr -> bool .)
    GT              reduce using rule 40 (expr -> bool .)
    EQ              reduce using rule 40 (expr -> bool .)
    SEMICOLON       reduce using rule 40 (expr -> bool .)
    RPARENT         reduce using rule 40 (expr -> bool .)
    COMA            reduce using rule 40 (expr -> bool .)
    RBRACKET        reduce using rule 40 (expr -> bool .)


state 38

    (41) expr -> NULL .

    SUMA            reduce using rule 41 (expr -> NULL .)
    RESTA           reduce using rule 41 (expr -> NULL .)
    MUL             reduce using rule 41 (expr -> NULL .)
    DIV             reduce using rule 41 (expr -> NULL .)
    AND             reduce using rule 41 (expr -> NULL .)
    OR              reduce using rule 41 (expr -> NULL .)
    LE              reduce using rule 41 (expr -> NULL .)
    LT              reduce using rule 41 (expr -> NULL .)
    GE              reduce using rule 41 (expr -> NULL .)
    GT              reduce using rule 41 (expr -> NULL .)
    EQ              reduce using rule 41 (expr -> NULL .)
    SEMICOLON       reduce using rule 41 (expr -> NULL .)
    RPARENT         reduce using rule 41 (expr -> NULL .)
    COMA            reduce using rule 41 (expr -> NULL .)
    RBRACKET        reduce using rule 41 (expr -> NULL .)


state 39

    (42) expr -> variable .

    SUMA            reduce using rule 42 (expr -> variable .)
    RESTA           reduce using rule 42 (expr -> variable .)
    MUL             reduce using rule 42 (expr -> variable .)
    DIV             reduce using rule 42 (expr -> variable .)
    AND             reduce using rule 42 (expr -> variable .)
    OR              reduce using rule 42 (expr -> variable .)
    LE              reduce using rule 42 (expr -> variable .)
    LT              reduce using rule 42 (expr -> variable .)
    GE              reduce using rule 42 (expr -> variable .)
    GT              reduce using rule 42 (expr -> variable .)
    EQ              reduce using rule 42 (expr -> variable .)
    SEMICOLON       reduce using rule 42 (expr -> variable .)
    RPARENT         reduce using rule 42 (expr -> variable .)
    COMA            reduce using rule 42 (expr -> variable .)
    RBRACKET        reduce using rule 42 (expr -> variable .)


state 40

    (43) expr -> signos .

    SUMA            reduce using rule 43 (expr -> signos .)
    RESTA           reduce using rule 43 (expr -> signos .)
    MUL             reduce using rule 43 (expr -> signos .)
    DIV             reduce using rule 43 (expr -> signos .)
    AND             reduce using rule 43 (expr -> signos .)
    OR              reduce using rule 43 (expr -> signos .)
    LE              reduce using rule 43 (expr -> signos .)
    LT              reduce using rule 43 (expr -> signos .)
    GE              reduce using rule 43 (expr -> signos .)
    GT              reduce using rule 43 (expr -> signos .)
    EQ              reduce using rule 43 (expr -> signos .)
    SEMICOLON       reduce using rule 43 (expr -> signos .)
    RPARENT         reduce using rule 43 (expr -> signos .)
    COMA            reduce using rule 43 (expr -> signos .)
    RBRACKET        reduce using rule 43 (expr -> signos .)


state 41

    (44) expr -> cadena .

    SUMA            reduce using rule 44 (expr -> cadena .)
    RESTA           reduce using rule 44 (expr -> cadena .)
    MUL             reduce using rule 44 (expr -> cadena .)
    DIV             reduce using rule 44 (expr -> cadena .)
    AND             reduce using rule 44 (expr -> cadena .)
    OR              reduce using rule 44 (expr -> cadena .)
    LE              reduce using rule 44 (expr -> cadena .)
    LT              reduce using rule 44 (expr -> cadena .)
    GE              reduce using rule 44 (expr -> cadena .)
    GT              reduce using rule 44 (expr -> cadena .)
    EQ              reduce using rule 44 (expr -> cadena .)
    SEMICOLON       reduce using rule 44 (expr -> cadena .)
    RPARENT         reduce using rule 44 (expr -> cadena .)
    COMA            reduce using rule 44 (expr -> cadena .)
    RBRACKET        reduce using rule 44 (expr -> cadena .)


state 42

    (45) expr -> ajson .

    SUMA            reduce using rule 45 (expr -> ajson .)
    RESTA           reduce using rule 45 (expr -> ajson .)
    MUL             reduce using rule 45 (expr -> ajson .)
    DIV             reduce using rule 45 (expr -> ajson .)
    AND             reduce using rule 45 (expr -> ajson .)
    OR              reduce using rule 45 (expr -> ajson .)
    LE              reduce using rule 45 (expr -> ajson .)
    LT              reduce using rule 45 (expr -> ajson .)
    GE              reduce using rule 45 (expr -> ajson .)
    GT              reduce using rule 45 (expr -> ajson .)
    EQ              reduce using rule 45 (expr -> ajson .)
    SEMICOLON       reduce using rule 45 (expr -> ajson .)
    RPARENT         reduce using rule 45 (expr -> ajson .)
    COMA            reduce using rule 45 (expr -> ajson .)
    RBRACKET        reduce using rule 45 (expr -> ajson .)


state 43

    (46) expr -> parentesis .

    SUMA            reduce using rule 46 (expr -> parentesis .)
    RESTA           reduce using rule 46 (expr -> parentesis .)
    MUL             reduce using rule 46 (expr -> parentesis .)
    DIV             reduce using rule 46 (expr -> parentesis .)
    AND             reduce using rule 46 (expr -> parentesis .)
    OR              reduce using rule 46 (expr -> parentesis .)
    LE              reduce using rule 46 (expr -> parentesis .)
    LT              reduce using rule 46 (expr -> parentesis .)
    GE              reduce using rule 46 (expr -> parentesis .)
    GT              reduce using rule 46 (expr -> parentesis .)
    EQ              reduce using rule 46 (expr -> parentesis .)
    SEMICOLON       reduce using rule 46 (expr -> parentesis .)
    RPARENT         reduce using rule 46 (expr -> parentesis .)
    COMA            reduce using rule 46 (expr -> parentesis .)
    RBRACKET        reduce using rule 46 (expr -> parentesis .)


state 44

    (47) expr -> pc .

    SUMA            reduce using rule 47 (expr -> pc .)
    RESTA           reduce using rule 47 (expr -> pc .)
    MUL             reduce using rule 47 (expr -> pc .)
    DIV             reduce using rule 47 (expr -> pc .)
    AND             reduce using rule 47 (expr -> pc .)
    OR              reduce using rule 47 (expr -> pc .)
    LE              reduce using rule 47 (expr -> pc .)
    LT              reduce using rule 47 (expr -> pc .)
    GE              reduce using rule 47 (expr -> pc .)
    GT              reduce using rule 47 (expr -> pc .)
    EQ              reduce using rule 47 (expr -> pc .)
    SEMICOLON       reduce using rule 47 (expr -> pc .)
    RPARENT         reduce using rule 47 (expr -> pc .)
    COMA            reduce using rule 47 (expr -> pc .)
    RBRACKET        reduce using rule 47 (expr -> pc .)


state 45

    (48) expr -> functioncall .

    SUMA            reduce using rule 48 (expr -> functioncall .)
    RESTA           reduce using rule 48 (expr -> functioncall .)
    MUL             reduce using rule 48 (expr -> functioncall .)
    DIV             reduce using rule 48 (expr -> functioncall .)
    AND             reduce using rule 48 (expr -> functioncall .)
    OR              reduce using rule 48 (expr -> functioncall .)
    LE              reduce using rule 48 (expr -> functioncall .)
    LT              reduce using rule 48 (expr -> functioncall .)
    GE              reduce using rule 48 (expr -> functioncall .)
    GT              reduce using rule 48 (expr -> functioncall .)
    EQ              reduce using rule 48 (expr -> functioncall .)
    SEMICOLON       reduce using rule 48 (expr -> functioncall .)
    RPARENT         reduce using rule 48 (expr -> functioncall .)
    COMA            reduce using rule 48 (expr -> functioncall .)
    RBRACKET        reduce using rule 48 (expr -> functioncall .)


state 46

    (49) operacion -> aritmetica .

    SUMA            reduce using rule 49 (operacion -> aritmetica .)
    RESTA           reduce using rule 49 (operacion -> aritmetica .)
    MUL             reduce using rule 49 (operacion -> aritmetica .)
    DIV             reduce using rule 49 (operacion -> aritmetica .)
    AND             reduce using rule 49 (operacion -> aritmetica .)
    OR              reduce using rule 49 (operacion -> aritmetica .)
    LE              reduce using rule 49 (operacion -> aritmetica .)
    LT              reduce using rule 49 (operacion -> aritmetica .)
    GE              reduce using rule 49 (operacion -> aritmetica .)
    GT              reduce using rule 49 (operacion -> aritmetica .)
    EQ              reduce using rule 49 (operacion -> aritmetica .)
    SEMICOLON       reduce using rule 49 (operacion -> aritmetica .)
    RPARENT         reduce using rule 49 (operacion -> aritmetica .)
    COMA            reduce using rule 49 (operacion -> aritmetica .)
    RBRACKET        reduce using rule 49 (operacion -> aritmetica .)


state 47

    (50) operacion -> binaria .

    SUMA            reduce using rule 50 (operacion -> binaria .)
    RESTA           reduce using rule 50 (operacion -> binaria .)
    MUL             reduce using rule 50 (operacion -> binaria .)
    DIV             reduce using rule 50 (operacion -> binaria .)
    AND             reduce using rule 50 (operacion -> binaria .)
    OR              reduce using rule 50 (operacion -> binaria .)
    LE              reduce using rule 50 (operacion -> binaria .)
    LT              reduce using rule 50 (operacion -> binaria .)
    GE              reduce using rule 50 (operacion -> binaria .)
    GT              reduce using rule 50 (operacion -> binaria .)
    EQ              reduce using rule 50 (operacion -> binaria .)
    SEMICOLON       reduce using rule 50 (operacion -> binaria .)
    RPARENT         reduce using rule 50 (operacion -> binaria .)
    COMA            reduce using rule 50 (operacion -> binaria .)
    RBRACKET        reduce using rule 50 (operacion -> binaria .)


state 48

    (51) operacion -> comparation .

    SUMA            reduce using rule 51 (operacion -> comparation .)
    RESTA           reduce using rule 51 (operacion -> comparation .)
    MUL             reduce using rule 51 (operacion -> comparation .)
    DIV             reduce using rule 51 (operacion -> comparation .)
    AND             reduce using rule 51 (operacion -> comparation .)
    OR              reduce using rule 51 (operacion -> comparation .)
    LE              reduce using rule 51 (operacion -> comparation .)
    LT              reduce using rule 51 (operacion -> comparation .)
    GE              reduce using rule 51 (operacion -> comparation .)
    GT              reduce using rule 51 (operacion -> comparation .)
    EQ              reduce using rule 51 (operacion -> comparation .)
    SEMICOLON       reduce using rule 51 (operacion -> comparation .)
    RPARENT         reduce using rule 51 (operacion -> comparation .)
    COMA            reduce using rule 51 (operacion -> comparation .)
    RBRACKET        reduce using rule 51 (operacion -> comparation .)


state 49

    (15) num -> entero .

    SUMA            reduce using rule 15 (num -> entero .)
    RESTA           reduce using rule 15 (num -> entero .)
    MUL             reduce using rule 15 (num -> entero .)
    DIV             reduce using rule 15 (num -> entero .)
    AND             reduce using rule 15 (num -> entero .)
    OR              reduce using rule 15 (num -> entero .)
    LE              reduce using rule 15 (num -> entero .)
    LT              reduce using rule 15 (num -> entero .)
    GE              reduce using rule 15 (num -> entero .)
    GT              reduce using rule 15 (num -> entero .)
    EQ              reduce using rule 15 (num -> entero .)
    SEMICOLON       reduce using rule 15 (num -> entero .)
    RPARENT         reduce using rule 15 (num -> entero .)
    COMA            reduce using rule 15 (num -> entero .)
    RBRACKET        reduce using rule 15 (num -> entero .)


state 50

    (16) num -> decimal .

    SUMA            reduce using rule 16 (num -> decimal .)
    RESTA           reduce using rule 16 (num -> decimal .)
    MUL             reduce using rule 16 (num -> decimal .)
    DIV             reduce using rule 16 (num -> decimal .)
    AND             reduce using rule 16 (num -> decimal .)
    OR              reduce using rule 16 (num -> decimal .)
    LE              reduce using rule 16 (num -> decimal .)
    LT              reduce using rule 16 (num -> decimal .)
    GE              reduce using rule 16 (num -> decimal .)
    GT              reduce using rule 16 (num -> decimal .)
    EQ              reduce using rule 16 (num -> decimal .)
    SEMICOLON       reduce using rule 16 (num -> decimal .)
    RPARENT         reduce using rule 16 (num -> decimal .)
    COMA            reduce using rule 16 (num -> decimal .)
    RBRACKET        reduce using rule 16 (num -> decimal .)


state 51

    (17) bool -> TR .

    SUMA            reduce using rule 17 (bool -> TR .)
    RESTA           reduce using rule 17 (bool -> TR .)
    MUL             reduce using rule 17 (bool -> TR .)
    DIV             reduce using rule 17 (bool -> TR .)
    AND             reduce using rule 17 (bool -> TR .)
    OR              reduce using rule 17 (bool -> TR .)
    LE              reduce using rule 17 (bool -> TR .)
    LT              reduce using rule 17 (bool -> TR .)
    GE              reduce using rule 17 (bool -> TR .)
    GT              reduce using rule 17 (bool -> TR .)
    EQ              reduce using rule 17 (bool -> TR .)
    SEMICOLON       reduce using rule 17 (bool -> TR .)
    RPARENT         reduce using rule 17 (bool -> TR .)
    COMA            reduce using rule 17 (bool -> TR .)
    RBRACKET        reduce using rule 17 (bool -> TR .)


state 52

    (18) bool -> FL .

    SUMA            reduce using rule 18 (bool -> FL .)
    RESTA           reduce using rule 18 (bool -> FL .)
    MUL             reduce using rule 18 (bool -> FL .)
    DIV             reduce using rule 18 (bool -> FL .)
    AND             reduce using rule 18 (bool -> FL .)
    OR              reduce using rule 18 (bool -> FL .)
    LE              reduce using rule 18 (bool -> FL .)
    LT              reduce using rule 18 (bool -> FL .)
    GE              reduce using rule 18 (bool -> FL .)
    GT              reduce using rule 18 (bool -> FL .)
    EQ              reduce using rule 18 (bool -> FL .)
    SEMICOLON       reduce using rule 18 (bool -> FL .)
    RPARENT         reduce using rule 18 (bool -> FL .)
    COMA            reduce using rule 18 (bool -> FL .)
    RBRACKET        reduce using rule 18 (bool -> FL .)


state 53

    (33) variable -> CSINCOMILLAS .
    (102) functioncall -> CSINCOMILLAS . LPARENT RPARENT
    (103) functioncall -> CSINCOMILLAS . LPARENT argumentos RPARENT
    (86) corchete -> CSINCOMILLAS . LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> CSINCOMILLAS . PUNTO CSINCOMILLAS
    (84) punto2 -> CSINCOMILLAS . PUNTO punto_valor
    (85) punto_corchete -> CSINCOMILLAS . PUNTO corchete

    SUMA            reduce using rule 33 (variable -> CSINCOMILLAS .)
    RESTA           reduce using rule 33 (variable -> CSINCOMILLAS .)
    MUL             reduce using rule 33 (variable -> CSINCOMILLAS .)
    DIV             reduce using rule 33 (variable -> CSINCOMILLAS .)
    AND             reduce using rule 33 (variable -> CSINCOMILLAS .)
    OR              reduce using rule 33 (variable -> CSINCOMILLAS .)
    LE              reduce using rule 33 (variable -> CSINCOMILLAS .)
    LT              reduce using rule 33 (variable -> CSINCOMILLAS .)
    GE              reduce using rule 33 (variable -> CSINCOMILLAS .)
    GT              reduce using rule 33 (variable -> CSINCOMILLAS .)
    EQ              reduce using rule 33 (variable -> CSINCOMILLAS .)
    SEMICOLON       reduce using rule 33 (variable -> CSINCOMILLAS .)
    RPARENT         reduce using rule 33 (variable -> CSINCOMILLAS .)
    COMA            reduce using rule 33 (variable -> CSINCOMILLAS .)
    RBRACKET        reduce using rule 33 (variable -> CSINCOMILLAS .)
    LPARENT         shift and go to state 91
    LCORCHETE       shift and go to state 92
    PUNTO           shift and go to state 93


state 54

    (36) signos -> SUMA . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 94
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 55

    (37) signos -> RESTA . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 95
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 56

    (34) cadena -> CARACTER .

    SUMA            reduce using rule 34 (cadena -> CARACTER .)
    RESTA           reduce using rule 34 (cadena -> CARACTER .)
    MUL             reduce using rule 34 (cadena -> CARACTER .)
    DIV             reduce using rule 34 (cadena -> CARACTER .)
    AND             reduce using rule 34 (cadena -> CARACTER .)
    OR              reduce using rule 34 (cadena -> CARACTER .)
    LE              reduce using rule 34 (cadena -> CARACTER .)
    LT              reduce using rule 34 (cadena -> CARACTER .)
    GE              reduce using rule 34 (cadena -> CARACTER .)
    GT              reduce using rule 34 (cadena -> CARACTER .)
    EQ              reduce using rule 34 (cadena -> CARACTER .)
    SEMICOLON       reduce using rule 34 (cadena -> CARACTER .)
    RPARENT         reduce using rule 34 (cadena -> CARACTER .)
    COMA            reduce using rule 34 (cadena -> CARACTER .)
    RBRACKET        reduce using rule 34 (cadena -> CARACTER .)


state 57

    (73) ajson -> LBRACKET . object RBRACKET
    (74) object -> . pair COMA object
    (75) object -> . pair COMA
    (76) object -> . pair
    (77) pair -> . clave PUNTOS expr
    (71) clave -> . CCOMILLAS
    (72) clave -> . CSINCOMILLAS

    CCOMILLAS       shift and go to state 99
    CSINCOMILLAS    shift and go to state 100

    object                         shift and go to state 96
    pair                           shift and go to state 97
    clave                          shift and go to state 98

state 58

    (35) parentesis -> LPARENT . expr RPARENT
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 101
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 59

    (81) pc -> punto_valor .

    SUMA            reduce using rule 81 (pc -> punto_valor .)
    RESTA           reduce using rule 81 (pc -> punto_valor .)
    MUL             reduce using rule 81 (pc -> punto_valor .)
    DIV             reduce using rule 81 (pc -> punto_valor .)
    AND             reduce using rule 81 (pc -> punto_valor .)
    OR              reduce using rule 81 (pc -> punto_valor .)
    LE              reduce using rule 81 (pc -> punto_valor .)
    LT              reduce using rule 81 (pc -> punto_valor .)
    GE              reduce using rule 81 (pc -> punto_valor .)
    GT              reduce using rule 81 (pc -> punto_valor .)
    EQ              reduce using rule 81 (pc -> punto_valor .)
    SEMICOLON       reduce using rule 81 (pc -> punto_valor .)
    RPARENT         reduce using rule 81 (pc -> punto_valor .)
    COMA            reduce using rule 81 (pc -> punto_valor .)
    RBRACKET        reduce using rule 81 (pc -> punto_valor .)


state 60

    (82) pc -> corchete .

    SUMA            reduce using rule 82 (pc -> corchete .)
    RESTA           reduce using rule 82 (pc -> corchete .)
    MUL             reduce using rule 82 (pc -> corchete .)
    DIV             reduce using rule 82 (pc -> corchete .)
    AND             reduce using rule 82 (pc -> corchete .)
    OR              reduce using rule 82 (pc -> corchete .)
    LE              reduce using rule 82 (pc -> corchete .)
    LT              reduce using rule 82 (pc -> corchete .)
    GE              reduce using rule 82 (pc -> corchete .)
    GT              reduce using rule 82 (pc -> corchete .)
    EQ              reduce using rule 82 (pc -> corchete .)
    SEMICOLON       reduce using rule 82 (pc -> corchete .)
    RPARENT         reduce using rule 82 (pc -> corchete .)
    COMA            reduce using rule 82 (pc -> corchete .)
    RBRACKET        reduce using rule 82 (pc -> corchete .)


state 61

    (58) binaria -> NOT . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 102
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 62

    (13) entero -> ENTERO .

    SUMA            reduce using rule 13 (entero -> ENTERO .)
    RESTA           reduce using rule 13 (entero -> ENTERO .)
    MUL             reduce using rule 13 (entero -> ENTERO .)
    DIV             reduce using rule 13 (entero -> ENTERO .)
    AND             reduce using rule 13 (entero -> ENTERO .)
    OR              reduce using rule 13 (entero -> ENTERO .)
    LE              reduce using rule 13 (entero -> ENTERO .)
    LT              reduce using rule 13 (entero -> ENTERO .)
    GE              reduce using rule 13 (entero -> ENTERO .)
    GT              reduce using rule 13 (entero -> ENTERO .)
    EQ              reduce using rule 13 (entero -> ENTERO .)
    SEMICOLON       reduce using rule 13 (entero -> ENTERO .)
    RPARENT         reduce using rule 13 (entero -> ENTERO .)
    COMA            reduce using rule 13 (entero -> ENTERO .)
    RBRACKET        reduce using rule 13 (entero -> ENTERO .)


state 63

    (14) decimal -> DECIMAL .

    SUMA            reduce using rule 14 (decimal -> DECIMAL .)
    RESTA           reduce using rule 14 (decimal -> DECIMAL .)
    MUL             reduce using rule 14 (decimal -> DECIMAL .)
    DIV             reduce using rule 14 (decimal -> DECIMAL .)
    AND             reduce using rule 14 (decimal -> DECIMAL .)
    OR              reduce using rule 14 (decimal -> DECIMAL .)
    LE              reduce using rule 14 (decimal -> DECIMAL .)
    LT              reduce using rule 14 (decimal -> DECIMAL .)
    GE              reduce using rule 14 (decimal -> DECIMAL .)
    GT              reduce using rule 14 (decimal -> DECIMAL .)
    EQ              reduce using rule 14 (decimal -> DECIMAL .)
    SEMICOLON       reduce using rule 14 (decimal -> DECIMAL .)
    RPARENT         reduce using rule 14 (decimal -> DECIMAL .)
    COMA            reduce using rule 14 (decimal -> DECIMAL .)
    RBRACKET        reduce using rule 14 (decimal -> DECIMAL .)


state 64

    (78) punto_valor -> punto1 .

    SUMA            reduce using rule 78 (punto_valor -> punto1 .)
    RESTA           reduce using rule 78 (punto_valor -> punto1 .)
    MUL             reduce using rule 78 (punto_valor -> punto1 .)
    DIV             reduce using rule 78 (punto_valor -> punto1 .)
    AND             reduce using rule 78 (punto_valor -> punto1 .)
    OR              reduce using rule 78 (punto_valor -> punto1 .)
    LE              reduce using rule 78 (punto_valor -> punto1 .)
    LT              reduce using rule 78 (punto_valor -> punto1 .)
    GE              reduce using rule 78 (punto_valor -> punto1 .)
    GT              reduce using rule 78 (punto_valor -> punto1 .)
    EQ              reduce using rule 78 (punto_valor -> punto1 .)
    SEMICOLON       reduce using rule 78 (punto_valor -> punto1 .)
    RPARENT         reduce using rule 78 (punto_valor -> punto1 .)
    COMA            reduce using rule 78 (punto_valor -> punto1 .)
    RBRACKET        reduce using rule 78 (punto_valor -> punto1 .)


state 65

    (79) punto_valor -> punto2 .

    SUMA            reduce using rule 79 (punto_valor -> punto2 .)
    RESTA           reduce using rule 79 (punto_valor -> punto2 .)
    MUL             reduce using rule 79 (punto_valor -> punto2 .)
    DIV             reduce using rule 79 (punto_valor -> punto2 .)
    AND             reduce using rule 79 (punto_valor -> punto2 .)
    OR              reduce using rule 79 (punto_valor -> punto2 .)
    LE              reduce using rule 79 (punto_valor -> punto2 .)
    LT              reduce using rule 79 (punto_valor -> punto2 .)
    GE              reduce using rule 79 (punto_valor -> punto2 .)
    GT              reduce using rule 79 (punto_valor -> punto2 .)
    EQ              reduce using rule 79 (punto_valor -> punto2 .)
    SEMICOLON       reduce using rule 79 (punto_valor -> punto2 .)
    RPARENT         reduce using rule 79 (punto_valor -> punto2 .)
    COMA            reduce using rule 79 (punto_valor -> punto2 .)
    RBRACKET        reduce using rule 79 (punto_valor -> punto2 .)


state 66

    (80) punto_valor -> punto_corchete .

    SUMA            reduce using rule 80 (punto_valor -> punto_corchete .)
    RESTA           reduce using rule 80 (punto_valor -> punto_corchete .)
    MUL             reduce using rule 80 (punto_valor -> punto_corchete .)
    DIV             reduce using rule 80 (punto_valor -> punto_corchete .)
    AND             reduce using rule 80 (punto_valor -> punto_corchete .)
    OR              reduce using rule 80 (punto_valor -> punto_corchete .)
    LE              reduce using rule 80 (punto_valor -> punto_corchete .)
    LT              reduce using rule 80 (punto_valor -> punto_corchete .)
    GE              reduce using rule 80 (punto_valor -> punto_corchete .)
    GT              reduce using rule 80 (punto_valor -> punto_corchete .)
    EQ              reduce using rule 80 (punto_valor -> punto_corchete .)
    SEMICOLON       reduce using rule 80 (punto_valor -> punto_corchete .)
    RPARENT         reduce using rule 80 (punto_valor -> punto_corchete .)
    COMA            reduce using rule 80 (punto_valor -> punto_corchete .)
    RBRACKET        reduce using rule 80 (punto_valor -> punto_corchete .)


state 67

    (64) definicion_ajson -> TYPE CSINCOMILLAS IGUAL . ajson_t
    (65) ajson_t -> . LBRACKET object_t RBRACKET

    LBRACKET        shift and go to state 104

    ajson_t                        shift and go to state 103

state 68

    (26) tipo_ajson -> CSINCOMILLAS .

    IGUAL           reduce using rule 26 (tipo_ajson -> CSINCOMILLAS .)
    COMA            reduce using rule 26 (tipo_ajson -> CSINCOMILLAS .)
    SEMICOLON       reduce using rule 26 (tipo_ajson -> CSINCOMILLAS .)
    RPARENT         reduce using rule 26 (tipo_ajson -> CSINCOMILLAS .)
    LBRACKET        reduce using rule 26 (tipo_ajson -> CSINCOMILLAS .)
    RBRACKET        reduce using rule 26 (tipo_ajson -> CSINCOMILLAS .)


state 69

    (25) var -> CSINCOMILLAS PUNTOS tipo .

    IGUAL           reduce using rule 25 (var -> CSINCOMILLAS PUNTOS tipo .)
    COMA            reduce using rule 25 (var -> CSINCOMILLAS PUNTOS tipo .)
    SEMICOLON       reduce using rule 25 (var -> CSINCOMILLAS PUNTOS tipo .)


state 70

    (27) tipo -> INT .

    IGUAL           reduce using rule 27 (tipo -> INT .)
    COMA            reduce using rule 27 (tipo -> INT .)
    SEMICOLON       reduce using rule 27 (tipo -> INT .)
    RPARENT         reduce using rule 27 (tipo -> INT .)
    LBRACKET        reduce using rule 27 (tipo -> INT .)
    RBRACKET        reduce using rule 27 (tipo -> INT .)


state 71

    (28) tipo -> FLOAT .

    IGUAL           reduce using rule 28 (tipo -> FLOAT .)
    COMA            reduce using rule 28 (tipo -> FLOAT .)
    SEMICOLON       reduce using rule 28 (tipo -> FLOAT .)
    RPARENT         reduce using rule 28 (tipo -> FLOAT .)
    LBRACKET        reduce using rule 28 (tipo -> FLOAT .)
    RBRACKET        reduce using rule 28 (tipo -> FLOAT .)


state 72

    (29) tipo -> CHARACTER .

    IGUAL           reduce using rule 29 (tipo -> CHARACTER .)
    COMA            reduce using rule 29 (tipo -> CHARACTER .)
    SEMICOLON       reduce using rule 29 (tipo -> CHARACTER .)
    RPARENT         reduce using rule 29 (tipo -> CHARACTER .)
    LBRACKET        reduce using rule 29 (tipo -> CHARACTER .)
    RBRACKET        reduce using rule 29 (tipo -> CHARACTER .)


state 73

    (30) tipo -> BOOLEAN .

    IGUAL           reduce using rule 30 (tipo -> BOOLEAN .)
    COMA            reduce using rule 30 (tipo -> BOOLEAN .)
    SEMICOLON       reduce using rule 30 (tipo -> BOOLEAN .)
    RPARENT         reduce using rule 30 (tipo -> BOOLEAN .)
    LBRACKET        reduce using rule 30 (tipo -> BOOLEAN .)
    RBRACKET        reduce using rule 30 (tipo -> BOOLEAN .)


state 74

    (31) tipo -> tipo_ajson .

    IGUAL           reduce using rule 31 (tipo -> tipo_ajson .)
    COMA            reduce using rule 31 (tipo -> tipo_ajson .)
    SEMICOLON       reduce using rule 31 (tipo -> tipo_ajson .)
    RPARENT         reduce using rule 31 (tipo -> tipo_ajson .)
    LBRACKET        reduce using rule 31 (tipo -> tipo_ajson .)
    RBRACKET        reduce using rule 31 (tipo -> tipo_ajson .)


state 75

    (91) condition -> IF LPARENT expr . RPARENT LBRACKET statement RBRACKET
    (92) condition -> IF LPARENT expr . RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    RPARENT         shift and go to state 105
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    LE              shift and go to state 86
    LT              shift and go to state 87
    GE              shift and go to state 88
    GT              shift and go to state 89
    EQ              shift and go to state 90


state 76

    (93) loop -> WHILE LPARENT expr . RPARENT LBRACKET statement RBRACKET
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    RPARENT         shift and go to state 106
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    LE              shift and go to state 86
    LT              shift and go to state 87
    GE              shift and go to state 88
    GT              shift and go to state 89
    EQ              shift and go to state 90


state 77

    (98) function_no_args -> FUNCTION CSINCOMILLAS LPARENT . RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_no_args -> FUNCTION CSINCOMILLAS LPARENT . RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (96) function_args -> FUNCTION CSINCOMILLAS LPARENT . arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> FUNCTION CSINCOMILLAS LPARENT . arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (100) arg_list -> . CSINCOMILLAS PUNTOS tipo
    (101) arg_list -> . CSINCOMILLAS PUNTOS tipo COMA arg_list

    RPARENT         shift and go to state 108
    CSINCOMILLAS    shift and go to state 107

    arg_list                       shift and go to state 109

state 78

    (21) id -> var COMA id .

    SEMICOLON       reduce using rule 21 (id -> var COMA id .)


state 79

    (22) id -> var IGUAL expr .
    (23) id -> var IGUAL expr . COMA id
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    SEMICOLON       reduce using rule 22 (id -> var IGUAL expr .)
    COMA            shift and go to state 110
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    LE              shift and go to state 86
    LT              shift and go to state 87
    GE              shift and go to state 88
    GT              shift and go to state 89
    EQ              shift and go to state 90


state 80

    (52) aritmetica -> expr SUMA . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 111
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 81

    (53) aritmetica -> expr RESTA . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 112
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 82

    (54) aritmetica -> expr MUL . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 113
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 83

    (55) aritmetica -> expr DIV . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 114
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 84

    (56) binaria -> expr AND . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 115
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 85

    (57) binaria -> expr OR . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 116
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 86

    (59) comparation -> expr LE . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 117
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 87

    (60) comparation -> expr LT . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 118
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 88

    (61) comparation -> expr GE . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 119
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 89

    (62) comparation -> expr GT . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 120
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 90

    (63) comparation -> expr EQ . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 121
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 91

    (102) functioncall -> CSINCOMILLAS LPARENT . RPARENT
    (103) functioncall -> CSINCOMILLAS LPARENT . argumentos RPARENT
    (104) argumentos -> . expr
    (105) argumentos -> . expr COMA argumentos
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    RPARENT         shift and go to state 122
    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    argumentos                     shift and go to state 123
    expr                           shift and go to state 124
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 92

    (86) corchete -> CSINCOMILLAS LCORCHETE . CCOMILLAS RCORCHETE recur_corchete

    CCOMILLAS       shift and go to state 125


state 93

    (83) punto1 -> CSINCOMILLAS PUNTO . CSINCOMILLAS
    (84) punto2 -> CSINCOMILLAS PUNTO . punto_valor
    (85) punto_corchete -> CSINCOMILLAS PUNTO . corchete
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    CSINCOMILLAS    shift and go to state 126

    punto_valor                    shift and go to state 127
    corchete                       shift and go to state 128
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 94

    (36) signos -> SUMA expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    SUMA            reduce using rule 36 (signos -> SUMA expr .)
    RESTA           reduce using rule 36 (signos -> SUMA expr .)
    MUL             reduce using rule 36 (signos -> SUMA expr .)
    DIV             reduce using rule 36 (signos -> SUMA expr .)
    AND             reduce using rule 36 (signos -> SUMA expr .)
    OR              reduce using rule 36 (signos -> SUMA expr .)
    LE              reduce using rule 36 (signos -> SUMA expr .)
    LT              reduce using rule 36 (signos -> SUMA expr .)
    GE              reduce using rule 36 (signos -> SUMA expr .)
    GT              reduce using rule 36 (signos -> SUMA expr .)
    EQ              reduce using rule 36 (signos -> SUMA expr .)
    SEMICOLON       reduce using rule 36 (signos -> SUMA expr .)
    RPARENT         reduce using rule 36 (signos -> SUMA expr .)
    COMA            reduce using rule 36 (signos -> SUMA expr .)
    RBRACKET        reduce using rule 36 (signos -> SUMA expr .)

  ! SUMA            [ shift and go to state 80 ]
  ! RESTA           [ shift and go to state 81 ]
  ! MUL             [ shift and go to state 82 ]
  ! DIV             [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LE              [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! GE              [ shift and go to state 88 ]
  ! GT              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]


state 95

    (37) signos -> RESTA expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    SUMA            reduce using rule 37 (signos -> RESTA expr .)
    RESTA           reduce using rule 37 (signos -> RESTA expr .)
    MUL             reduce using rule 37 (signos -> RESTA expr .)
    DIV             reduce using rule 37 (signos -> RESTA expr .)
    AND             reduce using rule 37 (signos -> RESTA expr .)
    OR              reduce using rule 37 (signos -> RESTA expr .)
    LE              reduce using rule 37 (signos -> RESTA expr .)
    LT              reduce using rule 37 (signos -> RESTA expr .)
    GE              reduce using rule 37 (signos -> RESTA expr .)
    GT              reduce using rule 37 (signos -> RESTA expr .)
    EQ              reduce using rule 37 (signos -> RESTA expr .)
    SEMICOLON       reduce using rule 37 (signos -> RESTA expr .)
    RPARENT         reduce using rule 37 (signos -> RESTA expr .)
    COMA            reduce using rule 37 (signos -> RESTA expr .)
    RBRACKET        reduce using rule 37 (signos -> RESTA expr .)

  ! SUMA            [ shift and go to state 80 ]
  ! RESTA           [ shift and go to state 81 ]
  ! MUL             [ shift and go to state 82 ]
  ! DIV             [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LE              [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! GE              [ shift and go to state 88 ]
  ! GT              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]


state 96

    (73) ajson -> LBRACKET object . RBRACKET

    RBRACKET        shift and go to state 129


state 97

    (74) object -> pair . COMA object
    (75) object -> pair . COMA
    (76) object -> pair .

    COMA            shift and go to state 130
    RBRACKET        reduce using rule 76 (object -> pair .)


state 98

    (77) pair -> clave . PUNTOS expr

    PUNTOS          shift and go to state 131


state 99

    (71) clave -> CCOMILLAS .

    PUNTOS          reduce using rule 71 (clave -> CCOMILLAS .)


state 100

    (72) clave -> CSINCOMILLAS .

    PUNTOS          reduce using rule 72 (clave -> CSINCOMILLAS .)


state 101

    (35) parentesis -> LPARENT expr . RPARENT
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    RPARENT         shift and go to state 132
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    LE              shift and go to state 86
    LT              shift and go to state 87
    GE              shift and go to state 88
    GT              shift and go to state 89
    EQ              shift and go to state 90


state 102

    (58) binaria -> NOT expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    SEMICOLON       reduce using rule 58 (binaria -> NOT expr .)
    RPARENT         reduce using rule 58 (binaria -> NOT expr .)
    COMA            reduce using rule 58 (binaria -> NOT expr .)
    RBRACKET        reduce using rule 58 (binaria -> NOT expr .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    LE              shift and go to state 86
    LT              shift and go to state 87
    GE              shift and go to state 88
    GT              shift and go to state 89
    EQ              shift and go to state 90

  ! SUMA            [ reduce using rule 58 (binaria -> NOT expr .) ]
  ! RESTA           [ reduce using rule 58 (binaria -> NOT expr .) ]
  ! MUL             [ reduce using rule 58 (binaria -> NOT expr .) ]
  ! DIV             [ reduce using rule 58 (binaria -> NOT expr .) ]
  ! AND             [ reduce using rule 58 (binaria -> NOT expr .) ]
  ! OR              [ reduce using rule 58 (binaria -> NOT expr .) ]
  ! LE              [ reduce using rule 58 (binaria -> NOT expr .) ]
  ! LT              [ reduce using rule 58 (binaria -> NOT expr .) ]
  ! GE              [ reduce using rule 58 (binaria -> NOT expr .) ]
  ! GT              [ reduce using rule 58 (binaria -> NOT expr .) ]
  ! EQ              [ reduce using rule 58 (binaria -> NOT expr .) ]


state 103

    (64) definicion_ajson -> TYPE CSINCOMILLAS IGUAL ajson_t .

    SEMICOLON       reduce using rule 64 (definicion_ajson -> TYPE CSINCOMILLAS IGUAL ajson_t .)


state 104

    (65) ajson_t -> LBRACKET . object_t RBRACKET
    (66) object_t -> . pair_t COMA object_t
    (67) object_t -> . pair_t COMA
    (68) object_t -> . pair_t
    (69) pair_t -> . clave PUNTOS tipo
    (70) pair_t -> . clave PUNTOS ajson_t
    (71) clave -> . CCOMILLAS
    (72) clave -> . CSINCOMILLAS

    CCOMILLAS       shift and go to state 99
    CSINCOMILLAS    shift and go to state 100

    object_t                       shift and go to state 133
    pair_t                         shift and go to state 134
    clave                          shift and go to state 135

state 105

    (91) condition -> IF LPARENT expr RPARENT . LBRACKET statement RBRACKET
    (92) condition -> IF LPARENT expr RPARENT . LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET

    LBRACKET        shift and go to state 136


state 106

    (93) loop -> WHILE LPARENT expr RPARENT . LBRACKET statement RBRACKET

    LBRACKET        shift and go to state 137


state 107

    (100) arg_list -> CSINCOMILLAS . PUNTOS tipo
    (101) arg_list -> CSINCOMILLAS . PUNTOS tipo COMA arg_list

    PUNTOS          shift and go to state 138


state 108

    (98) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT . PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT . PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    PUNTOS          shift and go to state 139


state 109

    (96) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list . RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list . RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    RPARENT         shift and go to state 140


state 110

    (23) id -> var IGUAL expr COMA . id
    (20) id -> . var
    (21) id -> . var COMA id
    (22) id -> . var IGUAL expr
    (23) id -> . var IGUAL expr COMA id
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    CSINCOMILLAS    shift and go to state 15

    var                            shift and go to state 24
    id                             shift and go to state 141

state 111

    (52) aritmetica -> expr SUMA expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    SUMA            reduce using rule 52 (aritmetica -> expr SUMA expr .)
    RESTA           reduce using rule 52 (aritmetica -> expr SUMA expr .)
    AND             reduce using rule 52 (aritmetica -> expr SUMA expr .)
    OR              reduce using rule 52 (aritmetica -> expr SUMA expr .)
    LE              reduce using rule 52 (aritmetica -> expr SUMA expr .)
    LT              reduce using rule 52 (aritmetica -> expr SUMA expr .)
    GE              reduce using rule 52 (aritmetica -> expr SUMA expr .)
    GT              reduce using rule 52 (aritmetica -> expr SUMA expr .)
    EQ              reduce using rule 52 (aritmetica -> expr SUMA expr .)
    SEMICOLON       reduce using rule 52 (aritmetica -> expr SUMA expr .)
    RPARENT         reduce using rule 52 (aritmetica -> expr SUMA expr .)
    COMA            reduce using rule 52 (aritmetica -> expr SUMA expr .)
    RBRACKET        reduce using rule 52 (aritmetica -> expr SUMA expr .)
    MUL             shift and go to state 82
    DIV             shift and go to state 83

  ! MUL             [ reduce using rule 52 (aritmetica -> expr SUMA expr .) ]
  ! DIV             [ reduce using rule 52 (aritmetica -> expr SUMA expr .) ]
  ! SUMA            [ shift and go to state 80 ]
  ! RESTA           [ shift and go to state 81 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LE              [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! GE              [ shift and go to state 88 ]
  ! GT              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]


state 112

    (53) aritmetica -> expr RESTA expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    SUMA            reduce using rule 53 (aritmetica -> expr RESTA expr .)
    RESTA           reduce using rule 53 (aritmetica -> expr RESTA expr .)
    AND             reduce using rule 53 (aritmetica -> expr RESTA expr .)
    OR              reduce using rule 53 (aritmetica -> expr RESTA expr .)
    LE              reduce using rule 53 (aritmetica -> expr RESTA expr .)
    LT              reduce using rule 53 (aritmetica -> expr RESTA expr .)
    GE              reduce using rule 53 (aritmetica -> expr RESTA expr .)
    GT              reduce using rule 53 (aritmetica -> expr RESTA expr .)
    EQ              reduce using rule 53 (aritmetica -> expr RESTA expr .)
    SEMICOLON       reduce using rule 53 (aritmetica -> expr RESTA expr .)
    RPARENT         reduce using rule 53 (aritmetica -> expr RESTA expr .)
    COMA            reduce using rule 53 (aritmetica -> expr RESTA expr .)
    RBRACKET        reduce using rule 53 (aritmetica -> expr RESTA expr .)
    MUL             shift and go to state 82
    DIV             shift and go to state 83

  ! MUL             [ reduce using rule 53 (aritmetica -> expr RESTA expr .) ]
  ! DIV             [ reduce using rule 53 (aritmetica -> expr RESTA expr .) ]
  ! SUMA            [ shift and go to state 80 ]
  ! RESTA           [ shift and go to state 81 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LE              [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! GE              [ shift and go to state 88 ]
  ! GT              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]


state 113

    (54) aritmetica -> expr MUL expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    SUMA            reduce using rule 54 (aritmetica -> expr MUL expr .)
    RESTA           reduce using rule 54 (aritmetica -> expr MUL expr .)
    MUL             reduce using rule 54 (aritmetica -> expr MUL expr .)
    DIV             reduce using rule 54 (aritmetica -> expr MUL expr .)
    AND             reduce using rule 54 (aritmetica -> expr MUL expr .)
    OR              reduce using rule 54 (aritmetica -> expr MUL expr .)
    LE              reduce using rule 54 (aritmetica -> expr MUL expr .)
    LT              reduce using rule 54 (aritmetica -> expr MUL expr .)
    GE              reduce using rule 54 (aritmetica -> expr MUL expr .)
    GT              reduce using rule 54 (aritmetica -> expr MUL expr .)
    EQ              reduce using rule 54 (aritmetica -> expr MUL expr .)
    SEMICOLON       reduce using rule 54 (aritmetica -> expr MUL expr .)
    RPARENT         reduce using rule 54 (aritmetica -> expr MUL expr .)
    COMA            reduce using rule 54 (aritmetica -> expr MUL expr .)
    RBRACKET        reduce using rule 54 (aritmetica -> expr MUL expr .)

  ! SUMA            [ shift and go to state 80 ]
  ! RESTA           [ shift and go to state 81 ]
  ! MUL             [ shift and go to state 82 ]
  ! DIV             [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LE              [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! GE              [ shift and go to state 88 ]
  ! GT              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]


state 114

    (55) aritmetica -> expr DIV expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    SUMA            reduce using rule 55 (aritmetica -> expr DIV expr .)
    RESTA           reduce using rule 55 (aritmetica -> expr DIV expr .)
    MUL             reduce using rule 55 (aritmetica -> expr DIV expr .)
    DIV             reduce using rule 55 (aritmetica -> expr DIV expr .)
    AND             reduce using rule 55 (aritmetica -> expr DIV expr .)
    OR              reduce using rule 55 (aritmetica -> expr DIV expr .)
    LE              reduce using rule 55 (aritmetica -> expr DIV expr .)
    LT              reduce using rule 55 (aritmetica -> expr DIV expr .)
    GE              reduce using rule 55 (aritmetica -> expr DIV expr .)
    GT              reduce using rule 55 (aritmetica -> expr DIV expr .)
    EQ              reduce using rule 55 (aritmetica -> expr DIV expr .)
    SEMICOLON       reduce using rule 55 (aritmetica -> expr DIV expr .)
    RPARENT         reduce using rule 55 (aritmetica -> expr DIV expr .)
    COMA            reduce using rule 55 (aritmetica -> expr DIV expr .)
    RBRACKET        reduce using rule 55 (aritmetica -> expr DIV expr .)

  ! SUMA            [ shift and go to state 80 ]
  ! RESTA           [ shift and go to state 81 ]
  ! MUL             [ shift and go to state 82 ]
  ! DIV             [ shift and go to state 83 ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LE              [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! GE              [ shift and go to state 88 ]
  ! GT              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]


state 115

    (56) binaria -> expr AND expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    AND             reduce using rule 56 (binaria -> expr AND expr .)
    OR              reduce using rule 56 (binaria -> expr AND expr .)
    SEMICOLON       reduce using rule 56 (binaria -> expr AND expr .)
    RPARENT         reduce using rule 56 (binaria -> expr AND expr .)
    COMA            reduce using rule 56 (binaria -> expr AND expr .)
    RBRACKET        reduce using rule 56 (binaria -> expr AND expr .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83
    LE              shift and go to state 86
    LT              shift and go to state 87
    GE              shift and go to state 88
    GT              shift and go to state 89
    EQ              shift and go to state 90

  ! SUMA            [ reduce using rule 56 (binaria -> expr AND expr .) ]
  ! RESTA           [ reduce using rule 56 (binaria -> expr AND expr .) ]
  ! MUL             [ reduce using rule 56 (binaria -> expr AND expr .) ]
  ! DIV             [ reduce using rule 56 (binaria -> expr AND expr .) ]
  ! LE              [ reduce using rule 56 (binaria -> expr AND expr .) ]
  ! LT              [ reduce using rule 56 (binaria -> expr AND expr .) ]
  ! GE              [ reduce using rule 56 (binaria -> expr AND expr .) ]
  ! GT              [ reduce using rule 56 (binaria -> expr AND expr .) ]
  ! EQ              [ reduce using rule 56 (binaria -> expr AND expr .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 116

    (57) binaria -> expr OR expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    AND             reduce using rule 57 (binaria -> expr OR expr .)
    OR              reduce using rule 57 (binaria -> expr OR expr .)
    SEMICOLON       reduce using rule 57 (binaria -> expr OR expr .)
    RPARENT         reduce using rule 57 (binaria -> expr OR expr .)
    COMA            reduce using rule 57 (binaria -> expr OR expr .)
    RBRACKET        reduce using rule 57 (binaria -> expr OR expr .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83
    LE              shift and go to state 86
    LT              shift and go to state 87
    GE              shift and go to state 88
    GT              shift and go to state 89
    EQ              shift and go to state 90

  ! SUMA            [ reduce using rule 57 (binaria -> expr OR expr .) ]
  ! RESTA           [ reduce using rule 57 (binaria -> expr OR expr .) ]
  ! MUL             [ reduce using rule 57 (binaria -> expr OR expr .) ]
  ! DIV             [ reduce using rule 57 (binaria -> expr OR expr .) ]
  ! LE              [ reduce using rule 57 (binaria -> expr OR expr .) ]
  ! LT              [ reduce using rule 57 (binaria -> expr OR expr .) ]
  ! GE              [ reduce using rule 57 (binaria -> expr OR expr .) ]
  ! GT              [ reduce using rule 57 (binaria -> expr OR expr .) ]
  ! EQ              [ reduce using rule 57 (binaria -> expr OR expr .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]


state 117

    (59) comparation -> expr LE expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    AND             reduce using rule 59 (comparation -> expr LE expr .)
    OR              reduce using rule 59 (comparation -> expr LE expr .)
    LE              reduce using rule 59 (comparation -> expr LE expr .)
    LT              reduce using rule 59 (comparation -> expr LE expr .)
    GE              reduce using rule 59 (comparation -> expr LE expr .)
    GT              reduce using rule 59 (comparation -> expr LE expr .)
    EQ              reduce using rule 59 (comparation -> expr LE expr .)
    SEMICOLON       reduce using rule 59 (comparation -> expr LE expr .)
    RPARENT         reduce using rule 59 (comparation -> expr LE expr .)
    COMA            reduce using rule 59 (comparation -> expr LE expr .)
    RBRACKET        reduce using rule 59 (comparation -> expr LE expr .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83

  ! SUMA            [ reduce using rule 59 (comparation -> expr LE expr .) ]
  ! RESTA           [ reduce using rule 59 (comparation -> expr LE expr .) ]
  ! MUL             [ reduce using rule 59 (comparation -> expr LE expr .) ]
  ! DIV             [ reduce using rule 59 (comparation -> expr LE expr .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LE              [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! GE              [ shift and go to state 88 ]
  ! GT              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]


state 118

    (60) comparation -> expr LT expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    AND             reduce using rule 60 (comparation -> expr LT expr .)
    OR              reduce using rule 60 (comparation -> expr LT expr .)
    LE              reduce using rule 60 (comparation -> expr LT expr .)
    LT              reduce using rule 60 (comparation -> expr LT expr .)
    GE              reduce using rule 60 (comparation -> expr LT expr .)
    GT              reduce using rule 60 (comparation -> expr LT expr .)
    EQ              reduce using rule 60 (comparation -> expr LT expr .)
    SEMICOLON       reduce using rule 60 (comparation -> expr LT expr .)
    RPARENT         reduce using rule 60 (comparation -> expr LT expr .)
    COMA            reduce using rule 60 (comparation -> expr LT expr .)
    RBRACKET        reduce using rule 60 (comparation -> expr LT expr .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83

  ! SUMA            [ reduce using rule 60 (comparation -> expr LT expr .) ]
  ! RESTA           [ reduce using rule 60 (comparation -> expr LT expr .) ]
  ! MUL             [ reduce using rule 60 (comparation -> expr LT expr .) ]
  ! DIV             [ reduce using rule 60 (comparation -> expr LT expr .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LE              [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! GE              [ shift and go to state 88 ]
  ! GT              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]


state 119

    (61) comparation -> expr GE expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    AND             reduce using rule 61 (comparation -> expr GE expr .)
    OR              reduce using rule 61 (comparation -> expr GE expr .)
    LE              reduce using rule 61 (comparation -> expr GE expr .)
    LT              reduce using rule 61 (comparation -> expr GE expr .)
    GE              reduce using rule 61 (comparation -> expr GE expr .)
    GT              reduce using rule 61 (comparation -> expr GE expr .)
    EQ              reduce using rule 61 (comparation -> expr GE expr .)
    SEMICOLON       reduce using rule 61 (comparation -> expr GE expr .)
    RPARENT         reduce using rule 61 (comparation -> expr GE expr .)
    COMA            reduce using rule 61 (comparation -> expr GE expr .)
    RBRACKET        reduce using rule 61 (comparation -> expr GE expr .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83

  ! SUMA            [ reduce using rule 61 (comparation -> expr GE expr .) ]
  ! RESTA           [ reduce using rule 61 (comparation -> expr GE expr .) ]
  ! MUL             [ reduce using rule 61 (comparation -> expr GE expr .) ]
  ! DIV             [ reduce using rule 61 (comparation -> expr GE expr .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LE              [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! GE              [ shift and go to state 88 ]
  ! GT              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]


state 120

    (62) comparation -> expr GT expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    AND             reduce using rule 62 (comparation -> expr GT expr .)
    OR              reduce using rule 62 (comparation -> expr GT expr .)
    LE              reduce using rule 62 (comparation -> expr GT expr .)
    LT              reduce using rule 62 (comparation -> expr GT expr .)
    GE              reduce using rule 62 (comparation -> expr GT expr .)
    GT              reduce using rule 62 (comparation -> expr GT expr .)
    EQ              reduce using rule 62 (comparation -> expr GT expr .)
    SEMICOLON       reduce using rule 62 (comparation -> expr GT expr .)
    RPARENT         reduce using rule 62 (comparation -> expr GT expr .)
    COMA            reduce using rule 62 (comparation -> expr GT expr .)
    RBRACKET        reduce using rule 62 (comparation -> expr GT expr .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83

  ! SUMA            [ reduce using rule 62 (comparation -> expr GT expr .) ]
  ! RESTA           [ reduce using rule 62 (comparation -> expr GT expr .) ]
  ! MUL             [ reduce using rule 62 (comparation -> expr GT expr .) ]
  ! DIV             [ reduce using rule 62 (comparation -> expr GT expr .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LE              [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! GE              [ shift and go to state 88 ]
  ! GT              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]


state 121

    (63) comparation -> expr EQ expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    AND             reduce using rule 63 (comparation -> expr EQ expr .)
    OR              reduce using rule 63 (comparation -> expr EQ expr .)
    LE              reduce using rule 63 (comparation -> expr EQ expr .)
    LT              reduce using rule 63 (comparation -> expr EQ expr .)
    GE              reduce using rule 63 (comparation -> expr EQ expr .)
    GT              reduce using rule 63 (comparation -> expr EQ expr .)
    EQ              reduce using rule 63 (comparation -> expr EQ expr .)
    SEMICOLON       reduce using rule 63 (comparation -> expr EQ expr .)
    RPARENT         reduce using rule 63 (comparation -> expr EQ expr .)
    COMA            reduce using rule 63 (comparation -> expr EQ expr .)
    RBRACKET        reduce using rule 63 (comparation -> expr EQ expr .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83

  ! SUMA            [ reduce using rule 63 (comparation -> expr EQ expr .) ]
  ! RESTA           [ reduce using rule 63 (comparation -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 63 (comparation -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 63 (comparation -> expr EQ expr .) ]
  ! AND             [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! LE              [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! GE              [ shift and go to state 88 ]
  ! GT              [ shift and go to state 89 ]
  ! EQ              [ shift and go to state 90 ]


state 122

    (102) functioncall -> CSINCOMILLAS LPARENT RPARENT .

    SUMA            reduce using rule 102 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    RESTA           reduce using rule 102 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    MUL             reduce using rule 102 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    DIV             reduce using rule 102 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    AND             reduce using rule 102 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    OR              reduce using rule 102 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    LE              reduce using rule 102 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    LT              reduce using rule 102 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    GE              reduce using rule 102 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    GT              reduce using rule 102 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    EQ              reduce using rule 102 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    SEMICOLON       reduce using rule 102 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    RPARENT         reduce using rule 102 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    COMA            reduce using rule 102 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    RBRACKET        reduce using rule 102 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)


state 123

    (103) functioncall -> CSINCOMILLAS LPARENT argumentos . RPARENT

    RPARENT         shift and go to state 142


state 124

    (104) argumentos -> expr .
    (105) argumentos -> expr . COMA argumentos
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    RPARENT         reduce using rule 104 (argumentos -> expr .)
    COMA            shift and go to state 143
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    LE              shift and go to state 86
    LT              shift and go to state 87
    GE              shift and go to state 88
    GT              shift and go to state 89
    EQ              shift and go to state 90


state 125

    (86) corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS . RCORCHETE recur_corchete

    RCORCHETE       shift and go to state 144


state 126

    (83) punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .
    (86) corchete -> CSINCOMILLAS . LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> CSINCOMILLAS . PUNTO CSINCOMILLAS
    (84) punto2 -> CSINCOMILLAS . PUNTO punto_valor
    (85) punto_corchete -> CSINCOMILLAS . PUNTO corchete

    SUMA            reduce using rule 83 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    RESTA           reduce using rule 83 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    MUL             reduce using rule 83 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    DIV             reduce using rule 83 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    AND             reduce using rule 83 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    OR              reduce using rule 83 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    LE              reduce using rule 83 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    LT              reduce using rule 83 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    GE              reduce using rule 83 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    GT              reduce using rule 83 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    EQ              reduce using rule 83 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    SEMICOLON       reduce using rule 83 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    RPARENT         reduce using rule 83 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    COMA            reduce using rule 83 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    RBRACKET        reduce using rule 83 (punto1 -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    LCORCHETE       shift and go to state 92
    PUNTO           shift and go to state 93


state 127

    (84) punto2 -> CSINCOMILLAS PUNTO punto_valor .

    SUMA            reduce using rule 84 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    RESTA           reduce using rule 84 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    MUL             reduce using rule 84 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    DIV             reduce using rule 84 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    AND             reduce using rule 84 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    OR              reduce using rule 84 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    LE              reduce using rule 84 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    LT              reduce using rule 84 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    GE              reduce using rule 84 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    GT              reduce using rule 84 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    EQ              reduce using rule 84 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    SEMICOLON       reduce using rule 84 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    RPARENT         reduce using rule 84 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    COMA            reduce using rule 84 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)
    RBRACKET        reduce using rule 84 (punto2 -> CSINCOMILLAS PUNTO punto_valor .)


state 128

    (85) punto_corchete -> CSINCOMILLAS PUNTO corchete .

    SUMA            reduce using rule 85 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    RESTA           reduce using rule 85 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    MUL             reduce using rule 85 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    DIV             reduce using rule 85 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    AND             reduce using rule 85 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    OR              reduce using rule 85 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    LE              reduce using rule 85 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    LT              reduce using rule 85 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    GE              reduce using rule 85 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    GT              reduce using rule 85 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    EQ              reduce using rule 85 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    SEMICOLON       reduce using rule 85 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    RPARENT         reduce using rule 85 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    COMA            reduce using rule 85 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)
    RBRACKET        reduce using rule 85 (punto_corchete -> CSINCOMILLAS PUNTO corchete .)


state 129

    (73) ajson -> LBRACKET object RBRACKET .

    SUMA            reduce using rule 73 (ajson -> LBRACKET object RBRACKET .)
    RESTA           reduce using rule 73 (ajson -> LBRACKET object RBRACKET .)
    MUL             reduce using rule 73 (ajson -> LBRACKET object RBRACKET .)
    DIV             reduce using rule 73 (ajson -> LBRACKET object RBRACKET .)
    AND             reduce using rule 73 (ajson -> LBRACKET object RBRACKET .)
    OR              reduce using rule 73 (ajson -> LBRACKET object RBRACKET .)
    LE              reduce using rule 73 (ajson -> LBRACKET object RBRACKET .)
    LT              reduce using rule 73 (ajson -> LBRACKET object RBRACKET .)
    GE              reduce using rule 73 (ajson -> LBRACKET object RBRACKET .)
    GT              reduce using rule 73 (ajson -> LBRACKET object RBRACKET .)
    EQ              reduce using rule 73 (ajson -> LBRACKET object RBRACKET .)
    SEMICOLON       reduce using rule 73 (ajson -> LBRACKET object RBRACKET .)
    RPARENT         reduce using rule 73 (ajson -> LBRACKET object RBRACKET .)
    COMA            reduce using rule 73 (ajson -> LBRACKET object RBRACKET .)
    RBRACKET        reduce using rule 73 (ajson -> LBRACKET object RBRACKET .)


state 130

    (74) object -> pair COMA . object
    (75) object -> pair COMA .
    (74) object -> . pair COMA object
    (75) object -> . pair COMA
    (76) object -> . pair
    (77) pair -> . clave PUNTOS expr
    (71) clave -> . CCOMILLAS
    (72) clave -> . CSINCOMILLAS

    RBRACKET        reduce using rule 75 (object -> pair COMA .)
    CCOMILLAS       shift and go to state 99
    CSINCOMILLAS    shift and go to state 100

    pair                           shift and go to state 97
    object                         shift and go to state 145
    clave                          shift and go to state 98

state 131

    (77) pair -> clave PUNTOS . expr
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 146
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 132

    (35) parentesis -> LPARENT expr RPARENT .

    SUMA            reduce using rule 35 (parentesis -> LPARENT expr RPARENT .)
    RESTA           reduce using rule 35 (parentesis -> LPARENT expr RPARENT .)
    MUL             reduce using rule 35 (parentesis -> LPARENT expr RPARENT .)
    DIV             reduce using rule 35 (parentesis -> LPARENT expr RPARENT .)
    AND             reduce using rule 35 (parentesis -> LPARENT expr RPARENT .)
    OR              reduce using rule 35 (parentesis -> LPARENT expr RPARENT .)
    LE              reduce using rule 35 (parentesis -> LPARENT expr RPARENT .)
    LT              reduce using rule 35 (parentesis -> LPARENT expr RPARENT .)
    GE              reduce using rule 35 (parentesis -> LPARENT expr RPARENT .)
    GT              reduce using rule 35 (parentesis -> LPARENT expr RPARENT .)
    EQ              reduce using rule 35 (parentesis -> LPARENT expr RPARENT .)
    SEMICOLON       reduce using rule 35 (parentesis -> LPARENT expr RPARENT .)
    RPARENT         reduce using rule 35 (parentesis -> LPARENT expr RPARENT .)
    COMA            reduce using rule 35 (parentesis -> LPARENT expr RPARENT .)
    RBRACKET        reduce using rule 35 (parentesis -> LPARENT expr RPARENT .)


state 133

    (65) ajson_t -> LBRACKET object_t . RBRACKET

    RBRACKET        shift and go to state 147


state 134

    (66) object_t -> pair_t . COMA object_t
    (67) object_t -> pair_t . COMA
    (68) object_t -> pair_t .

    COMA            shift and go to state 148
    RBRACKET        reduce using rule 68 (object_t -> pair_t .)


state 135

    (69) pair_t -> clave . PUNTOS tipo
    (70) pair_t -> clave . PUNTOS ajson_t

    PUNTOS          shift and go to state 149


state 136

    (91) condition -> IF LPARENT expr RPARENT LBRACKET . statement RBRACKET
    (92) condition -> IF LPARENT expr RPARENT LBRACKET . statement RBRACKET ELSE LBRACKET statement RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (32) assignment -> . var IGUAL expr
    (64) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (94) function -> . function_no_args
    (95) function -> . function_args
    (91) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (92) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (93) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (98) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (96) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    LET             shift and go to state 12
    TYPE            shift and go to state 14
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    CSINCOMILLAS    shift and go to state 15
    FUNCTION        shift and go to state 20

    statement                      shift and go to state 150
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    function_no_args               shift and go to state 16
    function_args                  shift and go to state 17

state 137

    (93) loop -> WHILE LPARENT expr RPARENT LBRACKET . statement RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (32) assignment -> . var IGUAL expr
    (64) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (94) function -> . function_no_args
    (95) function -> . function_args
    (91) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (92) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (93) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (98) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (96) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    LET             shift and go to state 12
    TYPE            shift and go to state 14
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    CSINCOMILLAS    shift and go to state 15
    FUNCTION        shift and go to state 20

    statement                      shift and go to state 151
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    function_no_args               shift and go to state 16
    function_args                  shift and go to state 17

state 138

    (100) arg_list -> CSINCOMILLAS PUNTOS . tipo
    (101) arg_list -> CSINCOMILLAS PUNTOS . tipo COMA arg_list
    (27) tipo -> . INT
    (28) tipo -> . FLOAT
    (29) tipo -> . CHARACTER
    (30) tipo -> . BOOLEAN
    (31) tipo -> . tipo_ajson
    (26) tipo_ajson -> . CSINCOMILLAS

    INT             shift and go to state 70
    FLOAT           shift and go to state 71
    CHARACTER       shift and go to state 72
    BOOLEAN         shift and go to state 73
    CSINCOMILLAS    shift and go to state 68

    tipo                           shift and go to state 152
    tipo_ajson                     shift and go to state 74

state 139

    (98) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS . tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS . tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (27) tipo -> . INT
    (28) tipo -> . FLOAT
    (29) tipo -> . CHARACTER
    (30) tipo -> . BOOLEAN
    (31) tipo -> . tipo_ajson
    (26) tipo_ajson -> . CSINCOMILLAS

    INT             shift and go to state 70
    FLOAT           shift and go to state 71
    CHARACTER       shift and go to state 72
    BOOLEAN         shift and go to state 73
    CSINCOMILLAS    shift and go to state 68

    tipo                           shift and go to state 153
    tipo_ajson                     shift and go to state 74

state 140

    (96) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT . PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT . PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    PUNTOS          shift and go to state 154


state 141

    (23) id -> var IGUAL expr COMA id .

    SEMICOLON       reduce using rule 23 (id -> var IGUAL expr COMA id .)


state 142

    (103) functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .

    SUMA            reduce using rule 103 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    RESTA           reduce using rule 103 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    MUL             reduce using rule 103 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    DIV             reduce using rule 103 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    AND             reduce using rule 103 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    OR              reduce using rule 103 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    LE              reduce using rule 103 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    LT              reduce using rule 103 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    GE              reduce using rule 103 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    GT              reduce using rule 103 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    EQ              reduce using rule 103 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    SEMICOLON       reduce using rule 103 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    RPARENT         reduce using rule 103 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    COMA            reduce using rule 103 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    RBRACKET        reduce using rule 103 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)


state 143

    (105) argumentos -> expr COMA . argumentos
    (104) argumentos -> . expr
    (105) argumentos -> . expr COMA argumentos
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 124
    argumentos                     shift and go to state 155
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 144

    (86) corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE . recur_corchete
    (87) recur_corchete -> . LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (88) recur_corchete -> . empty
    (89) recur_corchete -> . PUNTO CSINCOMILLAS
    (90) recur_corchete -> . PUNTO punto_valor
    (106) empty -> .

    LCORCHETE       shift and go to state 156
    PUNTO           shift and go to state 159
    SUMA            reduce using rule 106 (empty -> .)
    RESTA           reduce using rule 106 (empty -> .)
    MUL             reduce using rule 106 (empty -> .)
    DIV             reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    LE              reduce using rule 106 (empty -> .)
    LT              reduce using rule 106 (empty -> .)
    GE              reduce using rule 106 (empty -> .)
    GT              reduce using rule 106 (empty -> .)
    EQ              reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    RPARENT         reduce using rule 106 (empty -> .)
    COMA            reduce using rule 106 (empty -> .)
    RBRACKET        reduce using rule 106 (empty -> .)

    recur_corchete                 shift and go to state 157
    empty                          shift and go to state 158

state 145

    (74) object -> pair COMA object .

    RBRACKET        reduce using rule 74 (object -> pair COMA object .)


state 146

    (77) pair -> clave PUNTOS expr .
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    COMA            reduce using rule 77 (pair -> clave PUNTOS expr .)
    RBRACKET        reduce using rule 77 (pair -> clave PUNTOS expr .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    LE              shift and go to state 86
    LT              shift and go to state 87
    GE              shift and go to state 88
    GT              shift and go to state 89
    EQ              shift and go to state 90


state 147

    (65) ajson_t -> LBRACKET object_t RBRACKET .

    SEMICOLON       reduce using rule 65 (ajson_t -> LBRACKET object_t RBRACKET .)
    COMA            reduce using rule 65 (ajson_t -> LBRACKET object_t RBRACKET .)
    RBRACKET        reduce using rule 65 (ajson_t -> LBRACKET object_t RBRACKET .)


state 148

    (66) object_t -> pair_t COMA . object_t
    (67) object_t -> pair_t COMA .
    (66) object_t -> . pair_t COMA object_t
    (67) object_t -> . pair_t COMA
    (68) object_t -> . pair_t
    (69) pair_t -> . clave PUNTOS tipo
    (70) pair_t -> . clave PUNTOS ajson_t
    (71) clave -> . CCOMILLAS
    (72) clave -> . CSINCOMILLAS

    RBRACKET        reduce using rule 67 (object_t -> pair_t COMA .)
    CCOMILLAS       shift and go to state 99
    CSINCOMILLAS    shift and go to state 100

    pair_t                         shift and go to state 134
    object_t                       shift and go to state 160
    clave                          shift and go to state 135

state 149

    (69) pair_t -> clave PUNTOS . tipo
    (70) pair_t -> clave PUNTOS . ajson_t
    (27) tipo -> . INT
    (28) tipo -> . FLOAT
    (29) tipo -> . CHARACTER
    (30) tipo -> . BOOLEAN
    (31) tipo -> . tipo_ajson
    (65) ajson_t -> . LBRACKET object_t RBRACKET
    (26) tipo_ajson -> . CSINCOMILLAS

    INT             shift and go to state 70
    FLOAT           shift and go to state 71
    CHARACTER       shift and go to state 72
    BOOLEAN         shift and go to state 73
    LBRACKET        shift and go to state 104
    CSINCOMILLAS    shift and go to state 68

    tipo                           shift and go to state 161
    ajson_t                        shift and go to state 162
    tipo_ajson                     shift and go to state 74

state 150

    (91) condition -> IF LPARENT expr RPARENT LBRACKET statement . RBRACKET
    (92) condition -> IF LPARENT expr RPARENT LBRACKET statement . RBRACKET ELSE LBRACKET statement RBRACKET

    RBRACKET        shift and go to state 163


state 151

    (93) loop -> WHILE LPARENT expr RPARENT LBRACKET statement . RBRACKET

    RBRACKET        shift and go to state 164


state 152

    (100) arg_list -> CSINCOMILLAS PUNTOS tipo .
    (101) arg_list -> CSINCOMILLAS PUNTOS tipo . COMA arg_list

    RPARENT         reduce using rule 100 (arg_list -> CSINCOMILLAS PUNTOS tipo .)
    COMA            shift and go to state 165


state 153

    (98) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo . LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo . LBRACKET RETURN expr SEMICOLON RBRACKET

    LBRACKET        shift and go to state 166


state 154

    (96) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS . tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS . tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (27) tipo -> . INT
    (28) tipo -> . FLOAT
    (29) tipo -> . CHARACTER
    (30) tipo -> . BOOLEAN
    (31) tipo -> . tipo_ajson
    (26) tipo_ajson -> . CSINCOMILLAS

    INT             shift and go to state 70
    FLOAT           shift and go to state 71
    CHARACTER       shift and go to state 72
    BOOLEAN         shift and go to state 73
    CSINCOMILLAS    shift and go to state 68

    tipo                           shift and go to state 167
    tipo_ajson                     shift and go to state 74

state 155

    (105) argumentos -> expr COMA argumentos .

    RPARENT         reduce using rule 105 (argumentos -> expr COMA argumentos .)


state 156

    (87) recur_corchete -> LCORCHETE . CCOMILLAS RCORCHETE recur_corchete

    CCOMILLAS       shift and go to state 168


state 157

    (86) corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .

    SUMA            reduce using rule 86 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RESTA           reduce using rule 86 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    MUL             reduce using rule 86 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    DIV             reduce using rule 86 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    AND             reduce using rule 86 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    OR              reduce using rule 86 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LE              reduce using rule 86 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LT              reduce using rule 86 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GE              reduce using rule 86 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GT              reduce using rule 86 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    EQ              reduce using rule 86 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    SEMICOLON       reduce using rule 86 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RPARENT         reduce using rule 86 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    COMA            reduce using rule 86 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RBRACKET        reduce using rule 86 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)


state 158

    (88) recur_corchete -> empty .

    SUMA            reduce using rule 88 (recur_corchete -> empty .)
    RESTA           reduce using rule 88 (recur_corchete -> empty .)
    MUL             reduce using rule 88 (recur_corchete -> empty .)
    DIV             reduce using rule 88 (recur_corchete -> empty .)
    AND             reduce using rule 88 (recur_corchete -> empty .)
    OR              reduce using rule 88 (recur_corchete -> empty .)
    LE              reduce using rule 88 (recur_corchete -> empty .)
    LT              reduce using rule 88 (recur_corchete -> empty .)
    GE              reduce using rule 88 (recur_corchete -> empty .)
    GT              reduce using rule 88 (recur_corchete -> empty .)
    EQ              reduce using rule 88 (recur_corchete -> empty .)
    SEMICOLON       reduce using rule 88 (recur_corchete -> empty .)
    RPARENT         reduce using rule 88 (recur_corchete -> empty .)
    COMA            reduce using rule 88 (recur_corchete -> empty .)
    RBRACKET        reduce using rule 88 (recur_corchete -> empty .)


state 159

    (89) recur_corchete -> PUNTO . CSINCOMILLAS
    (90) recur_corchete -> PUNTO . punto_valor
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    CSINCOMILLAS    shift and go to state 169

    punto_valor                    shift and go to state 170
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 160

    (66) object_t -> pair_t COMA object_t .

    RBRACKET        reduce using rule 66 (object_t -> pair_t COMA object_t .)


state 161

    (69) pair_t -> clave PUNTOS tipo .

    COMA            reduce using rule 69 (pair_t -> clave PUNTOS tipo .)
    RBRACKET        reduce using rule 69 (pair_t -> clave PUNTOS tipo .)


state 162

    (70) pair_t -> clave PUNTOS ajson_t .

    COMA            reduce using rule 70 (pair_t -> clave PUNTOS ajson_t .)
    RBRACKET        reduce using rule 70 (pair_t -> clave PUNTOS ajson_t .)


state 163

    (91) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .
    (92) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET . ELSE LBRACKET statement RBRACKET

    LET             reduce using rule 91 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    TYPE            reduce using rule 91 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    IF              reduce using rule 91 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    WHILE           reduce using rule 91 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    CSINCOMILLAS    reduce using rule 91 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    FUNCTION        reduce using rule 91 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    $end            reduce using rule 91 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RBRACKET        reduce using rule 91 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RETURN          reduce using rule 91 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    ELSE            shift and go to state 171


state 164

    (93) loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .

    LET             reduce using rule 93 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    TYPE            reduce using rule 93 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    IF              reduce using rule 93 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    WHILE           reduce using rule 93 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    CSINCOMILLAS    reduce using rule 93 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    FUNCTION        reduce using rule 93 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    $end            reduce using rule 93 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RBRACKET        reduce using rule 93 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RETURN          reduce using rule 93 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)


state 165

    (101) arg_list -> CSINCOMILLAS PUNTOS tipo COMA . arg_list
    (100) arg_list -> . CSINCOMILLAS PUNTOS tipo
    (101) arg_list -> . CSINCOMILLAS PUNTOS tipo COMA arg_list

    CSINCOMILLAS    shift and go to state 107

    arg_list                       shift and go to state 172

state 166

    (98) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET . statement RETURN expr SEMICOLON RBRACKET
    (99) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET . RETURN expr SEMICOLON RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (32) assignment -> . var IGUAL expr
    (64) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (94) function -> . function_no_args
    (95) function -> . function_args
    (91) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (92) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (93) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (98) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (96) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    RETURN          shift and go to state 174
    LET             shift and go to state 12
    TYPE            shift and go to state 14
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    CSINCOMILLAS    shift and go to state 15
    FUNCTION        shift and go to state 20

    statement                      shift and go to state 173
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    function_no_args               shift and go to state 16
    function_args                  shift and go to state 17

state 167

    (96) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo . LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo . LBRACKET RETURN expr SEMICOLON RBRACKET

    LBRACKET        shift and go to state 175


state 168

    (87) recur_corchete -> LCORCHETE CCOMILLAS . RCORCHETE recur_corchete

    RCORCHETE       shift and go to state 176


state 169

    (89) recur_corchete -> PUNTO CSINCOMILLAS .
    (83) punto1 -> CSINCOMILLAS . PUNTO CSINCOMILLAS
    (84) punto2 -> CSINCOMILLAS . PUNTO punto_valor
    (85) punto_corchete -> CSINCOMILLAS . PUNTO corchete

    SUMA            reduce using rule 89 (recur_corchete -> PUNTO CSINCOMILLAS .)
    RESTA           reduce using rule 89 (recur_corchete -> PUNTO CSINCOMILLAS .)
    MUL             reduce using rule 89 (recur_corchete -> PUNTO CSINCOMILLAS .)
    DIV             reduce using rule 89 (recur_corchete -> PUNTO CSINCOMILLAS .)
    AND             reduce using rule 89 (recur_corchete -> PUNTO CSINCOMILLAS .)
    OR              reduce using rule 89 (recur_corchete -> PUNTO CSINCOMILLAS .)
    LE              reduce using rule 89 (recur_corchete -> PUNTO CSINCOMILLAS .)
    LT              reduce using rule 89 (recur_corchete -> PUNTO CSINCOMILLAS .)
    GE              reduce using rule 89 (recur_corchete -> PUNTO CSINCOMILLAS .)
    GT              reduce using rule 89 (recur_corchete -> PUNTO CSINCOMILLAS .)
    EQ              reduce using rule 89 (recur_corchete -> PUNTO CSINCOMILLAS .)
    SEMICOLON       reduce using rule 89 (recur_corchete -> PUNTO CSINCOMILLAS .)
    RPARENT         reduce using rule 89 (recur_corchete -> PUNTO CSINCOMILLAS .)
    COMA            reduce using rule 89 (recur_corchete -> PUNTO CSINCOMILLAS .)
    RBRACKET        reduce using rule 89 (recur_corchete -> PUNTO CSINCOMILLAS .)
    PUNTO           shift and go to state 93


state 170

    (90) recur_corchete -> PUNTO punto_valor .

    SUMA            reduce using rule 90 (recur_corchete -> PUNTO punto_valor .)
    RESTA           reduce using rule 90 (recur_corchete -> PUNTO punto_valor .)
    MUL             reduce using rule 90 (recur_corchete -> PUNTO punto_valor .)
    DIV             reduce using rule 90 (recur_corchete -> PUNTO punto_valor .)
    AND             reduce using rule 90 (recur_corchete -> PUNTO punto_valor .)
    OR              reduce using rule 90 (recur_corchete -> PUNTO punto_valor .)
    LE              reduce using rule 90 (recur_corchete -> PUNTO punto_valor .)
    LT              reduce using rule 90 (recur_corchete -> PUNTO punto_valor .)
    GE              reduce using rule 90 (recur_corchete -> PUNTO punto_valor .)
    GT              reduce using rule 90 (recur_corchete -> PUNTO punto_valor .)
    EQ              reduce using rule 90 (recur_corchete -> PUNTO punto_valor .)
    SEMICOLON       reduce using rule 90 (recur_corchete -> PUNTO punto_valor .)
    RPARENT         reduce using rule 90 (recur_corchete -> PUNTO punto_valor .)
    COMA            reduce using rule 90 (recur_corchete -> PUNTO punto_valor .)
    RBRACKET        reduce using rule 90 (recur_corchete -> PUNTO punto_valor .)


state 171

    (92) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE . LBRACKET statement RBRACKET

    LBRACKET        shift and go to state 177


state 172

    (101) arg_list -> CSINCOMILLAS PUNTOS tipo COMA arg_list .

    RPARENT         reduce using rule 101 (arg_list -> CSINCOMILLAS PUNTOS tipo COMA arg_list .)


state 173

    (98) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement . RETURN expr SEMICOLON RBRACKET

    RETURN          shift and go to state 178


state 174

    (99) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN . expr SEMICOLON RBRACKET
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 179
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 175

    (96) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET . statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET . RETURN expr SEMICOLON RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (32) assignment -> . var IGUAL expr
    (64) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (94) function -> . function_no_args
    (95) function -> . function_args
    (91) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (92) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (93) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (98) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (96) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    RETURN          shift and go to state 181
    LET             shift and go to state 12
    TYPE            shift and go to state 14
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    CSINCOMILLAS    shift and go to state 15
    FUNCTION        shift and go to state 20

    statement                      shift and go to state 180
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    function_no_args               shift and go to state 16
    function_args                  shift and go to state 17

state 176

    (87) recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE . recur_corchete
    (87) recur_corchete -> . LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (88) recur_corchete -> . empty
    (89) recur_corchete -> . PUNTO CSINCOMILLAS
    (90) recur_corchete -> . PUNTO punto_valor
    (106) empty -> .

    LCORCHETE       shift and go to state 156
    PUNTO           shift and go to state 159
    SUMA            reduce using rule 106 (empty -> .)
    RESTA           reduce using rule 106 (empty -> .)
    MUL             reduce using rule 106 (empty -> .)
    DIV             reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    LE              reduce using rule 106 (empty -> .)
    LT              reduce using rule 106 (empty -> .)
    GE              reduce using rule 106 (empty -> .)
    GT              reduce using rule 106 (empty -> .)
    EQ              reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    RPARENT         reduce using rule 106 (empty -> .)
    COMA            reduce using rule 106 (empty -> .)
    RBRACKET        reduce using rule 106 (empty -> .)

    recur_corchete                 shift and go to state 182
    empty                          shift and go to state 158

state 177

    (92) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET . statement RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (32) assignment -> . var IGUAL expr
    (64) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (94) function -> . function_no_args
    (95) function -> . function_args
    (91) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (92) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (93) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo
    (98) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (99) function_no_args -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (96) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (97) function_args -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    LET             shift and go to state 12
    TYPE            shift and go to state 14
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    CSINCOMILLAS    shift and go to state 15
    FUNCTION        shift and go to state 20

    statement                      shift and go to state 183
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13
    function_no_args               shift and go to state 16
    function_args                  shift and go to state 17

state 178

    (98) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN . expr SEMICOLON RBRACKET
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 184
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 179

    (99) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr . SEMICOLON RBRACKET
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 185
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    LE              shift and go to state 86
    LT              shift and go to state 87
    GE              shift and go to state 88
    GT              shift and go to state 89
    EQ              shift and go to state 90


state 180

    (96) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement . RETURN expr SEMICOLON RBRACKET

    RETURN          shift and go to state 186


state 181

    (97) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN . expr SEMICOLON RBRACKET
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 187
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 182

    (87) recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .

    SUMA            reduce using rule 87 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RESTA           reduce using rule 87 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    MUL             reduce using rule 87 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    DIV             reduce using rule 87 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    AND             reduce using rule 87 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    OR              reduce using rule 87 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LE              reduce using rule 87 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LT              reduce using rule 87 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GE              reduce using rule 87 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GT              reduce using rule 87 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    EQ              reduce using rule 87 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    SEMICOLON       reduce using rule 87 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RPARENT         reduce using rule 87 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    COMA            reduce using rule 87 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RBRACKET        reduce using rule 87 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)


state 183

    (92) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement . RBRACKET

    RBRACKET        shift and go to state 188


state 184

    (98) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr . SEMICOLON RBRACKET
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 189
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    LE              shift and go to state 86
    LT              shift and go to state 87
    GE              shift and go to state 88
    GT              shift and go to state 89
    EQ              shift and go to state 90


state 185

    (99) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 190


state 186

    (96) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN . expr SEMICOLON RBRACKET
    (38) expr -> . operacion
    (39) expr -> . num
    (40) expr -> . bool
    (41) expr -> . NULL
    (42) expr -> . variable
    (43) expr -> . signos
    (44) expr -> . cadena
    (45) expr -> . ajson
    (46) expr -> . parentesis
    (47) expr -> . pc
    (48) expr -> . functioncall
    (49) operacion -> . aritmetica
    (50) operacion -> . binaria
    (51) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (33) variable -> . CSINCOMILLAS
    (36) signos -> . SUMA expr
    (37) signos -> . RESTA expr
    (34) cadena -> . CARACTER
    (73) ajson -> . LBRACKET object RBRACKET
    (35) parentesis -> . LPARENT expr RPARENT
    (81) pc -> . punto_valor
    (82) pc -> . corchete
    (102) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (103) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (52) aritmetica -> . expr SUMA expr
    (53) aritmetica -> . expr RESTA expr
    (54) aritmetica -> . expr MUL expr
    (55) aritmetica -> . expr DIV expr
    (56) binaria -> . expr AND expr
    (57) binaria -> . expr OR expr
    (58) binaria -> . NOT expr
    (59) comparation -> . expr LE expr
    (60) comparation -> . expr LT expr
    (61) comparation -> . expr GE expr
    (62) comparation -> . expr GT expr
    (63) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL
    (78) punto_valor -> . punto1
    (79) punto_valor -> . punto2
    (80) punto_valor -> . punto_corchete
    (86) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (83) punto1 -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (84) punto2 -> . CSINCOMILLAS PUNTO punto_valor
    (85) punto_corchete -> . CSINCOMILLAS PUNTO corchete

    NULL            shift and go to state 38
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    SUMA            shift and go to state 54
    RESTA           shift and go to state 55
    CARACTER        shift and go to state 56
    LBRACKET        shift and go to state 57
    LPARENT         shift and go to state 58
    NOT             shift and go to state 61
    ENTERO          shift and go to state 62
    DECIMAL         shift and go to state 63

    expr                           shift and go to state 191
    operacion                      shift and go to state 35
    num                            shift and go to state 36
    bool                           shift and go to state 37
    variable                       shift and go to state 39
    signos                         shift and go to state 40
    cadena                         shift and go to state 41
    ajson                          shift and go to state 42
    parentesis                     shift and go to state 43
    pc                             shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50
    punto_valor                    shift and go to state 59
    corchete                       shift and go to state 60
    punto1                         shift and go to state 64
    punto2                         shift and go to state 65
    punto_corchete                 shift and go to state 66

state 187

    (97) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr . SEMICOLON RBRACKET
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 192
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    LE              shift and go to state 86
    LT              shift and go to state 87
    GE              shift and go to state 88
    GT              shift and go to state 89
    EQ              shift and go to state 90


state 188

    (92) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .

    LET             reduce using rule 92 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    TYPE            reduce using rule 92 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    IF              reduce using rule 92 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    WHILE           reduce using rule 92 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    CSINCOMILLAS    reduce using rule 92 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    FUNCTION        reduce using rule 92 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    $end            reduce using rule 92 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    RBRACKET        reduce using rule 92 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    RETURN          reduce using rule 92 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)


state 189

    (98) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 193


state 190

    (99) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .

    LET             reduce using rule 99 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 99 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 99 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 99 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 99 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 99 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 99 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 99 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 99 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)


state 191

    (96) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr . SEMICOLON RBRACKET
    (52) aritmetica -> expr . SUMA expr
    (53) aritmetica -> expr . RESTA expr
    (54) aritmetica -> expr . MUL expr
    (55) aritmetica -> expr . DIV expr
    (56) binaria -> expr . AND expr
    (57) binaria -> expr . OR expr
    (59) comparation -> expr . LE expr
    (60) comparation -> expr . LT expr
    (61) comparation -> expr . GE expr
    (62) comparation -> expr . GT expr
    (63) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 194
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MUL             shift and go to state 82
    DIV             shift and go to state 83
    AND             shift and go to state 84
    OR              shift and go to state 85
    LE              shift and go to state 86
    LT              shift and go to state 87
    GE              shift and go to state 88
    GT              shift and go to state 89
    EQ              shift and go to state 90


state 192

    (97) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 195


state 193

    (98) function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .

    LET             reduce using rule 98 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 98 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 98 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 98 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 98 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 98 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 98 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 98 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 98 (function_no_args -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)


state 194

    (96) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 196


state 195

    (97) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .

    LET             reduce using rule 97 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 97 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 97 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 97 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 97 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 97 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 97 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 97 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 97 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)


state 196

    (96) function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .

    LET             reduce using rule 96 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 96 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 96 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 96 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 96 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 96 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 96 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 96 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 96 (function_args -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)

