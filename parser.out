Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> empty
Rule 3     statement -> content SEMICOLON
Rule 4     statement -> content SEMICOLON statement
Rule 5     statement -> noSM statement
Rule 6     statement -> noSM
Rule 7     content -> declaration
Rule 8     content -> assignment
Rule 9     content -> definicion_ajson
Rule 10    noSM -> function
Rule 11    noSM -> condition
Rule 12    noSM -> loop
Rule 13    entero -> ENTERO
Rule 14    decimal -> DECIMAL
Rule 15    num -> entero
Rule 16    num -> decimal
Rule 17    bool -> TR
Rule 18    bool -> FL
Rule 19    declaration -> LET id
Rule 20    id -> var
Rule 21    id -> var COMA id
Rule 22    id -> var IGUAL expr
Rule 23    id -> var IGUAL expr COMA id
Rule 24    var -> CSINCOMILLAS
Rule 25    var -> CSINCOMILLAS PUNTOS tipo
Rule 26    tipo -> INT
Rule 27    tipo -> FLOAT
Rule 28    tipo -> CHARACTER
Rule 29    tipo -> BOOLEAN
Rule 30    tipo -> CSINCOMILLAS
Rule 31    assignment -> var IGUAL expr
Rule 32    variable -> CSINCOMILLAS
Rule 33    cadena -> CARACTER
Rule 34    parentesis -> LPARENT expr RPARENT
Rule 35    expr -> operacion
Rule 36    expr -> num
Rule 37    expr -> bool
Rule 38    expr -> NULL
Rule 39    expr -> variable
Rule 40    expr -> RESTA expr
Rule 41    expr -> SUMA expr
Rule 42    expr -> cadena
Rule 43    expr -> ajson
Rule 44    expr -> parentesis
Rule 45    expr -> punto
Rule 46    expr -> corchete
Rule 47    expr -> functioncall
Rule 48    operacion -> aritmetica
Rule 49    operacion -> binaria
Rule 50    operacion -> comparation
Rule 51    aritmetica -> expr SUMA expr
Rule 52    aritmetica -> expr RESTA expr
Rule 53    aritmetica -> expr MUL expr
Rule 54    aritmetica -> expr DIV expr
Rule 55    binaria -> expr AND expr
Rule 56    binaria -> expr OR expr
Rule 57    binaria -> NOT expr
Rule 58    comparation -> expr LE expr
Rule 59    comparation -> expr LT expr
Rule 60    comparation -> expr GE expr
Rule 61    comparation -> expr GT expr
Rule 62    comparation -> expr EQ expr
Rule 63    definicion_ajson -> TYPE CSINCOMILLAS IGUAL ajson_t
Rule 64    ajson_t -> LBRACKET object_t RBRACKET
Rule 65    object_t -> pair_t COMA object_t
Rule 66    object_t -> pair_t COMA
Rule 67    object_t -> pair_t
Rule 68    pair_t -> clave PUNTOS tipo
Rule 69    pair_t -> clave PUNTOS ajson_t
Rule 70    clave -> CCOMILLAS
Rule 71    clave -> CSINCOMILLAS
Rule 72    ajson -> LBRACKET object RBRACKET
Rule 73    object -> pair COMA object
Rule 74    object -> pair COMA
Rule 75    object -> pair
Rule 76    pair -> clave PUNTOS expr
Rule 77    punto -> CSINCOMILLAS PUNTO CSINCOMILLAS
Rule 78    punto -> CSINCOMILLAS PUNTO punto
Rule 79    punto -> CSINCOMILLAS PUNTO corchete
Rule 80    corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
Rule 81    recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete
Rule 82    recur_corchete -> empty
Rule 83    recur_corchete -> PUNTO CSINCOMILLAS
Rule 84    recur_corchete -> PUNTO punto
Rule 85    condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET
Rule 86    condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
Rule 87    loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
Rule 88    function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
Rule 89    function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
Rule 90    function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
Rule 91    function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
Rule 92    arg_list -> CSINCOMILLAS PUNTOS tipo
Rule 93    arg_list -> CSINCOMILLAS PUNTOS tipo COMA arg_list
Rule 94    functioncall -> CSINCOMILLAS LPARENT RPARENT
Rule 95    functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT
Rule 96    argumentos -> expr
Rule 97    argumentos -> expr COMA argumentos
Rule 98    empty -> <empty>

Terminals, with rules where they appear

AND                  : 55
BOOLEAN              : 29
CARACTER             : 33
CCOMILLAS            : 70 80 81
CHARACTER            : 28
COMA                 : 21 23 65 66 73 74 93 97
CSINCOMILLAS         : 24 25 30 32 63 71 77 77 78 79 80 83 88 89 90 91 92 93 94 95
DECIMAL              : 14
DIV                  : 54
ELSE                 : 86
ENTERO               : 13
EQ                   : 62
FL                   : 18
FLOAT                : 27
FUNCTION             : 88 89 90 91
GE                   : 60
GT                   : 61
IF                   : 85 86
IGUAL                : 22 23 31 63
INT                  : 26
LBRACKET             : 64 72 85 86 86 87 88 89 90 91
LCORCHETE            : 80 81
LE                   : 58
LET                  : 19
LPARENT              : 34 85 86 87 88 89 90 91 94 95
LT                   : 59
MUL                  : 53
NOT                  : 57
NULL                 : 38
OR                   : 56
PUNTO                : 77 78 79 83 84
PUNTOS               : 25 68 69 76 88 89 90 91 92 93
RBRACKET             : 64 72 85 86 86 87 88 89 90 91
RCORCHETE            : 80 81
RESTA                : 40 52
RETURN               : 88 89 90 91
RPARENT              : 34 85 86 87 88 89 90 91 94 95
SEMICOLON            : 3 4 88 89 90 91
SUMA                 : 41 51
TR                   : 17
TYPE                 : 63
WHILE                : 87
error                : 

Nonterminals, with rules where they appear

ajson                : 43
ajson_t              : 63 69
arg_list             : 90 91 93
argumentos           : 95 97
aritmetica           : 48
assignment           : 8
binaria              : 49
bool                 : 37
cadena               : 42
clave                : 68 69 76
comparation          : 50
condition            : 11
content              : 3 4
corchete             : 46 79
decimal              : 16
declaration          : 7
definicion_ajson     : 9
empty                : 2 82
entero               : 15
expr                 : 22 23 31 34 40 41 51 51 52 52 53 53 54 54 55 55 56 56 57 58 58 59 59 60 60 61 61 62 62 76 85 86 87 88 89 90 91 96 97
function             : 10
functioncall         : 47
id                   : 19 21 23
loop                 : 12
noSM                 : 5 6
num                  : 36
object               : 72 73
object_t             : 64 65
operacion            : 35
pair                 : 73 74 75
pair_t               : 65 66 67
parentesis           : 44
program              : 0
punto                : 45 78 84
recur_corchete       : 80 81
statement            : 1 4 5 85 86 86 87 88 90
tipo                 : 25 68 88 89 90 91 92 93
var                  : 20 21 22 23 31
variable             : 39

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . empty
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (98) empty -> .
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (31) assignment -> . var IGUAL expr
    (63) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (88) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (89) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (90) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (91) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (86) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (87) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    $end            reduce using rule 98 (empty -> .)
    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    program                        shift and go to state 1
    statement                      shift and go to state 2
    empty                          shift and go to state 3
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .

    $end            reduce using rule 1 (program -> statement .)


state 3

    (2) program -> empty .

    $end            reduce using rule 2 (program -> empty .)


state 4

    (3) statement -> content . SEMICOLON
    (4) statement -> content . SEMICOLON statement

    SEMICOLON       shift and go to state 19


state 5

    (5) statement -> noSM . statement
    (6) statement -> noSM .
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (31) assignment -> . var IGUAL expr
    (63) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (88) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (89) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (90) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (91) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (86) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (87) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    $end            reduce using rule 6 (statement -> noSM .)
    RBRACKET        reduce using rule 6 (statement -> noSM .)
    RETURN          reduce using rule 6 (statement -> noSM .)
    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    noSM                           shift and go to state 5
    statement                      shift and go to state 20
    content                        shift and go to state 4
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 6

    (7) content -> declaration .

    SEMICOLON       reduce using rule 7 (content -> declaration .)


state 7

    (8) content -> assignment .

    SEMICOLON       reduce using rule 8 (content -> assignment .)


state 8

    (9) content -> definicion_ajson .

    SEMICOLON       reduce using rule 9 (content -> definicion_ajson .)


state 9

    (10) noSM -> function .

    LET             reduce using rule 10 (noSM -> function .)
    TYPE            reduce using rule 10 (noSM -> function .)
    FUNCTION        reduce using rule 10 (noSM -> function .)
    IF              reduce using rule 10 (noSM -> function .)
    WHILE           reduce using rule 10 (noSM -> function .)
    CSINCOMILLAS    reduce using rule 10 (noSM -> function .)
    $end            reduce using rule 10 (noSM -> function .)
    RBRACKET        reduce using rule 10 (noSM -> function .)
    RETURN          reduce using rule 10 (noSM -> function .)


state 10

    (11) noSM -> condition .

    LET             reduce using rule 11 (noSM -> condition .)
    TYPE            reduce using rule 11 (noSM -> condition .)
    FUNCTION        reduce using rule 11 (noSM -> condition .)
    IF              reduce using rule 11 (noSM -> condition .)
    WHILE           reduce using rule 11 (noSM -> condition .)
    CSINCOMILLAS    reduce using rule 11 (noSM -> condition .)
    $end            reduce using rule 11 (noSM -> condition .)
    RBRACKET        reduce using rule 11 (noSM -> condition .)
    RETURN          reduce using rule 11 (noSM -> condition .)


state 11

    (12) noSM -> loop .

    LET             reduce using rule 12 (noSM -> loop .)
    TYPE            reduce using rule 12 (noSM -> loop .)
    FUNCTION        reduce using rule 12 (noSM -> loop .)
    IF              reduce using rule 12 (noSM -> loop .)
    WHILE           reduce using rule 12 (noSM -> loop .)
    CSINCOMILLAS    reduce using rule 12 (noSM -> loop .)
    $end            reduce using rule 12 (noSM -> loop .)
    RBRACKET        reduce using rule 12 (noSM -> loop .)
    RETURN          reduce using rule 12 (noSM -> loop .)


state 12

    (19) declaration -> LET . id
    (20) id -> . var
    (21) id -> . var COMA id
    (22) id -> . var IGUAL expr
    (23) id -> . var IGUAL expr COMA id
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    CSINCOMILLAS    shift and go to state 15

    id                             shift and go to state 21
    var                            shift and go to state 22

state 13

    (31) assignment -> var . IGUAL expr

    IGUAL           shift and go to state 23


state 14

    (63) definicion_ajson -> TYPE . CSINCOMILLAS IGUAL ajson_t

    CSINCOMILLAS    shift and go to state 24


state 15

    (24) var -> CSINCOMILLAS .
    (25) var -> CSINCOMILLAS . PUNTOS tipo

    IGUAL           reduce using rule 24 (var -> CSINCOMILLAS .)
    COMA            reduce using rule 24 (var -> CSINCOMILLAS .)
    SEMICOLON       reduce using rule 24 (var -> CSINCOMILLAS .)
    PUNTOS          shift and go to state 25


state 16

    (88) function -> FUNCTION . CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (89) function -> FUNCTION . CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (90) function -> FUNCTION . CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (91) function -> FUNCTION . CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    CSINCOMILLAS    shift and go to state 26


state 17

    (85) condition -> IF . LPARENT expr RPARENT LBRACKET statement RBRACKET
    (86) condition -> IF . LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET

    LPARENT         shift and go to state 27


state 18

    (87) loop -> WHILE . LPARENT expr RPARENT LBRACKET statement RBRACKET

    LPARENT         shift and go to state 28


state 19

    (3) statement -> content SEMICOLON .
    (4) statement -> content SEMICOLON . statement
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (31) assignment -> . var IGUAL expr
    (63) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (88) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (89) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (90) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (91) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (86) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (87) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    $end            reduce using rule 3 (statement -> content SEMICOLON .)
    RBRACKET        reduce using rule 3 (statement -> content SEMICOLON .)
    RETURN          reduce using rule 3 (statement -> content SEMICOLON .)
    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    content                        shift and go to state 4
    statement                      shift and go to state 29
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 20

    (5) statement -> noSM statement .

    $end            reduce using rule 5 (statement -> noSM statement .)
    RBRACKET        reduce using rule 5 (statement -> noSM statement .)
    RETURN          reduce using rule 5 (statement -> noSM statement .)


state 21

    (19) declaration -> LET id .

    SEMICOLON       reduce using rule 19 (declaration -> LET id .)


state 22

    (20) id -> var .
    (21) id -> var . COMA id
    (22) id -> var . IGUAL expr
    (23) id -> var . IGUAL expr COMA id

    SEMICOLON       reduce using rule 20 (id -> var .)
    COMA            shift and go to state 30
    IGUAL           shift and go to state 31


state 23

    (31) assignment -> var IGUAL . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 32
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 24

    (63) definicion_ajson -> TYPE CSINCOMILLAS . IGUAL ajson_t

    IGUAL           shift and go to state 60


state 25

    (25) var -> CSINCOMILLAS PUNTOS . tipo
    (26) tipo -> . INT
    (27) tipo -> . FLOAT
    (28) tipo -> . CHARACTER
    (29) tipo -> . BOOLEAN
    (30) tipo -> . CSINCOMILLAS

    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    CHARACTER       shift and go to state 65
    BOOLEAN         shift and go to state 66
    CSINCOMILLAS    shift and go to state 61

    tipo                           shift and go to state 62

state 26

    (88) function -> FUNCTION CSINCOMILLAS . LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (89) function -> FUNCTION CSINCOMILLAS . LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (90) function -> FUNCTION CSINCOMILLAS . LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (91) function -> FUNCTION CSINCOMILLAS . LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    LPARENT         shift and go to state 67


state 27

    (85) condition -> IF LPARENT . expr RPARENT LBRACKET statement RBRACKET
    (86) condition -> IF LPARENT . expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 68
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 28

    (87) loop -> WHILE LPARENT . expr RPARENT LBRACKET statement RBRACKET
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 69
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 29

    (4) statement -> content SEMICOLON statement .

    $end            reduce using rule 4 (statement -> content SEMICOLON statement .)
    RBRACKET        reduce using rule 4 (statement -> content SEMICOLON statement .)
    RETURN          reduce using rule 4 (statement -> content SEMICOLON statement .)


state 30

    (21) id -> var COMA . id
    (20) id -> . var
    (21) id -> . var COMA id
    (22) id -> . var IGUAL expr
    (23) id -> . var IGUAL expr COMA id
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    CSINCOMILLAS    shift and go to state 15

    var                            shift and go to state 22
    id                             shift and go to state 70

state 31

    (22) id -> var IGUAL . expr
    (23) id -> var IGUAL . expr COMA id
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 71
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 32

    (31) assignment -> var IGUAL expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    SEMICOLON       reduce using rule 31 (assignment -> var IGUAL expr .)
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77
    LE              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82


state 33

    (35) expr -> operacion .

    SUMA            reduce using rule 35 (expr -> operacion .)
    RESTA           reduce using rule 35 (expr -> operacion .)
    MUL             reduce using rule 35 (expr -> operacion .)
    DIV             reduce using rule 35 (expr -> operacion .)
    AND             reduce using rule 35 (expr -> operacion .)
    OR              reduce using rule 35 (expr -> operacion .)
    LE              reduce using rule 35 (expr -> operacion .)
    LT              reduce using rule 35 (expr -> operacion .)
    GE              reduce using rule 35 (expr -> operacion .)
    GT              reduce using rule 35 (expr -> operacion .)
    EQ              reduce using rule 35 (expr -> operacion .)
    SEMICOLON       reduce using rule 35 (expr -> operacion .)
    RPARENT         reduce using rule 35 (expr -> operacion .)
    COMA            reduce using rule 35 (expr -> operacion .)
    RBRACKET        reduce using rule 35 (expr -> operacion .)


state 34

    (36) expr -> num .

    SUMA            reduce using rule 36 (expr -> num .)
    RESTA           reduce using rule 36 (expr -> num .)
    MUL             reduce using rule 36 (expr -> num .)
    DIV             reduce using rule 36 (expr -> num .)
    AND             reduce using rule 36 (expr -> num .)
    OR              reduce using rule 36 (expr -> num .)
    LE              reduce using rule 36 (expr -> num .)
    LT              reduce using rule 36 (expr -> num .)
    GE              reduce using rule 36 (expr -> num .)
    GT              reduce using rule 36 (expr -> num .)
    EQ              reduce using rule 36 (expr -> num .)
    SEMICOLON       reduce using rule 36 (expr -> num .)
    RPARENT         reduce using rule 36 (expr -> num .)
    COMA            reduce using rule 36 (expr -> num .)
    RBRACKET        reduce using rule 36 (expr -> num .)


state 35

    (37) expr -> bool .

    SUMA            reduce using rule 37 (expr -> bool .)
    RESTA           reduce using rule 37 (expr -> bool .)
    MUL             reduce using rule 37 (expr -> bool .)
    DIV             reduce using rule 37 (expr -> bool .)
    AND             reduce using rule 37 (expr -> bool .)
    OR              reduce using rule 37 (expr -> bool .)
    LE              reduce using rule 37 (expr -> bool .)
    LT              reduce using rule 37 (expr -> bool .)
    GE              reduce using rule 37 (expr -> bool .)
    GT              reduce using rule 37 (expr -> bool .)
    EQ              reduce using rule 37 (expr -> bool .)
    SEMICOLON       reduce using rule 37 (expr -> bool .)
    RPARENT         reduce using rule 37 (expr -> bool .)
    COMA            reduce using rule 37 (expr -> bool .)
    RBRACKET        reduce using rule 37 (expr -> bool .)


state 36

    (38) expr -> NULL .

    SUMA            reduce using rule 38 (expr -> NULL .)
    RESTA           reduce using rule 38 (expr -> NULL .)
    MUL             reduce using rule 38 (expr -> NULL .)
    DIV             reduce using rule 38 (expr -> NULL .)
    AND             reduce using rule 38 (expr -> NULL .)
    OR              reduce using rule 38 (expr -> NULL .)
    LE              reduce using rule 38 (expr -> NULL .)
    LT              reduce using rule 38 (expr -> NULL .)
    GE              reduce using rule 38 (expr -> NULL .)
    GT              reduce using rule 38 (expr -> NULL .)
    EQ              reduce using rule 38 (expr -> NULL .)
    SEMICOLON       reduce using rule 38 (expr -> NULL .)
    RPARENT         reduce using rule 38 (expr -> NULL .)
    COMA            reduce using rule 38 (expr -> NULL .)
    RBRACKET        reduce using rule 38 (expr -> NULL .)


state 37

    (39) expr -> variable .

    SUMA            reduce using rule 39 (expr -> variable .)
    RESTA           reduce using rule 39 (expr -> variable .)
    MUL             reduce using rule 39 (expr -> variable .)
    DIV             reduce using rule 39 (expr -> variable .)
    AND             reduce using rule 39 (expr -> variable .)
    OR              reduce using rule 39 (expr -> variable .)
    LE              reduce using rule 39 (expr -> variable .)
    LT              reduce using rule 39 (expr -> variable .)
    GE              reduce using rule 39 (expr -> variable .)
    GT              reduce using rule 39 (expr -> variable .)
    EQ              reduce using rule 39 (expr -> variable .)
    SEMICOLON       reduce using rule 39 (expr -> variable .)
    RPARENT         reduce using rule 39 (expr -> variable .)
    COMA            reduce using rule 39 (expr -> variable .)
    RBRACKET        reduce using rule 39 (expr -> variable .)


state 38

    (40) expr -> RESTA . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 83
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 39

    (41) expr -> SUMA . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 84
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 40

    (42) expr -> cadena .

    SUMA            reduce using rule 42 (expr -> cadena .)
    RESTA           reduce using rule 42 (expr -> cadena .)
    MUL             reduce using rule 42 (expr -> cadena .)
    DIV             reduce using rule 42 (expr -> cadena .)
    AND             reduce using rule 42 (expr -> cadena .)
    OR              reduce using rule 42 (expr -> cadena .)
    LE              reduce using rule 42 (expr -> cadena .)
    LT              reduce using rule 42 (expr -> cadena .)
    GE              reduce using rule 42 (expr -> cadena .)
    GT              reduce using rule 42 (expr -> cadena .)
    EQ              reduce using rule 42 (expr -> cadena .)
    SEMICOLON       reduce using rule 42 (expr -> cadena .)
    RPARENT         reduce using rule 42 (expr -> cadena .)
    COMA            reduce using rule 42 (expr -> cadena .)
    RBRACKET        reduce using rule 42 (expr -> cadena .)


state 41

    (43) expr -> ajson .

    SUMA            reduce using rule 43 (expr -> ajson .)
    RESTA           reduce using rule 43 (expr -> ajson .)
    MUL             reduce using rule 43 (expr -> ajson .)
    DIV             reduce using rule 43 (expr -> ajson .)
    AND             reduce using rule 43 (expr -> ajson .)
    OR              reduce using rule 43 (expr -> ajson .)
    LE              reduce using rule 43 (expr -> ajson .)
    LT              reduce using rule 43 (expr -> ajson .)
    GE              reduce using rule 43 (expr -> ajson .)
    GT              reduce using rule 43 (expr -> ajson .)
    EQ              reduce using rule 43 (expr -> ajson .)
    SEMICOLON       reduce using rule 43 (expr -> ajson .)
    RPARENT         reduce using rule 43 (expr -> ajson .)
    COMA            reduce using rule 43 (expr -> ajson .)
    RBRACKET        reduce using rule 43 (expr -> ajson .)


state 42

    (44) expr -> parentesis .

    SUMA            reduce using rule 44 (expr -> parentesis .)
    RESTA           reduce using rule 44 (expr -> parentesis .)
    MUL             reduce using rule 44 (expr -> parentesis .)
    DIV             reduce using rule 44 (expr -> parentesis .)
    AND             reduce using rule 44 (expr -> parentesis .)
    OR              reduce using rule 44 (expr -> parentesis .)
    LE              reduce using rule 44 (expr -> parentesis .)
    LT              reduce using rule 44 (expr -> parentesis .)
    GE              reduce using rule 44 (expr -> parentesis .)
    GT              reduce using rule 44 (expr -> parentesis .)
    EQ              reduce using rule 44 (expr -> parentesis .)
    SEMICOLON       reduce using rule 44 (expr -> parentesis .)
    RPARENT         reduce using rule 44 (expr -> parentesis .)
    COMA            reduce using rule 44 (expr -> parentesis .)
    RBRACKET        reduce using rule 44 (expr -> parentesis .)


state 43

    (45) expr -> punto .

    SUMA            reduce using rule 45 (expr -> punto .)
    RESTA           reduce using rule 45 (expr -> punto .)
    MUL             reduce using rule 45 (expr -> punto .)
    DIV             reduce using rule 45 (expr -> punto .)
    AND             reduce using rule 45 (expr -> punto .)
    OR              reduce using rule 45 (expr -> punto .)
    LE              reduce using rule 45 (expr -> punto .)
    LT              reduce using rule 45 (expr -> punto .)
    GE              reduce using rule 45 (expr -> punto .)
    GT              reduce using rule 45 (expr -> punto .)
    EQ              reduce using rule 45 (expr -> punto .)
    SEMICOLON       reduce using rule 45 (expr -> punto .)
    RPARENT         reduce using rule 45 (expr -> punto .)
    COMA            reduce using rule 45 (expr -> punto .)
    RBRACKET        reduce using rule 45 (expr -> punto .)


state 44

    (46) expr -> corchete .

    SUMA            reduce using rule 46 (expr -> corchete .)
    RESTA           reduce using rule 46 (expr -> corchete .)
    MUL             reduce using rule 46 (expr -> corchete .)
    DIV             reduce using rule 46 (expr -> corchete .)
    AND             reduce using rule 46 (expr -> corchete .)
    OR              reduce using rule 46 (expr -> corchete .)
    LE              reduce using rule 46 (expr -> corchete .)
    LT              reduce using rule 46 (expr -> corchete .)
    GE              reduce using rule 46 (expr -> corchete .)
    GT              reduce using rule 46 (expr -> corchete .)
    EQ              reduce using rule 46 (expr -> corchete .)
    SEMICOLON       reduce using rule 46 (expr -> corchete .)
    RPARENT         reduce using rule 46 (expr -> corchete .)
    COMA            reduce using rule 46 (expr -> corchete .)
    RBRACKET        reduce using rule 46 (expr -> corchete .)


state 45

    (47) expr -> functioncall .

    SUMA            reduce using rule 47 (expr -> functioncall .)
    RESTA           reduce using rule 47 (expr -> functioncall .)
    MUL             reduce using rule 47 (expr -> functioncall .)
    DIV             reduce using rule 47 (expr -> functioncall .)
    AND             reduce using rule 47 (expr -> functioncall .)
    OR              reduce using rule 47 (expr -> functioncall .)
    LE              reduce using rule 47 (expr -> functioncall .)
    LT              reduce using rule 47 (expr -> functioncall .)
    GE              reduce using rule 47 (expr -> functioncall .)
    GT              reduce using rule 47 (expr -> functioncall .)
    EQ              reduce using rule 47 (expr -> functioncall .)
    SEMICOLON       reduce using rule 47 (expr -> functioncall .)
    RPARENT         reduce using rule 47 (expr -> functioncall .)
    COMA            reduce using rule 47 (expr -> functioncall .)
    RBRACKET        reduce using rule 47 (expr -> functioncall .)


state 46

    (48) operacion -> aritmetica .

    SUMA            reduce using rule 48 (operacion -> aritmetica .)
    RESTA           reduce using rule 48 (operacion -> aritmetica .)
    MUL             reduce using rule 48 (operacion -> aritmetica .)
    DIV             reduce using rule 48 (operacion -> aritmetica .)
    AND             reduce using rule 48 (operacion -> aritmetica .)
    OR              reduce using rule 48 (operacion -> aritmetica .)
    LE              reduce using rule 48 (operacion -> aritmetica .)
    LT              reduce using rule 48 (operacion -> aritmetica .)
    GE              reduce using rule 48 (operacion -> aritmetica .)
    GT              reduce using rule 48 (operacion -> aritmetica .)
    EQ              reduce using rule 48 (operacion -> aritmetica .)
    SEMICOLON       reduce using rule 48 (operacion -> aritmetica .)
    RPARENT         reduce using rule 48 (operacion -> aritmetica .)
    COMA            reduce using rule 48 (operacion -> aritmetica .)
    RBRACKET        reduce using rule 48 (operacion -> aritmetica .)


state 47

    (49) operacion -> binaria .

    SUMA            reduce using rule 49 (operacion -> binaria .)
    RESTA           reduce using rule 49 (operacion -> binaria .)
    MUL             reduce using rule 49 (operacion -> binaria .)
    DIV             reduce using rule 49 (operacion -> binaria .)
    AND             reduce using rule 49 (operacion -> binaria .)
    OR              reduce using rule 49 (operacion -> binaria .)
    LE              reduce using rule 49 (operacion -> binaria .)
    LT              reduce using rule 49 (operacion -> binaria .)
    GE              reduce using rule 49 (operacion -> binaria .)
    GT              reduce using rule 49 (operacion -> binaria .)
    EQ              reduce using rule 49 (operacion -> binaria .)
    SEMICOLON       reduce using rule 49 (operacion -> binaria .)
    RPARENT         reduce using rule 49 (operacion -> binaria .)
    COMA            reduce using rule 49 (operacion -> binaria .)
    RBRACKET        reduce using rule 49 (operacion -> binaria .)


state 48

    (50) operacion -> comparation .

    SUMA            reduce using rule 50 (operacion -> comparation .)
    RESTA           reduce using rule 50 (operacion -> comparation .)
    MUL             reduce using rule 50 (operacion -> comparation .)
    DIV             reduce using rule 50 (operacion -> comparation .)
    AND             reduce using rule 50 (operacion -> comparation .)
    OR              reduce using rule 50 (operacion -> comparation .)
    LE              reduce using rule 50 (operacion -> comparation .)
    LT              reduce using rule 50 (operacion -> comparation .)
    GE              reduce using rule 50 (operacion -> comparation .)
    GT              reduce using rule 50 (operacion -> comparation .)
    EQ              reduce using rule 50 (operacion -> comparation .)
    SEMICOLON       reduce using rule 50 (operacion -> comparation .)
    RPARENT         reduce using rule 50 (operacion -> comparation .)
    COMA            reduce using rule 50 (operacion -> comparation .)
    RBRACKET        reduce using rule 50 (operacion -> comparation .)


state 49

    (15) num -> entero .

    SUMA            reduce using rule 15 (num -> entero .)
    RESTA           reduce using rule 15 (num -> entero .)
    MUL             reduce using rule 15 (num -> entero .)
    DIV             reduce using rule 15 (num -> entero .)
    AND             reduce using rule 15 (num -> entero .)
    OR              reduce using rule 15 (num -> entero .)
    LE              reduce using rule 15 (num -> entero .)
    LT              reduce using rule 15 (num -> entero .)
    GE              reduce using rule 15 (num -> entero .)
    GT              reduce using rule 15 (num -> entero .)
    EQ              reduce using rule 15 (num -> entero .)
    SEMICOLON       reduce using rule 15 (num -> entero .)
    RPARENT         reduce using rule 15 (num -> entero .)
    COMA            reduce using rule 15 (num -> entero .)
    RBRACKET        reduce using rule 15 (num -> entero .)


state 50

    (16) num -> decimal .

    SUMA            reduce using rule 16 (num -> decimal .)
    RESTA           reduce using rule 16 (num -> decimal .)
    MUL             reduce using rule 16 (num -> decimal .)
    DIV             reduce using rule 16 (num -> decimal .)
    AND             reduce using rule 16 (num -> decimal .)
    OR              reduce using rule 16 (num -> decimal .)
    LE              reduce using rule 16 (num -> decimal .)
    LT              reduce using rule 16 (num -> decimal .)
    GE              reduce using rule 16 (num -> decimal .)
    GT              reduce using rule 16 (num -> decimal .)
    EQ              reduce using rule 16 (num -> decimal .)
    SEMICOLON       reduce using rule 16 (num -> decimal .)
    RPARENT         reduce using rule 16 (num -> decimal .)
    COMA            reduce using rule 16 (num -> decimal .)
    RBRACKET        reduce using rule 16 (num -> decimal .)


state 51

    (17) bool -> TR .

    SUMA            reduce using rule 17 (bool -> TR .)
    RESTA           reduce using rule 17 (bool -> TR .)
    MUL             reduce using rule 17 (bool -> TR .)
    DIV             reduce using rule 17 (bool -> TR .)
    AND             reduce using rule 17 (bool -> TR .)
    OR              reduce using rule 17 (bool -> TR .)
    LE              reduce using rule 17 (bool -> TR .)
    LT              reduce using rule 17 (bool -> TR .)
    GE              reduce using rule 17 (bool -> TR .)
    GT              reduce using rule 17 (bool -> TR .)
    EQ              reduce using rule 17 (bool -> TR .)
    SEMICOLON       reduce using rule 17 (bool -> TR .)
    RPARENT         reduce using rule 17 (bool -> TR .)
    COMA            reduce using rule 17 (bool -> TR .)
    RBRACKET        reduce using rule 17 (bool -> TR .)


state 52

    (18) bool -> FL .

    SUMA            reduce using rule 18 (bool -> FL .)
    RESTA           reduce using rule 18 (bool -> FL .)
    MUL             reduce using rule 18 (bool -> FL .)
    DIV             reduce using rule 18 (bool -> FL .)
    AND             reduce using rule 18 (bool -> FL .)
    OR              reduce using rule 18 (bool -> FL .)
    LE              reduce using rule 18 (bool -> FL .)
    LT              reduce using rule 18 (bool -> FL .)
    GE              reduce using rule 18 (bool -> FL .)
    GT              reduce using rule 18 (bool -> FL .)
    EQ              reduce using rule 18 (bool -> FL .)
    SEMICOLON       reduce using rule 18 (bool -> FL .)
    RPARENT         reduce using rule 18 (bool -> FL .)
    COMA            reduce using rule 18 (bool -> FL .)
    RBRACKET        reduce using rule 18 (bool -> FL .)


state 53

    (32) variable -> CSINCOMILLAS .
    (77) punto -> CSINCOMILLAS . PUNTO CSINCOMILLAS
    (78) punto -> CSINCOMILLAS . PUNTO punto
    (79) punto -> CSINCOMILLAS . PUNTO corchete
    (80) corchete -> CSINCOMILLAS . LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> CSINCOMILLAS . LPARENT RPARENT
    (95) functioncall -> CSINCOMILLAS . LPARENT argumentos RPARENT

    SUMA            reduce using rule 32 (variable -> CSINCOMILLAS .)
    RESTA           reduce using rule 32 (variable -> CSINCOMILLAS .)
    MUL             reduce using rule 32 (variable -> CSINCOMILLAS .)
    DIV             reduce using rule 32 (variable -> CSINCOMILLAS .)
    AND             reduce using rule 32 (variable -> CSINCOMILLAS .)
    OR              reduce using rule 32 (variable -> CSINCOMILLAS .)
    LE              reduce using rule 32 (variable -> CSINCOMILLAS .)
    LT              reduce using rule 32 (variable -> CSINCOMILLAS .)
    GE              reduce using rule 32 (variable -> CSINCOMILLAS .)
    GT              reduce using rule 32 (variable -> CSINCOMILLAS .)
    EQ              reduce using rule 32 (variable -> CSINCOMILLAS .)
    SEMICOLON       reduce using rule 32 (variable -> CSINCOMILLAS .)
    RPARENT         reduce using rule 32 (variable -> CSINCOMILLAS .)
    COMA            reduce using rule 32 (variable -> CSINCOMILLAS .)
    RBRACKET        reduce using rule 32 (variable -> CSINCOMILLAS .)
    PUNTO           shift and go to state 85
    LCORCHETE       shift and go to state 86
    LPARENT         shift and go to state 87


state 54

    (33) cadena -> CARACTER .

    SUMA            reduce using rule 33 (cadena -> CARACTER .)
    RESTA           reduce using rule 33 (cadena -> CARACTER .)
    MUL             reduce using rule 33 (cadena -> CARACTER .)
    DIV             reduce using rule 33 (cadena -> CARACTER .)
    AND             reduce using rule 33 (cadena -> CARACTER .)
    OR              reduce using rule 33 (cadena -> CARACTER .)
    LE              reduce using rule 33 (cadena -> CARACTER .)
    LT              reduce using rule 33 (cadena -> CARACTER .)
    GE              reduce using rule 33 (cadena -> CARACTER .)
    GT              reduce using rule 33 (cadena -> CARACTER .)
    EQ              reduce using rule 33 (cadena -> CARACTER .)
    SEMICOLON       reduce using rule 33 (cadena -> CARACTER .)
    RPARENT         reduce using rule 33 (cadena -> CARACTER .)
    COMA            reduce using rule 33 (cadena -> CARACTER .)
    RBRACKET        reduce using rule 33 (cadena -> CARACTER .)


state 55

    (72) ajson -> LBRACKET . object RBRACKET
    (73) object -> . pair COMA object
    (74) object -> . pair COMA
    (75) object -> . pair
    (76) pair -> . clave PUNTOS expr
    (70) clave -> . CCOMILLAS
    (71) clave -> . CSINCOMILLAS

    CCOMILLAS       shift and go to state 91
    CSINCOMILLAS    shift and go to state 92

    object                         shift and go to state 88
    pair                           shift and go to state 89
    clave                          shift and go to state 90

state 56

    (34) parentesis -> LPARENT . expr RPARENT
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 93
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 57

    (57) binaria -> NOT . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 94
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 58

    (13) entero -> ENTERO .

    SUMA            reduce using rule 13 (entero -> ENTERO .)
    RESTA           reduce using rule 13 (entero -> ENTERO .)
    MUL             reduce using rule 13 (entero -> ENTERO .)
    DIV             reduce using rule 13 (entero -> ENTERO .)
    AND             reduce using rule 13 (entero -> ENTERO .)
    OR              reduce using rule 13 (entero -> ENTERO .)
    LE              reduce using rule 13 (entero -> ENTERO .)
    LT              reduce using rule 13 (entero -> ENTERO .)
    GE              reduce using rule 13 (entero -> ENTERO .)
    GT              reduce using rule 13 (entero -> ENTERO .)
    EQ              reduce using rule 13 (entero -> ENTERO .)
    SEMICOLON       reduce using rule 13 (entero -> ENTERO .)
    RPARENT         reduce using rule 13 (entero -> ENTERO .)
    COMA            reduce using rule 13 (entero -> ENTERO .)
    RBRACKET        reduce using rule 13 (entero -> ENTERO .)


state 59

    (14) decimal -> DECIMAL .

    SUMA            reduce using rule 14 (decimal -> DECIMAL .)
    RESTA           reduce using rule 14 (decimal -> DECIMAL .)
    MUL             reduce using rule 14 (decimal -> DECIMAL .)
    DIV             reduce using rule 14 (decimal -> DECIMAL .)
    AND             reduce using rule 14 (decimal -> DECIMAL .)
    OR              reduce using rule 14 (decimal -> DECIMAL .)
    LE              reduce using rule 14 (decimal -> DECIMAL .)
    LT              reduce using rule 14 (decimal -> DECIMAL .)
    GE              reduce using rule 14 (decimal -> DECIMAL .)
    GT              reduce using rule 14 (decimal -> DECIMAL .)
    EQ              reduce using rule 14 (decimal -> DECIMAL .)
    SEMICOLON       reduce using rule 14 (decimal -> DECIMAL .)
    RPARENT         reduce using rule 14 (decimal -> DECIMAL .)
    COMA            reduce using rule 14 (decimal -> DECIMAL .)
    RBRACKET        reduce using rule 14 (decimal -> DECIMAL .)


state 60

    (63) definicion_ajson -> TYPE CSINCOMILLAS IGUAL . ajson_t
    (64) ajson_t -> . LBRACKET object_t RBRACKET

    LBRACKET        shift and go to state 96

    ajson_t                        shift and go to state 95

state 61

    (30) tipo -> CSINCOMILLAS .

    IGUAL           reduce using rule 30 (tipo -> CSINCOMILLAS .)
    COMA            reduce using rule 30 (tipo -> CSINCOMILLAS .)
    SEMICOLON       reduce using rule 30 (tipo -> CSINCOMILLAS .)
    RPARENT         reduce using rule 30 (tipo -> CSINCOMILLAS .)
    LBRACKET        reduce using rule 30 (tipo -> CSINCOMILLAS .)
    RBRACKET        reduce using rule 30 (tipo -> CSINCOMILLAS .)


state 62

    (25) var -> CSINCOMILLAS PUNTOS tipo .

    IGUAL           reduce using rule 25 (var -> CSINCOMILLAS PUNTOS tipo .)
    COMA            reduce using rule 25 (var -> CSINCOMILLAS PUNTOS tipo .)
    SEMICOLON       reduce using rule 25 (var -> CSINCOMILLAS PUNTOS tipo .)


state 63

    (26) tipo -> INT .

    IGUAL           reduce using rule 26 (tipo -> INT .)
    COMA            reduce using rule 26 (tipo -> INT .)
    SEMICOLON       reduce using rule 26 (tipo -> INT .)
    RPARENT         reduce using rule 26 (tipo -> INT .)
    LBRACKET        reduce using rule 26 (tipo -> INT .)
    RBRACKET        reduce using rule 26 (tipo -> INT .)


state 64

    (27) tipo -> FLOAT .

    IGUAL           reduce using rule 27 (tipo -> FLOAT .)
    COMA            reduce using rule 27 (tipo -> FLOAT .)
    SEMICOLON       reduce using rule 27 (tipo -> FLOAT .)
    RPARENT         reduce using rule 27 (tipo -> FLOAT .)
    LBRACKET        reduce using rule 27 (tipo -> FLOAT .)
    RBRACKET        reduce using rule 27 (tipo -> FLOAT .)


state 65

    (28) tipo -> CHARACTER .

    IGUAL           reduce using rule 28 (tipo -> CHARACTER .)
    COMA            reduce using rule 28 (tipo -> CHARACTER .)
    SEMICOLON       reduce using rule 28 (tipo -> CHARACTER .)
    RPARENT         reduce using rule 28 (tipo -> CHARACTER .)
    LBRACKET        reduce using rule 28 (tipo -> CHARACTER .)
    RBRACKET        reduce using rule 28 (tipo -> CHARACTER .)


state 66

    (29) tipo -> BOOLEAN .

    IGUAL           reduce using rule 29 (tipo -> BOOLEAN .)
    COMA            reduce using rule 29 (tipo -> BOOLEAN .)
    SEMICOLON       reduce using rule 29 (tipo -> BOOLEAN .)
    RPARENT         reduce using rule 29 (tipo -> BOOLEAN .)
    LBRACKET        reduce using rule 29 (tipo -> BOOLEAN .)
    RBRACKET        reduce using rule 29 (tipo -> BOOLEAN .)


state 67

    (88) function -> FUNCTION CSINCOMILLAS LPARENT . RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (89) function -> FUNCTION CSINCOMILLAS LPARENT . RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (90) function -> FUNCTION CSINCOMILLAS LPARENT . arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (91) function -> FUNCTION CSINCOMILLAS LPARENT . arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (92) arg_list -> . CSINCOMILLAS PUNTOS tipo
    (93) arg_list -> . CSINCOMILLAS PUNTOS tipo COMA arg_list

    RPARENT         shift and go to state 98
    CSINCOMILLAS    shift and go to state 97

    arg_list                       shift and go to state 99

state 68

    (85) condition -> IF LPARENT expr . RPARENT LBRACKET statement RBRACKET
    (86) condition -> IF LPARENT expr . RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    RPARENT         shift and go to state 100
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77
    LE              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82


state 69

    (87) loop -> WHILE LPARENT expr . RPARENT LBRACKET statement RBRACKET
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    RPARENT         shift and go to state 101
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77
    LE              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82


state 70

    (21) id -> var COMA id .

    SEMICOLON       reduce using rule 21 (id -> var COMA id .)


state 71

    (22) id -> var IGUAL expr .
    (23) id -> var IGUAL expr . COMA id
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    SEMICOLON       reduce using rule 22 (id -> var IGUAL expr .)
    COMA            shift and go to state 102
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77
    LE              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82


state 72

    (51) aritmetica -> expr SUMA . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 103
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 73

    (52) aritmetica -> expr RESTA . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 104
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 74

    (53) aritmetica -> expr MUL . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 105
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 75

    (54) aritmetica -> expr DIV . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 106
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 76

    (55) binaria -> expr AND . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 107
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 77

    (56) binaria -> expr OR . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 108
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 78

    (58) comparation -> expr LE . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 109
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 79

    (59) comparation -> expr LT . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 110
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 80

    (60) comparation -> expr GE . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 111
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 81

    (61) comparation -> expr GT . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 112
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 82

    (62) comparation -> expr EQ . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 113
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 83

    (40) expr -> RESTA expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    SUMA            reduce using rule 40 (expr -> RESTA expr .)
    RESTA           reduce using rule 40 (expr -> RESTA expr .)
    MUL             reduce using rule 40 (expr -> RESTA expr .)
    DIV             reduce using rule 40 (expr -> RESTA expr .)
    AND             reduce using rule 40 (expr -> RESTA expr .)
    OR              reduce using rule 40 (expr -> RESTA expr .)
    LE              reduce using rule 40 (expr -> RESTA expr .)
    LT              reduce using rule 40 (expr -> RESTA expr .)
    GE              reduce using rule 40 (expr -> RESTA expr .)
    GT              reduce using rule 40 (expr -> RESTA expr .)
    EQ              reduce using rule 40 (expr -> RESTA expr .)
    SEMICOLON       reduce using rule 40 (expr -> RESTA expr .)
    RPARENT         reduce using rule 40 (expr -> RESTA expr .)
    COMA            reduce using rule 40 (expr -> RESTA expr .)
    RBRACKET        reduce using rule 40 (expr -> RESTA expr .)

  ! SUMA            [ shift and go to state 72 ]
  ! RESTA           [ shift and go to state 73 ]
  ! MUL             [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]


state 84

    (41) expr -> SUMA expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    SUMA            reduce using rule 41 (expr -> SUMA expr .)
    RESTA           reduce using rule 41 (expr -> SUMA expr .)
    MUL             reduce using rule 41 (expr -> SUMA expr .)
    DIV             reduce using rule 41 (expr -> SUMA expr .)
    AND             reduce using rule 41 (expr -> SUMA expr .)
    OR              reduce using rule 41 (expr -> SUMA expr .)
    LE              reduce using rule 41 (expr -> SUMA expr .)
    LT              reduce using rule 41 (expr -> SUMA expr .)
    GE              reduce using rule 41 (expr -> SUMA expr .)
    GT              reduce using rule 41 (expr -> SUMA expr .)
    EQ              reduce using rule 41 (expr -> SUMA expr .)
    SEMICOLON       reduce using rule 41 (expr -> SUMA expr .)
    RPARENT         reduce using rule 41 (expr -> SUMA expr .)
    COMA            reduce using rule 41 (expr -> SUMA expr .)
    RBRACKET        reduce using rule 41 (expr -> SUMA expr .)

  ! SUMA            [ shift and go to state 72 ]
  ! RESTA           [ shift and go to state 73 ]
  ! MUL             [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]


state 85

    (77) punto -> CSINCOMILLAS PUNTO . CSINCOMILLAS
    (78) punto -> CSINCOMILLAS PUNTO . punto
    (79) punto -> CSINCOMILLAS PUNTO . corchete
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete

    CSINCOMILLAS    shift and go to state 114

    punto                          shift and go to state 115
    corchete                       shift and go to state 116

state 86

    (80) corchete -> CSINCOMILLAS LCORCHETE . CCOMILLAS RCORCHETE recur_corchete

    CCOMILLAS       shift and go to state 117


state 87

    (94) functioncall -> CSINCOMILLAS LPARENT . RPARENT
    (95) functioncall -> CSINCOMILLAS LPARENT . argumentos RPARENT
    (96) argumentos -> . expr
    (97) argumentos -> . expr COMA argumentos
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    RPARENT         shift and go to state 118
    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    argumentos                     shift and go to state 119
    expr                           shift and go to state 120
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 88

    (72) ajson -> LBRACKET object . RBRACKET

    RBRACKET        shift and go to state 121


state 89

    (73) object -> pair . COMA object
    (74) object -> pair . COMA
    (75) object -> pair .

    COMA            shift and go to state 122
    RBRACKET        reduce using rule 75 (object -> pair .)


state 90

    (76) pair -> clave . PUNTOS expr

    PUNTOS          shift and go to state 123


state 91

    (70) clave -> CCOMILLAS .

    PUNTOS          reduce using rule 70 (clave -> CCOMILLAS .)


state 92

    (71) clave -> CSINCOMILLAS .

    PUNTOS          reduce using rule 71 (clave -> CSINCOMILLAS .)


state 93

    (34) parentesis -> LPARENT expr . RPARENT
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    RPARENT         shift and go to state 124
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77
    LE              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82


state 94

    (57) binaria -> NOT expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    LE              reduce using rule 57 (binaria -> NOT expr .)
    LT              reduce using rule 57 (binaria -> NOT expr .)
    GE              reduce using rule 57 (binaria -> NOT expr .)
    GT              reduce using rule 57 (binaria -> NOT expr .)
    EQ              reduce using rule 57 (binaria -> NOT expr .)
    SEMICOLON       reduce using rule 57 (binaria -> NOT expr .)
    RPARENT         reduce using rule 57 (binaria -> NOT expr .)
    COMA            reduce using rule 57 (binaria -> NOT expr .)
    RBRACKET        reduce using rule 57 (binaria -> NOT expr .)
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77

  ! SUMA            [ reduce using rule 57 (binaria -> NOT expr .) ]
  ! RESTA           [ reduce using rule 57 (binaria -> NOT expr .) ]
  ! MUL             [ reduce using rule 57 (binaria -> NOT expr .) ]
  ! DIV             [ reduce using rule 57 (binaria -> NOT expr .) ]
  ! AND             [ reduce using rule 57 (binaria -> NOT expr .) ]
  ! OR              [ reduce using rule 57 (binaria -> NOT expr .) ]
  ! LE              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]


state 95

    (63) definicion_ajson -> TYPE CSINCOMILLAS IGUAL ajson_t .

    SEMICOLON       reduce using rule 63 (definicion_ajson -> TYPE CSINCOMILLAS IGUAL ajson_t .)


state 96

    (64) ajson_t -> LBRACKET . object_t RBRACKET
    (65) object_t -> . pair_t COMA object_t
    (66) object_t -> . pair_t COMA
    (67) object_t -> . pair_t
    (68) pair_t -> . clave PUNTOS tipo
    (69) pair_t -> . clave PUNTOS ajson_t
    (70) clave -> . CCOMILLAS
    (71) clave -> . CSINCOMILLAS

    CCOMILLAS       shift and go to state 91
    CSINCOMILLAS    shift and go to state 92

    object_t                       shift and go to state 125
    pair_t                         shift and go to state 126
    clave                          shift and go to state 127

state 97

    (92) arg_list -> CSINCOMILLAS . PUNTOS tipo
    (93) arg_list -> CSINCOMILLAS . PUNTOS tipo COMA arg_list

    PUNTOS          shift and go to state 128


state 98

    (88) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT . PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (89) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT . PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    PUNTOS          shift and go to state 129


state 99

    (90) function -> FUNCTION CSINCOMILLAS LPARENT arg_list . RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (91) function -> FUNCTION CSINCOMILLAS LPARENT arg_list . RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    RPARENT         shift and go to state 130


state 100

    (85) condition -> IF LPARENT expr RPARENT . LBRACKET statement RBRACKET
    (86) condition -> IF LPARENT expr RPARENT . LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET

    LBRACKET        shift and go to state 131


state 101

    (87) loop -> WHILE LPARENT expr RPARENT . LBRACKET statement RBRACKET

    LBRACKET        shift and go to state 132


state 102

    (23) id -> var IGUAL expr COMA . id
    (20) id -> . var
    (21) id -> . var COMA id
    (22) id -> . var IGUAL expr
    (23) id -> . var IGUAL expr COMA id
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    CSINCOMILLAS    shift and go to state 15

    var                            shift and go to state 22
    id                             shift and go to state 133

state 103

    (51) aritmetica -> expr SUMA expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    SUMA            reduce using rule 51 (aritmetica -> expr SUMA expr .)
    RESTA           reduce using rule 51 (aritmetica -> expr SUMA expr .)
    AND             reduce using rule 51 (aritmetica -> expr SUMA expr .)
    OR              reduce using rule 51 (aritmetica -> expr SUMA expr .)
    LE              reduce using rule 51 (aritmetica -> expr SUMA expr .)
    LT              reduce using rule 51 (aritmetica -> expr SUMA expr .)
    GE              reduce using rule 51 (aritmetica -> expr SUMA expr .)
    GT              reduce using rule 51 (aritmetica -> expr SUMA expr .)
    EQ              reduce using rule 51 (aritmetica -> expr SUMA expr .)
    SEMICOLON       reduce using rule 51 (aritmetica -> expr SUMA expr .)
    RPARENT         reduce using rule 51 (aritmetica -> expr SUMA expr .)
    COMA            reduce using rule 51 (aritmetica -> expr SUMA expr .)
    RBRACKET        reduce using rule 51 (aritmetica -> expr SUMA expr .)
    MUL             shift and go to state 74
    DIV             shift and go to state 75

  ! MUL             [ reduce using rule 51 (aritmetica -> expr SUMA expr .) ]
  ! DIV             [ reduce using rule 51 (aritmetica -> expr SUMA expr .) ]
  ! SUMA            [ shift and go to state 72 ]
  ! RESTA           [ shift and go to state 73 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]


state 104

    (52) aritmetica -> expr RESTA expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    SUMA            reduce using rule 52 (aritmetica -> expr RESTA expr .)
    RESTA           reduce using rule 52 (aritmetica -> expr RESTA expr .)
    AND             reduce using rule 52 (aritmetica -> expr RESTA expr .)
    OR              reduce using rule 52 (aritmetica -> expr RESTA expr .)
    LE              reduce using rule 52 (aritmetica -> expr RESTA expr .)
    LT              reduce using rule 52 (aritmetica -> expr RESTA expr .)
    GE              reduce using rule 52 (aritmetica -> expr RESTA expr .)
    GT              reduce using rule 52 (aritmetica -> expr RESTA expr .)
    EQ              reduce using rule 52 (aritmetica -> expr RESTA expr .)
    SEMICOLON       reduce using rule 52 (aritmetica -> expr RESTA expr .)
    RPARENT         reduce using rule 52 (aritmetica -> expr RESTA expr .)
    COMA            reduce using rule 52 (aritmetica -> expr RESTA expr .)
    RBRACKET        reduce using rule 52 (aritmetica -> expr RESTA expr .)
    MUL             shift and go to state 74
    DIV             shift and go to state 75

  ! MUL             [ reduce using rule 52 (aritmetica -> expr RESTA expr .) ]
  ! DIV             [ reduce using rule 52 (aritmetica -> expr RESTA expr .) ]
  ! SUMA            [ shift and go to state 72 ]
  ! RESTA           [ shift and go to state 73 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]


state 105

    (53) aritmetica -> expr MUL expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    SUMA            reduce using rule 53 (aritmetica -> expr MUL expr .)
    RESTA           reduce using rule 53 (aritmetica -> expr MUL expr .)
    MUL             reduce using rule 53 (aritmetica -> expr MUL expr .)
    DIV             reduce using rule 53 (aritmetica -> expr MUL expr .)
    AND             reduce using rule 53 (aritmetica -> expr MUL expr .)
    OR              reduce using rule 53 (aritmetica -> expr MUL expr .)
    LE              reduce using rule 53 (aritmetica -> expr MUL expr .)
    LT              reduce using rule 53 (aritmetica -> expr MUL expr .)
    GE              reduce using rule 53 (aritmetica -> expr MUL expr .)
    GT              reduce using rule 53 (aritmetica -> expr MUL expr .)
    EQ              reduce using rule 53 (aritmetica -> expr MUL expr .)
    SEMICOLON       reduce using rule 53 (aritmetica -> expr MUL expr .)
    RPARENT         reduce using rule 53 (aritmetica -> expr MUL expr .)
    COMA            reduce using rule 53 (aritmetica -> expr MUL expr .)
    RBRACKET        reduce using rule 53 (aritmetica -> expr MUL expr .)

  ! SUMA            [ shift and go to state 72 ]
  ! RESTA           [ shift and go to state 73 ]
  ! MUL             [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]


state 106

    (54) aritmetica -> expr DIV expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    SUMA            reduce using rule 54 (aritmetica -> expr DIV expr .)
    RESTA           reduce using rule 54 (aritmetica -> expr DIV expr .)
    MUL             reduce using rule 54 (aritmetica -> expr DIV expr .)
    DIV             reduce using rule 54 (aritmetica -> expr DIV expr .)
    AND             reduce using rule 54 (aritmetica -> expr DIV expr .)
    OR              reduce using rule 54 (aritmetica -> expr DIV expr .)
    LE              reduce using rule 54 (aritmetica -> expr DIV expr .)
    LT              reduce using rule 54 (aritmetica -> expr DIV expr .)
    GE              reduce using rule 54 (aritmetica -> expr DIV expr .)
    GT              reduce using rule 54 (aritmetica -> expr DIV expr .)
    EQ              reduce using rule 54 (aritmetica -> expr DIV expr .)
    SEMICOLON       reduce using rule 54 (aritmetica -> expr DIV expr .)
    RPARENT         reduce using rule 54 (aritmetica -> expr DIV expr .)
    COMA            reduce using rule 54 (aritmetica -> expr DIV expr .)
    RBRACKET        reduce using rule 54 (aritmetica -> expr DIV expr .)

  ! SUMA            [ shift and go to state 72 ]
  ! RESTA           [ shift and go to state 73 ]
  ! MUL             [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 75 ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]


state 107

    (55) binaria -> expr AND expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    AND             reduce using rule 55 (binaria -> expr AND expr .)
    OR              reduce using rule 55 (binaria -> expr AND expr .)
    LE              reduce using rule 55 (binaria -> expr AND expr .)
    LT              reduce using rule 55 (binaria -> expr AND expr .)
    GE              reduce using rule 55 (binaria -> expr AND expr .)
    GT              reduce using rule 55 (binaria -> expr AND expr .)
    EQ              reduce using rule 55 (binaria -> expr AND expr .)
    SEMICOLON       reduce using rule 55 (binaria -> expr AND expr .)
    RPARENT         reduce using rule 55 (binaria -> expr AND expr .)
    COMA            reduce using rule 55 (binaria -> expr AND expr .)
    RBRACKET        reduce using rule 55 (binaria -> expr AND expr .)
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75

  ! SUMA            [ reduce using rule 55 (binaria -> expr AND expr .) ]
  ! RESTA           [ reduce using rule 55 (binaria -> expr AND expr .) ]
  ! MUL             [ reduce using rule 55 (binaria -> expr AND expr .) ]
  ! DIV             [ reduce using rule 55 (binaria -> expr AND expr .) ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]


state 108

    (56) binaria -> expr OR expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    AND             reduce using rule 56 (binaria -> expr OR expr .)
    OR              reduce using rule 56 (binaria -> expr OR expr .)
    LE              reduce using rule 56 (binaria -> expr OR expr .)
    LT              reduce using rule 56 (binaria -> expr OR expr .)
    GE              reduce using rule 56 (binaria -> expr OR expr .)
    GT              reduce using rule 56 (binaria -> expr OR expr .)
    EQ              reduce using rule 56 (binaria -> expr OR expr .)
    SEMICOLON       reduce using rule 56 (binaria -> expr OR expr .)
    RPARENT         reduce using rule 56 (binaria -> expr OR expr .)
    COMA            reduce using rule 56 (binaria -> expr OR expr .)
    RBRACKET        reduce using rule 56 (binaria -> expr OR expr .)
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75

  ! SUMA            [ reduce using rule 56 (binaria -> expr OR expr .) ]
  ! RESTA           [ reduce using rule 56 (binaria -> expr OR expr .) ]
  ! MUL             [ reduce using rule 56 (binaria -> expr OR expr .) ]
  ! DIV             [ reduce using rule 56 (binaria -> expr OR expr .) ]
  ! AND             [ shift and go to state 76 ]
  ! OR              [ shift and go to state 77 ]
  ! LE              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]


state 109

    (58) comparation -> expr LE expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    LE              reduce using rule 58 (comparation -> expr LE expr .)
    LT              reduce using rule 58 (comparation -> expr LE expr .)
    GE              reduce using rule 58 (comparation -> expr LE expr .)
    GT              reduce using rule 58 (comparation -> expr LE expr .)
    EQ              reduce using rule 58 (comparation -> expr LE expr .)
    SEMICOLON       reduce using rule 58 (comparation -> expr LE expr .)
    RPARENT         reduce using rule 58 (comparation -> expr LE expr .)
    COMA            reduce using rule 58 (comparation -> expr LE expr .)
    RBRACKET        reduce using rule 58 (comparation -> expr LE expr .)
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77

  ! SUMA            [ reduce using rule 58 (comparation -> expr LE expr .) ]
  ! RESTA           [ reduce using rule 58 (comparation -> expr LE expr .) ]
  ! MUL             [ reduce using rule 58 (comparation -> expr LE expr .) ]
  ! DIV             [ reduce using rule 58 (comparation -> expr LE expr .) ]
  ! AND             [ reduce using rule 58 (comparation -> expr LE expr .) ]
  ! OR              [ reduce using rule 58 (comparation -> expr LE expr .) ]
  ! LE              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]


state 110

    (59) comparation -> expr LT expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    LE              reduce using rule 59 (comparation -> expr LT expr .)
    LT              reduce using rule 59 (comparation -> expr LT expr .)
    GE              reduce using rule 59 (comparation -> expr LT expr .)
    GT              reduce using rule 59 (comparation -> expr LT expr .)
    EQ              reduce using rule 59 (comparation -> expr LT expr .)
    SEMICOLON       reduce using rule 59 (comparation -> expr LT expr .)
    RPARENT         reduce using rule 59 (comparation -> expr LT expr .)
    COMA            reduce using rule 59 (comparation -> expr LT expr .)
    RBRACKET        reduce using rule 59 (comparation -> expr LT expr .)
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77

  ! SUMA            [ reduce using rule 59 (comparation -> expr LT expr .) ]
  ! RESTA           [ reduce using rule 59 (comparation -> expr LT expr .) ]
  ! MUL             [ reduce using rule 59 (comparation -> expr LT expr .) ]
  ! DIV             [ reduce using rule 59 (comparation -> expr LT expr .) ]
  ! AND             [ reduce using rule 59 (comparation -> expr LT expr .) ]
  ! OR              [ reduce using rule 59 (comparation -> expr LT expr .) ]
  ! LE              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]


state 111

    (60) comparation -> expr GE expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    LE              reduce using rule 60 (comparation -> expr GE expr .)
    LT              reduce using rule 60 (comparation -> expr GE expr .)
    GE              reduce using rule 60 (comparation -> expr GE expr .)
    GT              reduce using rule 60 (comparation -> expr GE expr .)
    EQ              reduce using rule 60 (comparation -> expr GE expr .)
    SEMICOLON       reduce using rule 60 (comparation -> expr GE expr .)
    RPARENT         reduce using rule 60 (comparation -> expr GE expr .)
    COMA            reduce using rule 60 (comparation -> expr GE expr .)
    RBRACKET        reduce using rule 60 (comparation -> expr GE expr .)
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77

  ! SUMA            [ reduce using rule 60 (comparation -> expr GE expr .) ]
  ! RESTA           [ reduce using rule 60 (comparation -> expr GE expr .) ]
  ! MUL             [ reduce using rule 60 (comparation -> expr GE expr .) ]
  ! DIV             [ reduce using rule 60 (comparation -> expr GE expr .) ]
  ! AND             [ reduce using rule 60 (comparation -> expr GE expr .) ]
  ! OR              [ reduce using rule 60 (comparation -> expr GE expr .) ]
  ! LE              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]


state 112

    (61) comparation -> expr GT expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    LE              reduce using rule 61 (comparation -> expr GT expr .)
    LT              reduce using rule 61 (comparation -> expr GT expr .)
    GE              reduce using rule 61 (comparation -> expr GT expr .)
    GT              reduce using rule 61 (comparation -> expr GT expr .)
    EQ              reduce using rule 61 (comparation -> expr GT expr .)
    SEMICOLON       reduce using rule 61 (comparation -> expr GT expr .)
    RPARENT         reduce using rule 61 (comparation -> expr GT expr .)
    COMA            reduce using rule 61 (comparation -> expr GT expr .)
    RBRACKET        reduce using rule 61 (comparation -> expr GT expr .)
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77

  ! SUMA            [ reduce using rule 61 (comparation -> expr GT expr .) ]
  ! RESTA           [ reduce using rule 61 (comparation -> expr GT expr .) ]
  ! MUL             [ reduce using rule 61 (comparation -> expr GT expr .) ]
  ! DIV             [ reduce using rule 61 (comparation -> expr GT expr .) ]
  ! AND             [ reduce using rule 61 (comparation -> expr GT expr .) ]
  ! OR              [ reduce using rule 61 (comparation -> expr GT expr .) ]
  ! LE              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]


state 113

    (62) comparation -> expr EQ expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    LE              reduce using rule 62 (comparation -> expr EQ expr .)
    LT              reduce using rule 62 (comparation -> expr EQ expr .)
    GE              reduce using rule 62 (comparation -> expr EQ expr .)
    GT              reduce using rule 62 (comparation -> expr EQ expr .)
    EQ              reduce using rule 62 (comparation -> expr EQ expr .)
    SEMICOLON       reduce using rule 62 (comparation -> expr EQ expr .)
    RPARENT         reduce using rule 62 (comparation -> expr EQ expr .)
    COMA            reduce using rule 62 (comparation -> expr EQ expr .)
    RBRACKET        reduce using rule 62 (comparation -> expr EQ expr .)
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77

  ! SUMA            [ reduce using rule 62 (comparation -> expr EQ expr .) ]
  ! RESTA           [ reduce using rule 62 (comparation -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 62 (comparation -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 62 (comparation -> expr EQ expr .) ]
  ! AND             [ reduce using rule 62 (comparation -> expr EQ expr .) ]
  ! OR              [ reduce using rule 62 (comparation -> expr EQ expr .) ]
  ! LE              [ shift and go to state 78 ]
  ! LT              [ shift and go to state 79 ]
  ! GE              [ shift and go to state 80 ]
  ! GT              [ shift and go to state 81 ]
  ! EQ              [ shift and go to state 82 ]


state 114

    (77) punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .
    (77) punto -> CSINCOMILLAS . PUNTO CSINCOMILLAS
    (78) punto -> CSINCOMILLAS . PUNTO punto
    (79) punto -> CSINCOMILLAS . PUNTO corchete
    (80) corchete -> CSINCOMILLAS . LCORCHETE CCOMILLAS RCORCHETE recur_corchete

    SUMA            reduce using rule 77 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    RESTA           reduce using rule 77 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    MUL             reduce using rule 77 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    DIV             reduce using rule 77 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    AND             reduce using rule 77 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    OR              reduce using rule 77 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    LE              reduce using rule 77 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    LT              reduce using rule 77 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    GE              reduce using rule 77 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    GT              reduce using rule 77 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    EQ              reduce using rule 77 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    SEMICOLON       reduce using rule 77 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    RPARENT         reduce using rule 77 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    COMA            reduce using rule 77 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    RBRACKET        reduce using rule 77 (punto -> CSINCOMILLAS PUNTO CSINCOMILLAS .)
    PUNTO           shift and go to state 85
    LCORCHETE       shift and go to state 86


state 115

    (78) punto -> CSINCOMILLAS PUNTO punto .

    SUMA            reduce using rule 78 (punto -> CSINCOMILLAS PUNTO punto .)
    RESTA           reduce using rule 78 (punto -> CSINCOMILLAS PUNTO punto .)
    MUL             reduce using rule 78 (punto -> CSINCOMILLAS PUNTO punto .)
    DIV             reduce using rule 78 (punto -> CSINCOMILLAS PUNTO punto .)
    AND             reduce using rule 78 (punto -> CSINCOMILLAS PUNTO punto .)
    OR              reduce using rule 78 (punto -> CSINCOMILLAS PUNTO punto .)
    LE              reduce using rule 78 (punto -> CSINCOMILLAS PUNTO punto .)
    LT              reduce using rule 78 (punto -> CSINCOMILLAS PUNTO punto .)
    GE              reduce using rule 78 (punto -> CSINCOMILLAS PUNTO punto .)
    GT              reduce using rule 78 (punto -> CSINCOMILLAS PUNTO punto .)
    EQ              reduce using rule 78 (punto -> CSINCOMILLAS PUNTO punto .)
    SEMICOLON       reduce using rule 78 (punto -> CSINCOMILLAS PUNTO punto .)
    RPARENT         reduce using rule 78 (punto -> CSINCOMILLAS PUNTO punto .)
    COMA            reduce using rule 78 (punto -> CSINCOMILLAS PUNTO punto .)
    RBRACKET        reduce using rule 78 (punto -> CSINCOMILLAS PUNTO punto .)


state 116

    (79) punto -> CSINCOMILLAS PUNTO corchete .

    SUMA            reduce using rule 79 (punto -> CSINCOMILLAS PUNTO corchete .)
    RESTA           reduce using rule 79 (punto -> CSINCOMILLAS PUNTO corchete .)
    MUL             reduce using rule 79 (punto -> CSINCOMILLAS PUNTO corchete .)
    DIV             reduce using rule 79 (punto -> CSINCOMILLAS PUNTO corchete .)
    AND             reduce using rule 79 (punto -> CSINCOMILLAS PUNTO corchete .)
    OR              reduce using rule 79 (punto -> CSINCOMILLAS PUNTO corchete .)
    LE              reduce using rule 79 (punto -> CSINCOMILLAS PUNTO corchete .)
    LT              reduce using rule 79 (punto -> CSINCOMILLAS PUNTO corchete .)
    GE              reduce using rule 79 (punto -> CSINCOMILLAS PUNTO corchete .)
    GT              reduce using rule 79 (punto -> CSINCOMILLAS PUNTO corchete .)
    EQ              reduce using rule 79 (punto -> CSINCOMILLAS PUNTO corchete .)
    SEMICOLON       reduce using rule 79 (punto -> CSINCOMILLAS PUNTO corchete .)
    RPARENT         reduce using rule 79 (punto -> CSINCOMILLAS PUNTO corchete .)
    COMA            reduce using rule 79 (punto -> CSINCOMILLAS PUNTO corchete .)
    RBRACKET        reduce using rule 79 (punto -> CSINCOMILLAS PUNTO corchete .)


state 117

    (80) corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS . RCORCHETE recur_corchete

    RCORCHETE       shift and go to state 134


state 118

    (94) functioncall -> CSINCOMILLAS LPARENT RPARENT .

    SUMA            reduce using rule 94 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    RESTA           reduce using rule 94 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    MUL             reduce using rule 94 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    DIV             reduce using rule 94 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    AND             reduce using rule 94 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    OR              reduce using rule 94 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    LE              reduce using rule 94 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    LT              reduce using rule 94 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    GE              reduce using rule 94 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    GT              reduce using rule 94 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    EQ              reduce using rule 94 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    SEMICOLON       reduce using rule 94 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    RPARENT         reduce using rule 94 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    COMA            reduce using rule 94 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)
    RBRACKET        reduce using rule 94 (functioncall -> CSINCOMILLAS LPARENT RPARENT .)


state 119

    (95) functioncall -> CSINCOMILLAS LPARENT argumentos . RPARENT

    RPARENT         shift and go to state 135


state 120

    (96) argumentos -> expr .
    (97) argumentos -> expr . COMA argumentos
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    RPARENT         reduce using rule 96 (argumentos -> expr .)
    COMA            shift and go to state 136
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77
    LE              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82


state 121

    (72) ajson -> LBRACKET object RBRACKET .

    SUMA            reduce using rule 72 (ajson -> LBRACKET object RBRACKET .)
    RESTA           reduce using rule 72 (ajson -> LBRACKET object RBRACKET .)
    MUL             reduce using rule 72 (ajson -> LBRACKET object RBRACKET .)
    DIV             reduce using rule 72 (ajson -> LBRACKET object RBRACKET .)
    AND             reduce using rule 72 (ajson -> LBRACKET object RBRACKET .)
    OR              reduce using rule 72 (ajson -> LBRACKET object RBRACKET .)
    LE              reduce using rule 72 (ajson -> LBRACKET object RBRACKET .)
    LT              reduce using rule 72 (ajson -> LBRACKET object RBRACKET .)
    GE              reduce using rule 72 (ajson -> LBRACKET object RBRACKET .)
    GT              reduce using rule 72 (ajson -> LBRACKET object RBRACKET .)
    EQ              reduce using rule 72 (ajson -> LBRACKET object RBRACKET .)
    SEMICOLON       reduce using rule 72 (ajson -> LBRACKET object RBRACKET .)
    RPARENT         reduce using rule 72 (ajson -> LBRACKET object RBRACKET .)
    COMA            reduce using rule 72 (ajson -> LBRACKET object RBRACKET .)
    RBRACKET        reduce using rule 72 (ajson -> LBRACKET object RBRACKET .)


state 122

    (73) object -> pair COMA . object
    (74) object -> pair COMA .
    (73) object -> . pair COMA object
    (74) object -> . pair COMA
    (75) object -> . pair
    (76) pair -> . clave PUNTOS expr
    (70) clave -> . CCOMILLAS
    (71) clave -> . CSINCOMILLAS

    RBRACKET        reduce using rule 74 (object -> pair COMA .)
    CCOMILLAS       shift and go to state 91
    CSINCOMILLAS    shift and go to state 92

    pair                           shift and go to state 89
    object                         shift and go to state 137
    clave                          shift and go to state 90

state 123

    (76) pair -> clave PUNTOS . expr
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 138
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 124

    (34) parentesis -> LPARENT expr RPARENT .

    SUMA            reduce using rule 34 (parentesis -> LPARENT expr RPARENT .)
    RESTA           reduce using rule 34 (parentesis -> LPARENT expr RPARENT .)
    MUL             reduce using rule 34 (parentesis -> LPARENT expr RPARENT .)
    DIV             reduce using rule 34 (parentesis -> LPARENT expr RPARENT .)
    AND             reduce using rule 34 (parentesis -> LPARENT expr RPARENT .)
    OR              reduce using rule 34 (parentesis -> LPARENT expr RPARENT .)
    LE              reduce using rule 34 (parentesis -> LPARENT expr RPARENT .)
    LT              reduce using rule 34 (parentesis -> LPARENT expr RPARENT .)
    GE              reduce using rule 34 (parentesis -> LPARENT expr RPARENT .)
    GT              reduce using rule 34 (parentesis -> LPARENT expr RPARENT .)
    EQ              reduce using rule 34 (parentesis -> LPARENT expr RPARENT .)
    SEMICOLON       reduce using rule 34 (parentesis -> LPARENT expr RPARENT .)
    RPARENT         reduce using rule 34 (parentesis -> LPARENT expr RPARENT .)
    COMA            reduce using rule 34 (parentesis -> LPARENT expr RPARENT .)
    RBRACKET        reduce using rule 34 (parentesis -> LPARENT expr RPARENT .)


state 125

    (64) ajson_t -> LBRACKET object_t . RBRACKET

    RBRACKET        shift and go to state 139


state 126

    (65) object_t -> pair_t . COMA object_t
    (66) object_t -> pair_t . COMA
    (67) object_t -> pair_t .

    COMA            shift and go to state 140
    RBRACKET        reduce using rule 67 (object_t -> pair_t .)


state 127

    (68) pair_t -> clave . PUNTOS tipo
    (69) pair_t -> clave . PUNTOS ajson_t

    PUNTOS          shift and go to state 141


state 128

    (92) arg_list -> CSINCOMILLAS PUNTOS . tipo
    (93) arg_list -> CSINCOMILLAS PUNTOS . tipo COMA arg_list
    (26) tipo -> . INT
    (27) tipo -> . FLOAT
    (28) tipo -> . CHARACTER
    (29) tipo -> . BOOLEAN
    (30) tipo -> . CSINCOMILLAS

    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    CHARACTER       shift and go to state 65
    BOOLEAN         shift and go to state 66
    CSINCOMILLAS    shift and go to state 61

    tipo                           shift and go to state 142

state 129

    (88) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS . tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (89) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS . tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (26) tipo -> . INT
    (27) tipo -> . FLOAT
    (28) tipo -> . CHARACTER
    (29) tipo -> . BOOLEAN
    (30) tipo -> . CSINCOMILLAS

    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    CHARACTER       shift and go to state 65
    BOOLEAN         shift and go to state 66
    CSINCOMILLAS    shift and go to state 61

    tipo                           shift and go to state 143

state 130

    (90) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT . PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (91) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT . PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET

    PUNTOS          shift and go to state 144


state 131

    (85) condition -> IF LPARENT expr RPARENT LBRACKET . statement RBRACKET
    (86) condition -> IF LPARENT expr RPARENT LBRACKET . statement RBRACKET ELSE LBRACKET statement RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (31) assignment -> . var IGUAL expr
    (63) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (88) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (89) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (90) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (91) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (86) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (87) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    statement                      shift and go to state 145
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 132

    (87) loop -> WHILE LPARENT expr RPARENT LBRACKET . statement RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (31) assignment -> . var IGUAL expr
    (63) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (88) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (89) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (90) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (91) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (86) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (87) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    statement                      shift and go to state 146
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 133

    (23) id -> var IGUAL expr COMA id .

    SEMICOLON       reduce using rule 23 (id -> var IGUAL expr COMA id .)


state 134

    (80) corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE . recur_corchete
    (81) recur_corchete -> . LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (82) recur_corchete -> . empty
    (83) recur_corchete -> . PUNTO CSINCOMILLAS
    (84) recur_corchete -> . PUNTO punto
    (98) empty -> .

    LCORCHETE       shift and go to state 147
    PUNTO           shift and go to state 150
    SUMA            reduce using rule 98 (empty -> .)
    RESTA           reduce using rule 98 (empty -> .)
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    LE              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GE              reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    EQ              reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    RPARENT         reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)

    recur_corchete                 shift and go to state 148
    empty                          shift and go to state 149

state 135

    (95) functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .

    SUMA            reduce using rule 95 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    RESTA           reduce using rule 95 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    MUL             reduce using rule 95 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    DIV             reduce using rule 95 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    AND             reduce using rule 95 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    OR              reduce using rule 95 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    LE              reduce using rule 95 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    LT              reduce using rule 95 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    GE              reduce using rule 95 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    GT              reduce using rule 95 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    EQ              reduce using rule 95 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    SEMICOLON       reduce using rule 95 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    RPARENT         reduce using rule 95 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    COMA            reduce using rule 95 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)
    RBRACKET        reduce using rule 95 (functioncall -> CSINCOMILLAS LPARENT argumentos RPARENT .)


state 136

    (97) argumentos -> expr COMA . argumentos
    (96) argumentos -> . expr
    (97) argumentos -> . expr COMA argumentos
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 120
    argumentos                     shift and go to state 151
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 137

    (73) object -> pair COMA object .

    RBRACKET        reduce using rule 73 (object -> pair COMA object .)


state 138

    (76) pair -> clave PUNTOS expr .
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    COMA            reduce using rule 76 (pair -> clave PUNTOS expr .)
    RBRACKET        reduce using rule 76 (pair -> clave PUNTOS expr .)
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77
    LE              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82


state 139

    (64) ajson_t -> LBRACKET object_t RBRACKET .

    SEMICOLON       reduce using rule 64 (ajson_t -> LBRACKET object_t RBRACKET .)
    COMA            reduce using rule 64 (ajson_t -> LBRACKET object_t RBRACKET .)
    RBRACKET        reduce using rule 64 (ajson_t -> LBRACKET object_t RBRACKET .)


state 140

    (65) object_t -> pair_t COMA . object_t
    (66) object_t -> pair_t COMA .
    (65) object_t -> . pair_t COMA object_t
    (66) object_t -> . pair_t COMA
    (67) object_t -> . pair_t
    (68) pair_t -> . clave PUNTOS tipo
    (69) pair_t -> . clave PUNTOS ajson_t
    (70) clave -> . CCOMILLAS
    (71) clave -> . CSINCOMILLAS

    RBRACKET        reduce using rule 66 (object_t -> pair_t COMA .)
    CCOMILLAS       shift and go to state 91
    CSINCOMILLAS    shift and go to state 92

    pair_t                         shift and go to state 126
    object_t                       shift and go to state 152
    clave                          shift and go to state 127

state 141

    (68) pair_t -> clave PUNTOS . tipo
    (69) pair_t -> clave PUNTOS . ajson_t
    (26) tipo -> . INT
    (27) tipo -> . FLOAT
    (28) tipo -> . CHARACTER
    (29) tipo -> . BOOLEAN
    (30) tipo -> . CSINCOMILLAS
    (64) ajson_t -> . LBRACKET object_t RBRACKET

    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    CHARACTER       shift and go to state 65
    BOOLEAN         shift and go to state 66
    CSINCOMILLAS    shift and go to state 61
    LBRACKET        shift and go to state 96

    tipo                           shift and go to state 153
    ajson_t                        shift and go to state 154

state 142

    (92) arg_list -> CSINCOMILLAS PUNTOS tipo .
    (93) arg_list -> CSINCOMILLAS PUNTOS tipo . COMA arg_list

    RPARENT         reduce using rule 92 (arg_list -> CSINCOMILLAS PUNTOS tipo .)
    COMA            shift and go to state 155


state 143

    (88) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo . LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (89) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo . LBRACKET RETURN expr SEMICOLON RBRACKET

    LBRACKET        shift and go to state 156


state 144

    (90) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS . tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (91) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS . tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (26) tipo -> . INT
    (27) tipo -> . FLOAT
    (28) tipo -> . CHARACTER
    (29) tipo -> . BOOLEAN
    (30) tipo -> . CSINCOMILLAS

    INT             shift and go to state 63
    FLOAT           shift and go to state 64
    CHARACTER       shift and go to state 65
    BOOLEAN         shift and go to state 66
    CSINCOMILLAS    shift and go to state 61

    tipo                           shift and go to state 157

state 145

    (85) condition -> IF LPARENT expr RPARENT LBRACKET statement . RBRACKET
    (86) condition -> IF LPARENT expr RPARENT LBRACKET statement . RBRACKET ELSE LBRACKET statement RBRACKET

    RBRACKET        shift and go to state 158


state 146

    (87) loop -> WHILE LPARENT expr RPARENT LBRACKET statement . RBRACKET

    RBRACKET        shift and go to state 159


state 147

    (81) recur_corchete -> LCORCHETE . CCOMILLAS RCORCHETE recur_corchete

    CCOMILLAS       shift and go to state 160


state 148

    (80) corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .

    SUMA            reduce using rule 80 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RESTA           reduce using rule 80 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    MUL             reduce using rule 80 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    DIV             reduce using rule 80 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    AND             reduce using rule 80 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    OR              reduce using rule 80 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LE              reduce using rule 80 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LT              reduce using rule 80 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GE              reduce using rule 80 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GT              reduce using rule 80 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    EQ              reduce using rule 80 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    SEMICOLON       reduce using rule 80 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RPARENT         reduce using rule 80 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    COMA            reduce using rule 80 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RBRACKET        reduce using rule 80 (corchete -> CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)


state 149

    (82) recur_corchete -> empty .

    SUMA            reduce using rule 82 (recur_corchete -> empty .)
    RESTA           reduce using rule 82 (recur_corchete -> empty .)
    MUL             reduce using rule 82 (recur_corchete -> empty .)
    DIV             reduce using rule 82 (recur_corchete -> empty .)
    AND             reduce using rule 82 (recur_corchete -> empty .)
    OR              reduce using rule 82 (recur_corchete -> empty .)
    LE              reduce using rule 82 (recur_corchete -> empty .)
    LT              reduce using rule 82 (recur_corchete -> empty .)
    GE              reduce using rule 82 (recur_corchete -> empty .)
    GT              reduce using rule 82 (recur_corchete -> empty .)
    EQ              reduce using rule 82 (recur_corchete -> empty .)
    SEMICOLON       reduce using rule 82 (recur_corchete -> empty .)
    RPARENT         reduce using rule 82 (recur_corchete -> empty .)
    COMA            reduce using rule 82 (recur_corchete -> empty .)
    RBRACKET        reduce using rule 82 (recur_corchete -> empty .)


state 150

    (83) recur_corchete -> PUNTO . CSINCOMILLAS
    (84) recur_corchete -> PUNTO . punto
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete

    CSINCOMILLAS    shift and go to state 161

    punto                          shift and go to state 162

state 151

    (97) argumentos -> expr COMA argumentos .

    RPARENT         reduce using rule 97 (argumentos -> expr COMA argumentos .)


state 152

    (65) object_t -> pair_t COMA object_t .

    RBRACKET        reduce using rule 65 (object_t -> pair_t COMA object_t .)


state 153

    (68) pair_t -> clave PUNTOS tipo .

    COMA            reduce using rule 68 (pair_t -> clave PUNTOS tipo .)
    RBRACKET        reduce using rule 68 (pair_t -> clave PUNTOS tipo .)


state 154

    (69) pair_t -> clave PUNTOS ajson_t .

    COMA            reduce using rule 69 (pair_t -> clave PUNTOS ajson_t .)
    RBRACKET        reduce using rule 69 (pair_t -> clave PUNTOS ajson_t .)


state 155

    (93) arg_list -> CSINCOMILLAS PUNTOS tipo COMA . arg_list
    (92) arg_list -> . CSINCOMILLAS PUNTOS tipo
    (93) arg_list -> . CSINCOMILLAS PUNTOS tipo COMA arg_list

    CSINCOMILLAS    shift and go to state 97

    arg_list                       shift and go to state 163

state 156

    (88) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET . statement RETURN expr SEMICOLON RBRACKET
    (89) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET . RETURN expr SEMICOLON RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (31) assignment -> . var IGUAL expr
    (63) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (88) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (89) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (90) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (91) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (86) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (87) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    RETURN          shift and go to state 165
    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    statement                      shift and go to state 164
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 157

    (90) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo . LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (91) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo . LBRACKET RETURN expr SEMICOLON RBRACKET

    LBRACKET        shift and go to state 166


state 158

    (85) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .
    (86) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET . ELSE LBRACKET statement RBRACKET

    LET             reduce using rule 85 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    TYPE            reduce using rule 85 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    FUNCTION        reduce using rule 85 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    IF              reduce using rule 85 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    WHILE           reduce using rule 85 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    CSINCOMILLAS    reduce using rule 85 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    $end            reduce using rule 85 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RBRACKET        reduce using rule 85 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RETURN          reduce using rule 85 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    ELSE            shift and go to state 167


state 159

    (87) loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .

    LET             reduce using rule 87 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    TYPE            reduce using rule 87 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    FUNCTION        reduce using rule 87 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    IF              reduce using rule 87 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    WHILE           reduce using rule 87 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    CSINCOMILLAS    reduce using rule 87 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    $end            reduce using rule 87 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RBRACKET        reduce using rule 87 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)
    RETURN          reduce using rule 87 (loop -> WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET .)


state 160

    (81) recur_corchete -> LCORCHETE CCOMILLAS . RCORCHETE recur_corchete

    RCORCHETE       shift and go to state 168


state 161

    (83) recur_corchete -> PUNTO CSINCOMILLAS .
    (77) punto -> CSINCOMILLAS . PUNTO CSINCOMILLAS
    (78) punto -> CSINCOMILLAS . PUNTO punto
    (79) punto -> CSINCOMILLAS . PUNTO corchete

    SUMA            reduce using rule 83 (recur_corchete -> PUNTO CSINCOMILLAS .)
    RESTA           reduce using rule 83 (recur_corchete -> PUNTO CSINCOMILLAS .)
    MUL             reduce using rule 83 (recur_corchete -> PUNTO CSINCOMILLAS .)
    DIV             reduce using rule 83 (recur_corchete -> PUNTO CSINCOMILLAS .)
    AND             reduce using rule 83 (recur_corchete -> PUNTO CSINCOMILLAS .)
    OR              reduce using rule 83 (recur_corchete -> PUNTO CSINCOMILLAS .)
    LE              reduce using rule 83 (recur_corchete -> PUNTO CSINCOMILLAS .)
    LT              reduce using rule 83 (recur_corchete -> PUNTO CSINCOMILLAS .)
    GE              reduce using rule 83 (recur_corchete -> PUNTO CSINCOMILLAS .)
    GT              reduce using rule 83 (recur_corchete -> PUNTO CSINCOMILLAS .)
    EQ              reduce using rule 83 (recur_corchete -> PUNTO CSINCOMILLAS .)
    SEMICOLON       reduce using rule 83 (recur_corchete -> PUNTO CSINCOMILLAS .)
    RPARENT         reduce using rule 83 (recur_corchete -> PUNTO CSINCOMILLAS .)
    COMA            reduce using rule 83 (recur_corchete -> PUNTO CSINCOMILLAS .)
    RBRACKET        reduce using rule 83 (recur_corchete -> PUNTO CSINCOMILLAS .)
    PUNTO           shift and go to state 85


state 162

    (84) recur_corchete -> PUNTO punto .

    SUMA            reduce using rule 84 (recur_corchete -> PUNTO punto .)
    RESTA           reduce using rule 84 (recur_corchete -> PUNTO punto .)
    MUL             reduce using rule 84 (recur_corchete -> PUNTO punto .)
    DIV             reduce using rule 84 (recur_corchete -> PUNTO punto .)
    AND             reduce using rule 84 (recur_corchete -> PUNTO punto .)
    OR              reduce using rule 84 (recur_corchete -> PUNTO punto .)
    LE              reduce using rule 84 (recur_corchete -> PUNTO punto .)
    LT              reduce using rule 84 (recur_corchete -> PUNTO punto .)
    GE              reduce using rule 84 (recur_corchete -> PUNTO punto .)
    GT              reduce using rule 84 (recur_corchete -> PUNTO punto .)
    EQ              reduce using rule 84 (recur_corchete -> PUNTO punto .)
    SEMICOLON       reduce using rule 84 (recur_corchete -> PUNTO punto .)
    RPARENT         reduce using rule 84 (recur_corchete -> PUNTO punto .)
    COMA            reduce using rule 84 (recur_corchete -> PUNTO punto .)
    RBRACKET        reduce using rule 84 (recur_corchete -> PUNTO punto .)


state 163

    (93) arg_list -> CSINCOMILLAS PUNTOS tipo COMA arg_list .

    RPARENT         reduce using rule 93 (arg_list -> CSINCOMILLAS PUNTOS tipo COMA arg_list .)


state 164

    (88) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement . RETURN expr SEMICOLON RBRACKET

    RETURN          shift and go to state 169


state 165

    (89) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN . expr SEMICOLON RBRACKET
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 170
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 166

    (90) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET . statement RETURN expr SEMICOLON RBRACKET
    (91) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET . RETURN expr SEMICOLON RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (31) assignment -> . var IGUAL expr
    (63) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (88) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (89) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (90) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (91) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (86) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (87) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    RETURN          shift and go to state 172
    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    statement                      shift and go to state 171
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 167

    (86) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE . LBRACKET statement RBRACKET

    LBRACKET        shift and go to state 173


state 168

    (81) recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE . recur_corchete
    (81) recur_corchete -> . LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (82) recur_corchete -> . empty
    (83) recur_corchete -> . PUNTO CSINCOMILLAS
    (84) recur_corchete -> . PUNTO punto
    (98) empty -> .

    LCORCHETE       shift and go to state 147
    PUNTO           shift and go to state 150
    SUMA            reduce using rule 98 (empty -> .)
    RESTA           reduce using rule 98 (empty -> .)
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    LE              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GE              reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    EQ              reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    RPARENT         reduce using rule 98 (empty -> .)
    COMA            reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)

    recur_corchete                 shift and go to state 174
    empty                          shift and go to state 149

state 169

    (88) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN . expr SEMICOLON RBRACKET
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 175
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 170

    (89) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr . SEMICOLON RBRACKET
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 176
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77
    LE              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82


state 171

    (90) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement . RETURN expr SEMICOLON RBRACKET

    RETURN          shift and go to state 177


state 172

    (91) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN . expr SEMICOLON RBRACKET
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 178
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 173

    (86) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET . statement RBRACKET
    (3) statement -> . content SEMICOLON
    (4) statement -> . content SEMICOLON statement
    (5) statement -> . noSM statement
    (6) statement -> . noSM
    (7) content -> . declaration
    (8) content -> . assignment
    (9) content -> . definicion_ajson
    (10) noSM -> . function
    (11) noSM -> . condition
    (12) noSM -> . loop
    (19) declaration -> . LET id
    (31) assignment -> . var IGUAL expr
    (63) definicion_ajson -> . TYPE CSINCOMILLAS IGUAL ajson_t
    (88) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (89) function -> . FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (90) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET
    (91) function -> . FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET
    (85) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET
    (86) condition -> . IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET
    (87) loop -> . WHILE LPARENT expr RPARENT LBRACKET statement RBRACKET
    (24) var -> . CSINCOMILLAS
    (25) var -> . CSINCOMILLAS PUNTOS tipo

    LET             shift and go to state 12
    TYPE            shift and go to state 14
    FUNCTION        shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    CSINCOMILLAS    shift and go to state 15

    statement                      shift and go to state 179
    content                        shift and go to state 4
    noSM                           shift and go to state 5
    declaration                    shift and go to state 6
    assignment                     shift and go to state 7
    definicion_ajson               shift and go to state 8
    function                       shift and go to state 9
    condition                      shift and go to state 10
    loop                           shift and go to state 11
    var                            shift and go to state 13

state 174

    (81) recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .

    SUMA            reduce using rule 81 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RESTA           reduce using rule 81 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    MUL             reduce using rule 81 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    DIV             reduce using rule 81 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    AND             reduce using rule 81 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    OR              reduce using rule 81 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LE              reduce using rule 81 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    LT              reduce using rule 81 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GE              reduce using rule 81 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    GT              reduce using rule 81 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    EQ              reduce using rule 81 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    SEMICOLON       reduce using rule 81 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RPARENT         reduce using rule 81 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    COMA            reduce using rule 81 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)
    RBRACKET        reduce using rule 81 (recur_corchete -> LCORCHETE CCOMILLAS RCORCHETE recur_corchete .)


state 175

    (88) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr . SEMICOLON RBRACKET
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 180
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77
    LE              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82


state 176

    (89) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 181


state 177

    (90) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN . expr SEMICOLON RBRACKET
    (35) expr -> . operacion
    (36) expr -> . num
    (37) expr -> . bool
    (38) expr -> . NULL
    (39) expr -> . variable
    (40) expr -> . RESTA expr
    (41) expr -> . SUMA expr
    (42) expr -> . cadena
    (43) expr -> . ajson
    (44) expr -> . parentesis
    (45) expr -> . punto
    (46) expr -> . corchete
    (47) expr -> . functioncall
    (48) operacion -> . aritmetica
    (49) operacion -> . binaria
    (50) operacion -> . comparation
    (15) num -> . entero
    (16) num -> . decimal
    (17) bool -> . TR
    (18) bool -> . FL
    (32) variable -> . CSINCOMILLAS
    (33) cadena -> . CARACTER
    (72) ajson -> . LBRACKET object RBRACKET
    (34) parentesis -> . LPARENT expr RPARENT
    (77) punto -> . CSINCOMILLAS PUNTO CSINCOMILLAS
    (78) punto -> . CSINCOMILLAS PUNTO punto
    (79) punto -> . CSINCOMILLAS PUNTO corchete
    (80) corchete -> . CSINCOMILLAS LCORCHETE CCOMILLAS RCORCHETE recur_corchete
    (94) functioncall -> . CSINCOMILLAS LPARENT RPARENT
    (95) functioncall -> . CSINCOMILLAS LPARENT argumentos RPARENT
    (51) aritmetica -> . expr SUMA expr
    (52) aritmetica -> . expr RESTA expr
    (53) aritmetica -> . expr MUL expr
    (54) aritmetica -> . expr DIV expr
    (55) binaria -> . expr AND expr
    (56) binaria -> . expr OR expr
    (57) binaria -> . NOT expr
    (58) comparation -> . expr LE expr
    (59) comparation -> . expr LT expr
    (60) comparation -> . expr GE expr
    (61) comparation -> . expr GT expr
    (62) comparation -> . expr EQ expr
    (13) entero -> . ENTERO
    (14) decimal -> . DECIMAL

    NULL            shift and go to state 36
    RESTA           shift and go to state 38
    SUMA            shift and go to state 39
    TR              shift and go to state 51
    FL              shift and go to state 52
    CSINCOMILLAS    shift and go to state 53
    CARACTER        shift and go to state 54
    LBRACKET        shift and go to state 55
    LPARENT         shift and go to state 56
    NOT             shift and go to state 57
    ENTERO          shift and go to state 58
    DECIMAL         shift and go to state 59

    expr                           shift and go to state 182
    operacion                      shift and go to state 33
    num                            shift and go to state 34
    bool                           shift and go to state 35
    variable                       shift and go to state 37
    cadena                         shift and go to state 40
    ajson                          shift and go to state 41
    parentesis                     shift and go to state 42
    punto                          shift and go to state 43
    corchete                       shift and go to state 44
    functioncall                   shift and go to state 45
    aritmetica                     shift and go to state 46
    binaria                        shift and go to state 47
    comparation                    shift and go to state 48
    entero                         shift and go to state 49
    decimal                        shift and go to state 50

state 178

    (91) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr . SEMICOLON RBRACKET
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 183
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77
    LE              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82


state 179

    (86) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement . RBRACKET

    RBRACKET        shift and go to state 184


state 180

    (88) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 185


state 181

    (89) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .

    LET             reduce using rule 89 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 89 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 89 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 89 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 89 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 89 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 89 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 89 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 89 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)


state 182

    (90) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr . SEMICOLON RBRACKET
    (51) aritmetica -> expr . SUMA expr
    (52) aritmetica -> expr . RESTA expr
    (53) aritmetica -> expr . MUL expr
    (54) aritmetica -> expr . DIV expr
    (55) binaria -> expr . AND expr
    (56) binaria -> expr . OR expr
    (58) comparation -> expr . LE expr
    (59) comparation -> expr . LT expr
    (60) comparation -> expr . GE expr
    (61) comparation -> expr . GT expr
    (62) comparation -> expr . EQ expr

    SEMICOLON       shift and go to state 186
    SUMA            shift and go to state 72
    RESTA           shift and go to state 73
    MUL             shift and go to state 74
    DIV             shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77
    LE              shift and go to state 78
    LT              shift and go to state 79
    GE              shift and go to state 80
    GT              shift and go to state 81
    EQ              shift and go to state 82


state 183

    (91) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 187


state 184

    (86) condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .

    LET             reduce using rule 86 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    TYPE            reduce using rule 86 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    FUNCTION        reduce using rule 86 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    IF              reduce using rule 86 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    WHILE           reduce using rule 86 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    CSINCOMILLAS    reduce using rule 86 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    $end            reduce using rule 86 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    RBRACKET        reduce using rule 86 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)
    RETURN          reduce using rule 86 (condition -> IF LPARENT expr RPARENT LBRACKET statement RBRACKET ELSE LBRACKET statement RBRACKET .)


state 185

    (88) function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .

    LET             reduce using rule 88 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 88 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 88 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 88 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 88 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 88 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 88 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 88 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 88 (function -> FUNCTION CSINCOMILLAS LPARENT RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)


state 186

    (90) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON . RBRACKET

    RBRACKET        shift and go to state 188


state 187

    (91) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .

    LET             reduce using rule 91 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 91 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 91 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 91 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 91 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 91 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 91 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 91 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 91 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET RETURN expr SEMICOLON RBRACKET .)


state 188

    (90) function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .

    LET             reduce using rule 90 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    TYPE            reduce using rule 90 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    FUNCTION        reduce using rule 90 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    IF              reduce using rule 90 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    WHILE           reduce using rule 90 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    CSINCOMILLAS    reduce using rule 90 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    $end            reduce using rule 90 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RBRACKET        reduce using rule 90 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)
    RETURN          reduce using rule 90 (function -> FUNCTION CSINCOMILLAS LPARENT arg_list RPARENT PUNTOS tipo LBRACKET statement RETURN expr SEMICOLON RBRACKET .)

