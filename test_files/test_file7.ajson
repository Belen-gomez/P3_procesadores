//Definicion de un ajson

type NestedObject = { "this is": int, prop2: int, "prop3": boolean };
type Object = { prop1: float, "nested": NestedObject };
type Circle = {cx: float, cy: float, radius: float, color: string};

//Declaración de un ajson
let circle: Circle ={
    x: 10,
    y: 10,
    radius: 10,
    color: 'r'
};

//Reasignación de un ajson
let nested : NestedObject = {"this is": 30, prop2: 20, "prop3": false};
NestedObject = { "this is": 10, prop2: 20, "prop3": true };

type var1 = {prop1: character, prop2: character, "this is": int, "nested": int};
let nested = 3;
let var1 = {
    prop1: 'n',
    prop2: 'b',
    "this is": 10,
    "nested": nested
};

//Notacion punto y corchete
A = var1.prop1;
A = var1["prop1"];

let b = var1.prop1 * var1["prop1"];

b = var1.prop1.prop2 * var1["prop1"]["prop2"]["prop2"]["prop2"]["prop"];

b = var1.nested["this is"] + 3;
b = var1["this is"].nested.p;
b = var1["this is"].nested;

b = var1["this is"].nested.p["prop1"].p;

//Los valores de un ajson pueden ser cualquier expresion
ajson = {
    x: 10,
    y: 10 * 9 + (20 - 3) * 4,
    radius: 'h',
    color: 'r',
    "this is": B||A||C,
    prop2: !B,
    "prop3": 'a' + 'a',
    "prop4": {
        "this is": (4 +3) > (5 +1) && (4 +3) <= (5 +1),
        prop2: 20,
        "prop3": var1.prop1
    },
};



