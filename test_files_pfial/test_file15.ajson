//Errores en ajson
//No puede haber un ajson vacio
type ajson = { };

//errores en los tipos
type NestedObject = { "this is": 3 * 3, prop2: int, "prop3": boolean }; 
type NestedObject = { "this is": nada, prop2: int, "prop3": boolean }; 
type claves_repetidas = {cx:int, cx:int, cy:int,};
let a : AjsonNoDefinido = {a:6};

type ejemplo = {a:int, b:float, "c": character, d:{a:int, b:float,}};

let ajson_valido: ejemplo = {
    a:10,
    b: 5.5,
    "c": 'o',
    d: {a:1, b:2.2}
};

let no_ajson_valido: ejemplo = {
    a:10,
    b: 5.5,
    "c": 'o',
    d: {b:2.2}
};

ajson_valido = {a: 5, b: 9.0, c:9};
ajson_valido.a = 'c';
let a = {a : 5, b: 9.0, c:'r'};
type ejemplo = {a:int, b:float};

let a :ejemplo = {a:'r', b: 8.9, "c": 'y'};
let b : ejemplo = {b: 8.9};
let c :ejemplo = {error:8, b: 8.9, "c": 'y'};
let d = ajson.radio.var;
ajson.radio.var = 9;

type Square = {side:float, color: character};

let cuadrado: Square;
cuadrado.side = 10.;


//Errores en las claves de un ajson
type error = {
    10: int,
    tr: boolean,
    +:character,
}

//Errores de estructura
type error ={
    x: +
    y: 10
    radio: 10
};

type error ={
    x +,
    y 10,
    radio: 10
};

type error ={
    x +,
    y 10,
    radio: 10

